--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.19
-- Dumped by pg_dump version 12.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: sdmes; Type: SCHEMA; Schema: -; Owner: mesuser
--

CREATE SCHEMA sdmes;


ALTER SCHEMA sdmes OWNER TO mesuser;

--
-- Name: f_generate_check_digit(character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.f_generate_check_digit(p_target character varying, p_output_byte numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 V_TARGET VARCHAR(1000) := P_TARGET;
 V_ASCII_VALUE VARCHAR(1000);
 V_CALCULATED NUMERIC := 0;
 V_UPSHOT NUMERIC := 0;
 C_EXTRA_TARGET VARCHAR(10) := '357913579'; 
 C_EXTRA_CALCULATED VARCHAR(10) := '24313579';
 C_UPSHOT_FIRST NUMERIC := 1.3579; 
 C_UPSHOT_SECOND NUMERIC := 1.789635; 
 C_MULTIPLY_VAR NUMERIC := 10000; 
 C_INPUT_LENGTH NUMERIC := 6; 
 C_0 NUMERIC := 0;
 C_1 NUMERIC := 1;
 C_2 NUMERIC := 2;
 C_3 NUMERIC := 3;
 C_100 NUMERIC := 100;
BEGIN

 IF LENGTH(V_TARGET) < C_INPUT_LENGTH THEN
 V_TARGET := V_TARGET || C_EXTRA_TARGET;
 END IF;
 FOR N IN C_1 .. LENGTH(V_TARGET) LOOP
 V_ASCII_VALUE := V_ASCII_VALUE || ASCII(SUBSTR(V_TARGET, N, C_1));
 END LOOP;
 FOR N IN C_2 .. LENGTH(V_ASCII_VALUE) LOOP
 IF MOD(N, C_3) = C_0 THEN
 V_CALCULATED := V_CALCULATED +
 (SUBSTR(V_ASCII_VALUE, N, C_1) * (N + C_1));
 ELSE
 IF MOD(N, C_3) = C_1 THEN
 V_CALCULATED := V_CALCULATED +
 (SUBSTR(V_ASCII_VALUE, N, C_1) * (N + C_3));
 ELSE
 V_CALCULATED := V_CALCULATED +
 (SUBSTR(V_ASCII_VALUE, N, C_1) * (N + C_2));
 END IF;
 END IF;
 END LOOP;

 IF LENGTH(V_CALCULATED) <= C_2 THEN
 V_CALCULATED := V_CALCULATED + C_EXTRA_CALCULATED;
 END IF;

 FOR N IN C_2 .. LENGTH(V_CALCULATED) LOOP
 V_UPSHOT := V_UPSHOT || SUBSTR(TRUNC((SUBSTR(V_CALCULATED, N, C_2) /
 C_UPSHOT_FIRST) * C_100),
 C_2);
 END LOOP;
 IF SUBSTR(V_UPSHOT, C_2, P_OUTPUT_BYTE) IS NULL THEN
 V_UPSHOT := V_ASCII_VALUE * C_UPSHOT_SECOND;
 END IF;
 V_UPSHOT := SUBSTR(TRUNC((V_UPSHOT / C_UPSHOT_SECOND) * C_MULTIPLY_VAR),
 C_2);

 RETURN(SUBSTR(V_UPSHOT, C_2, P_OUTPUT_BYTE));
 
END ; $$;


ALTER FUNCTION sdmes.f_generate_check_digit(p_target character varying, p_output_byte numeric) OWNER TO mesuser;

--
-- Name: f_get_end_number(numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.f_get_end_number(p_dispatch_id numeric, p_end_number numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
 V_SERIAL_RULE_ID NUMERIC;
 V_SHARED_FLAG VARCHAR(10);
 V_PREFIX_YEAR_MONTH VARCHAR(30);
 V_MONTHLY_INITIALIZED VARCHAR(10);
 V_END_NUMBER NUMERIC;
 V_ITEM_NUMBER VARCHAR(50);
BEGIN

 SELECT MIM.SERIAL_RULE_ID, MIM.ITEM_NUMBER
 INTO STRICT V_SERIAL_RULE_ID, V_ITEM_NUMBER
 FROM MTL_ITEM_MASTERS MIM INNER JOIN JOB_DISPATCHES JD ON MIM.ITEM_ID = JD.ITEM_ID
 WHERE JD.DISPATCH_ID = P_DISPATCH_ID ;

 SELECT MISR.PREFIX_YEAR_MONTH_TYPE, MISR.MONTHLY_INITIALIZED, MISR.SHARED_FLAG
 INTO STRICT V_PREFIX_YEAR_MONTH, V_MONTHLY_INITIALIZED, V_SHARED_FLAG
 FROM MTL_ITEM_SERIAL_RULES MISR
 WHERE MISR.SERIAL_RULE_ID = V_SERIAL_RULE_ID;

 IF (V_PREFIX_YEAR_MONTH IS NULL AND V_SERIAL_RULE_ID <> 57) THEN
 BEGIN
 
 IF V_SHARED_FLAG = 'Y' THEN
 SELECT MAX(JSN.SERIAL_SEQUENCE_NUMBER)
 INTO STRICT V_END_NUMBER
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN MTL_ITEM_MASTERS A ON JSN.ITEM_NUMBER = A.ITEM_NUMBER
 WHERE A.SERIAL_RULE_ID = V_SERIAL_RULE_ID
 AND JSN.SERIAL_SEQUENCE_NUMBER >= P_END_NUMBER;
 ELSE
 SELECT MAX(JSN.SERIAL_SEQUENCE_NUMBER)
 INTO STRICT V_END_NUMBER
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.ITEM_NUMBER = V_ITEM_NUMBER
 AND JSN.SERIAL_SEQUENCE_NUMBER >= P_END_NUMBER;
 END IF ;
 
 IF V_END_NUMBER IS NOT NULL THEN
 RETURN(V_END_NUMBER) ;
 ELSE
 RETURN(P_END_NUMBER) ;
 END IF ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 RETURN(P_END_NUMBER) ;
 END ;
 ELSE
 RETURN(P_END_NUMBER) ;
 END IF ;
 
END ; $$;


ALTER FUNCTION sdmes.f_get_end_number(p_dispatch_id numeric, p_end_number numeric) OWNER TO mesuser;

--
-- Name: f_get_label_attribute(numeric, numeric, character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.f_get_label_attribute(p_mfg_site_id numeric, p_item_id numeric, p_label_name character varying, p_attribute_name character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 V_RETURN_VALUE VARCHAR(100);
BEGIN

 SELECT MILR.USE_ATTRIBUTE_VALUE
 INTO STRICT V_RETURN_VALUE
 FROM MTL_ITEM_LABEL_RULES MILR
 WHERE MILR.MFG_SITE_ID = P_MFG_SITE_ID
 AND MILR.ITEM_ID = P_ITEM_ID
 AND MILR.LABEL_NAME = P_LABEL_NAME
 AND MILR.USE_ATTRIBUTE_NAME = P_ATTRIBUTE_NAME;

 RETURN(V_RETURN_VALUE);
 
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 RETURN(V_RETURN_VALUE) ;
END ; $$;


ALTER FUNCTION sdmes.f_get_label_attribute(p_mfg_site_id numeric, p_item_id numeric, p_label_name character varying, p_attribute_name character varying) OWNER TO mesuser;

--
-- Name: f_get_serialnum_status(character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.f_get_serialnum_status(p_item_number character varying, p_serial_number character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 V_SERIAL_CHECK NUMERIC;
 V_RUNNING_CHECK NUMERIC;
 V_COMPLETE_CHECK NUMERIC;
BEGIN

 BEGIN
 SELECT 1
 INTO STRICT V_SERIAL_CHECK
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.ITEM_NUMBER = P_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = P_SERIAL_NUMBER;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 V_SERIAL_CHECK := 0;
 END;

 BEGIN
 SELECT 1
 INTO STRICT V_RUNNING_CHECK
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OP_HISTORIES JDOH ON JSN.ITEM_NUMBER = JDOH.ASSY_ITEM_NUMBER AND JSN.SERIAL_NUMBER = JDOH.SERIAL_NUMBER
 WHERE JSN.ITEM_NUMBER = P_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = P_SERIAL_NUMBER;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 V_RUNNING_CHECK := 0;
 WHEN TOO_MANY_ROWS THEN
 V_RUNNING_CHECK := 1;
 END;

 BEGIN
 SELECT 1
 INTO STRICT V_COMPLETE_CHECK
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OP_HISTORIES JDOH ON JSN.ITEM_NUMBER = JDOH.ASSY_ITEM_NUMBER AND JSN.SERIAL_NUMBER = JDOH.SERIAL_NUMBER
 WHERE JSN.ITEM_NUMBER = P_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = P_SERIAL_NUMBER
 AND JDOH.OPERATION_TYPE = 'EOL';
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 V_COMPLETE_CHECK := 0;
 END;

 IF V_RUNNING_CHECK = 0 THEN
 RETURN('NEW');
 ELSE
 IF V_COMPLETE_CHECK = 0 THEN
 RETURN('MANUFACTURING');
 ELSE
 RETURN('COMPLETED');
 END IF;
 END IF;
 
END ; $$;


ALTER FUNCTION sdmes.f_get_serialnum_status(p_item_number character varying, p_serial_number character varying) OWNER TO mesuser;

--
-- Name: f_mes_get_err_message(character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.f_mes_get_err_message(p_program_name character varying, p_seq numeric, p_userlang character varying, p_error_code character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 V_ERROR_MESSAGE VARCHAR(200);
BEGIN

 SELECT ERROR_MESSAGE
 INTO STRICT V_ERROR_MESSAGE
 FROM MES_PROGRAM_ERRORS MPE
 WHERE MPE.PROGRAM_NAME = P_PROGRAM_NAME
 AND MPE.LANGUAGE = P_USERLANG
 AND MPE.ERROR_CODE = COALESCE(P_ERROR_CODE,MPE.ERROR_CODE)
 LIMIT 1;

 RETURN(V_ERROR_MESSAGE);

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 BEGIN
 SELECT ERROR_MESSAGE
 INTO STRICT V_ERROR_MESSAGE
 FROM MES_PROGRAM_ERRORS MPE
 WHERE MPE.PROGRAM_NAME = 'F_MES_GET_ERR_MESSAGE'
 AND MPE.LANGUAGE = P_USERLANG
 AND MPE.ERROR_CODE = COALESCE('E_UNDEFINED_ERROR',MPE.ERROR_CODE)
 LIMIT 1;
 RETURN(V_ERROR_MESSAGE);
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 RETURN('NO DATA.') ;
 END;
END ; $$;


ALTER FUNCTION sdmes.f_mes_get_err_message(p_program_name character varying, p_seq numeric, p_userlang character varying, p_error_code character varying) OWNER TO mesuser;

--
-- Name: f_set_check_digit(character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.f_set_check_digit(p_target character varying, p_output_byte numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
-- CHECK DIGIT LOGIC / INPUT : MORE THAN 1BYTE / OUTPUT: MAX 5BYTE 
 V_CREATION_TARGET VARCHAR(1000) := P_TARGET;
 V_INPUT_LENGTH INT;
 V_ASCII_VALUE VARCHAR(1000);
 V_CAL_VALUE INT := 0;
 V_LAST_VAL INT := 0;
 C_CREATION_TARGET_ADDITIONAL VARCHAR(10) := '357913579'; 
 C_CAL_ADDITIONAL VARCHAR(10) := '24313579'; 
 C_LAST_1ST NUMERIC := 1.3579; 
 C_LAST_2ND NUMERIC := 1.789635; 
 C_MUL_VAL INT := 10000; 
 C_INPUT_LENGTH INT := 6; 
 C_0 INT := 0;
 C_1 INT := 1;
 C_2 INT := 2;
 C_3 INT := 3;
 C_100 INT := 100;
 N RECORD ;
BEGIN
 V_CREATION_TARGET := P_TARGET;
 IF LENGTH(V_CREATION_TARGET) < C_INPUT_LENGTH THEN
 V_CREATION_TARGET := V_CREATION_TARGET||C_CREATION_TARGET_ADDITIONAL;
 END IF;
 FOR N IN C_1..LENGTH(V_CREATION_TARGET) LOOP
 IF V_ASCII_VALUE IS NULL THEN
 V_ASCII_VALUE := ASCII(SUBSTR(V_CREATION_TARGET,N,C_1));
 ELSE
 V_ASCII_VALUE := V_ASCII_VALUE||ASCII(SUBSTR(V_CREATION_TARGET,N,C_1));
 END IF ;
 END LOOP;
 FOR N IN C_2..LENGTH(V_ASCII_VALUE) LOOP
 IF MOD(N,C_3) = C_0 THEN
 V_CAL_VALUE := V_CAL_VALUE + (CAST(SUBSTR(V_ASCII_VALUE,N,C_1) AS INT) * (N+C_1));
 ELSE
 IF MOD(N,C_3) = C_1 THEN
 V_CAL_VALUE := V_CAL_VALUE + (CAST(SUBSTR(V_ASCII_VALUE,N,C_1) AS INT) * (N+C_3));
 ELSE
 V_CAL_VALUE := V_CAL_VALUE + (CAST(SUBSTR(V_ASCII_VALUE,N,C_1) AS INT) * (N+C_2));
 END IF;
 END IF;
 END LOOP;
 IF LENGTH(CAST(V_CAL_VALUE AS VARCHAR)) <= C_2 THEN
 V_CAL_VALUE := V_CAL_VALUE+C_CAL_ADDITIONAL;
 END IF;
 FOR N IN C_2..LENGTH(CAST(V_CAL_VALUE AS VARCHAR)) LOOP
 V_LAST_VAL := CAST(CAST(V_LAST_VAL AS VARCHAR) || SUBSTR(CAST(TRUNC((CAST(SUBSTR(CAST(V_CAL_VALUE AS VARCHAR),N,C_2) AS INT) / C_LAST_1ST) * C_100) AS VARCHAR),C_2) AS INT);
 END LOOP;
 IF SUBSTR(CAST(V_LAST_VAL AS VARCHAR),C_2,CAST(P_OUTPUT_BYTE AS INT)) IS NULL
 THEN V_LAST_VAL := CAST(V_ASCII_VALUE AS INT) * C_LAST_2ND;
 END IF;
 V_LAST_VAL := CAST(SUBSTR(CAST(TRUNC((V_LAST_VAL / C_LAST_2ND)*C_MUL_VAL) AS VARCHAR), C_2) AS INT);
 RETURN(SUBSTR(CAST(V_LAST_VAL AS VARCHAR),C_2,CAST(P_OUTPUT_BYTE AS INT)));
END ; $$;


ALTER FUNCTION sdmes.f_set_check_digit(p_target character varying, p_output_byte numeric) OWNER TO mesuser;

--
-- Name: p_assy_barcode_check(character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_assy_barcode_check(p_barcode character varying, p_lang character varying, OUT p_out_item_number character varying, OUT p_out_serial_number character varying, OUT p_out_result character varying, OUT p_out_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_BOX_BARCODE_TYPE VARCHAR(100) ;
 V_LOC NUMERIC ;

BEGIN

 SELECT ITEM_NUMBER, SERIAL_NUMBER
 INTO STRICT P_OUT_ITEM_NUMBER, P_OUT_SERIAL_NUMBER
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.CONFIG_INDICATOR = P_BARCODE;

 P_OUT_RESULT := 'OK';
 P_OUT_MESSAGE := ' ';

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 SELECT POSITION('+' IN P_BARCODE) INTO V_LOC ;
 IF V_LOC = 0 THEN
 BEGIN
 SELECT ITEM_NUMBER, SERIAL_NUMBER
 INTO STRICT P_OUT_ITEM_NUMBER, P_OUT_SERIAL_NUMBER
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.SERIAL_NUMBER = P_BARCODE
 LIMIT 1 ; 
 P_OUT_RESULT := 'OK';
 P_OUT_MESSAGE := ' ';
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_OUT_RESULT := 'NG';
 P_OUT_MESSAGE := F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,NULL
 ,P_LANG
 ,'E_NOT_EXIST_SERIAL');
 END ;
 ELSE
 BEGIN
 SELECT ITEM_NUMBER, SERIAL_NUMBER
 INTO STRICT P_OUT_ITEM_NUMBER, P_OUT_SERIAL_NUMBER
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.ITEM_NUMBER = SUBSTR(P_BARCODE, 1, POSITION('+' IN P_BARCODE) -1)
 AND JSN.SERIAL_NUMBER = SUBSTR(P_BARCODE, POSITION('+' IN P_BARCODE) + 1)
 LIMIT 1 ; 
 P_OUT_RESULT := 'OK';
 P_OUT_MESSAGE := ' ';
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_OUT_RESULT := 'NG';
 P_OUT_MESSAGE := F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,NULL
 ,P_LANG
 ,'E_NOT_EXIST_SERIAL');
 END ; 
 END IF ;
END ; $$;


ALTER FUNCTION sdmes.p_assy_barcode_check(p_barcode character varying, p_lang character varying, OUT p_out_item_number character varying, OUT p_out_serial_number character varying, OUT p_out_result character varying, OUT p_out_message character varying) OWNER TO mesuser;

--
-- Name: p_box_barcode_check(character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_box_barcode_check(p_barcode character varying, p_language character varying, OUT p_box_barcode_type character varying, OUT p_item_number character varying, OUT p_serial_number character varying, OUT p_box_chk_result character varying, OUT p_box_chk_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_LOC NUMERIC ;
 V_DUMMY NUMERIC ;

BEGIN

 BEGIN
 SELECT JSN.ITEM_NUMBER, JSN.SERIAL_NUMBER, 'ITEM + SERIAL TYPE', 'OK'
 INTO STRICT P_ITEM_NUMBER, P_SERIAL_NUMBER, P_BOX_BARCODE_TYPE, P_BOX_CHK_RESULT
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.CONFIG_INDICATOR = P_BARCODE
 LIMIT 1 ;
 RETURN ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 END ;

 BEGIN
 SELECT T.ITEM_NUMBER
 INTO STRICT P_ITEM_NUMBER
 FROM MTL_PACKING_NUMBER_CONTENTS T, MTL_PACKING_NUMBERS T1
 WHERE T1.PACKING_NUMBER = P_BARCODE
 AND T1.PACKING_TYPE = 'BOX'
 AND T.PACKING_ID = T1.PACKING_ID
 LIMIT 1 ;
 P_BOX_BARCODE_TYPE := 'PACKING NUMBER TYPE';
 P_BOX_CHK_RESULT := 'OK';
 RETURN ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 END ;

 BEGIN
 SELECT JSN.ITEM_NUMBER, JSN.SERIAL_NUMBER, 'ITEM + SERIAL TYPE', 'OK'
 INTO STRICT P_ITEM_NUMBER, P_SERIAL_NUMBER, P_BOX_BARCODE_TYPE, P_BOX_CHK_RESULT
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE (JSN.SERIAL_NUMBER = P_BARCODE OR
 JSN.SERIAL_NUMBER = SUBSTR(P_BARCODE, 1, LENGTH(P_BARCODE) - 1) OR
 JSN.SERIAL_NUMBER = SUBSTR(P_BARCODE, 1, LENGTH(P_BARCODE) - 2))
 AND JSN.SERIAL_NUMBER IS NOT NULL
 LIMIT 1 ;
 RETURN ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 END ;

 IF POSITION('+' IN P_BARCODE) <> 0 THEN

 BEGIN
 SELECT JSN.ITEM_NUMBER, JSN.SERIAL_NUMBER, 'ITEM + SERIAL TYPE', 'OK'
 INTO STRICT P_ITEM_NUMBER, P_SERIAL_NUMBER, P_BOX_BARCODE_TYPE, P_BOX_CHK_RESULT
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.ITEM_NUMBER = SUBSTR(P_BARCODE, 1, POSITION('+' IN P_BARCODE) - 1)
 AND JSN.SERIAL_NUMBER = SUBSTR(P_BARCODE, POSITION('+' IN P_BARCODE) + 1) 
 LIMIT 1 ;
 RETURN ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 END ;

 END IF ;

 IF POSITION('+' IN P_BARCODE) <> 0 THEN

 BEGIN
 SELECT JCSN.ITEM_NUMBER, JCSN.SERIAL_NUMBER, 'ITEM + SERIAL TYPE', 'OK'
 INTO STRICT P_ITEM_NUMBER, P_SERIAL_NUMBER, P_BOX_BARCODE_TYPE, P_BOX_CHK_RESULT
 FROM JOB_CUSTOMER_SERIAL_NUMBERS JCSN, MTL_ITEM_MASTERS MIM
 WHERE JCSN.SERIAL_TYPE = 'DOMESTIC'
 AND JCSN.ITEM_NUMBER = MIM.ITEM_NUMBER
 AND MIM.CUSTOMER_ITEM_NUMBER1 = SUBSTR(P_BARCODE, 1, POSITION('+' IN P_BARCODE) - 1)
 AND JCSN.CUS_SERIAL_NUMBER = SUBSTR(P_BARCODE, POSITION('+' IN P_BARCODE) + 1) 
 LIMIT 1 ;
 RETURN ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 END ;

 END IF ;

 BEGIN
 SELECT JCSN.ITEM_NUMBER, JCSN.SERIAL_NUMBER, 'CUSTORMER ITEM + SERIAL TYPE', 'OK'
 INTO P_ITEM_NUMBER, P_SERIAL_NUMBER, P_BOX_BARCODE_TYPE, P_BOX_CHK_RESULT
 FROM JOB_CUSTOMER_SERIAL_NUMBERS JCSN
 WHERE JCSN.CUS_SERIAL_NUMBER = SUBSTR(P_BARCODE, 1, LENGTH(P_BARCODE) - 1);
 RETURN ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 WHEN TOO_MANY_ROWS THEN
 NULL ;
 END ;

 IF POSITION('+' IN P_BARCODE) <> 0 THEN

 BEGIN
 SELECT JSN.ITEM_NUMBER, JSN.SERIAL_NUMBER, 'IC BOX ITEM + SERIAL TYPE', 'OK'
 INTO P_ITEM_NUMBER, P_SERIAL_NUMBER, P_BOX_BARCODE_TYPE, P_BOX_CHK_RESULT
 FROM MTL_ITEM_LABEL_RULES MILR, MTL_ITEM_MASTERS MIM, JOB_SERIAL_NUMBERS JSN
 WHERE MIM.ITEM_ID = MILR.ITEM_ID
 AND MIM.ITEM_NUMBER = JSN.ITEM_NUMBER
 AND MILR.USE_ATTRIBUTE_VALUE = SUBSTR(P_BARCODE, 1, POSITION('+' IN P_BARCODE) - 1)
 AND JSN.SERIAL_NUMBER = SUBSTR(P_BARCODE, POSITION('+' IN P_BARCODE) + 1)
 AND MILR.LABEL_NAME = 'BOX_LABEL'
 AND MILR.USE_ATTRIBUTE_NAME = 'BOX_ITEM_CODE'; 
 RETURN ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 WHEN TOO_MANY_ROWS THEN
 NULL ;
 END ;
 
 END IF ;

 P_BOX_CHK_RESULT := 'NG';
 P_BOX_CHK_MESSAGE := F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,NULL
 ,P_LANGUAGE
 ,'E_NOT_EXIST_SERIAL'); 

END ; $$;


ALTER FUNCTION sdmes.p_box_barcode_check(p_barcode character varying, p_language character varying, OUT p_box_barcode_type character varying, OUT p_item_number character varying, OUT p_serial_number character varying, OUT p_box_chk_result character varying, OUT p_box_chk_message character varying) OWNER TO mesuser;

--
-- Name: p_cancel_job_serial_numbers(numeric, character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_cancel_job_serial_numbers(p_dispatch_id numeric, p_lang character varying, p_user_id numeric, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_SERIAL_RULE_ID NUMERIC;
 V_DUMMY NUMERIC;
 V_JOB_QTY NUMERIC;
 V_SERIAL_QTY NUMERIC;
 V_SERIAL_TXN_QTY NUMERIC;
 V_QTY NUMERIC;
 V_SERVICETAG_TLI VARCHAR(100);
 V_INTERFACED_WO_NUM VARCHAR(30);
 V_SHARED_END_FLAG VARCHAR(10);
 V_ITEM_NUMBER VARCHAR(100);
 V_END_NUMBER NUMERIC ;
 V_SVC_TAG_SERIAL_RULE_ID NUMERIC ;
 
 V_MIN_SERIAL VARCHAR(100) ;
 V_MAX_SERIAL VARCHAR(100) ;

BEGIN

 SELECT MIM.SERIAL_RULE_ID,
 JD.QTY,
 JD.INTERFACED_WO_NUM,
 MIM.ITEM_NUMBER,
 MIM.SVC_TAG_SERIAL_RULE_ID
 INTO STRICT V_SERIAL_RULE_ID, V_JOB_QTY, V_INTERFACED_WO_NUM, V_ITEM_NUMBER, V_SVC_TAG_SERIAL_RULE_ID
 FROM JOB_DISPATCHES JD INNER JOIN MTL_ITEM_MASTERS MIM ON JD.ITEM_NUMBER = MIM.ITEM_NUMBER
 WHERE JD.DISPATCH_ID = P_DISPATCH_ID;

 BEGIN
 SELECT 1
 INTO STRICT V_DUMMY
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID
 LIMIT 1;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES',
 NULL,
 P_LANG,
 'E_SERIAL_NOT_CREATED_JOB');
 RETURN;
 END;
 
 SELECT SHARED_FLAG
 INTO STRICT V_SHARED_END_FLAG
 FROM MTL_ITEM_SERIAL_RULES
 WHERE SERIAL_RULE_ID = V_SERIAL_RULE_ID;
 
 BEGIN
 SELECT MISR.FIXED_PREFIX
 INTO STRICT V_SERVICETAG_TLI
 FROM MTL_ITEM_SERIAL_RULES MISR
 WHERE SERIAL_RULE_ID = V_SVC_TAG_SERIAL_RULE_ID ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 V_SERVICETAG_TLI := '' ;
 END;

 SELECT COALESCE(COUNT(*), 0)
 INTO V_SERIAL_QTY
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID ;

 SELECT COALESCE(COUNT(*), 0)
 INTO V_SERIAL_TXN_QTY
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID
 AND EXISTS (SELECT 1 FROM JOB_DISPATCH_OP_HISTORIES JDOH
 WHERE JDOH.ASSY_ITEM_NUMBER = JSN.ITEM_NUMBER
 AND JDOH.SERIAL_NUMBER = JSN.SERIAL_NUMBER) ;

 IF V_SERIAL_TXN_QTY > 0 THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES',
 NULL,
 P_LANG,
 'E_ALREADY_START_OP');
 RETURN;
 END IF ;
 
 IF V_SERIAL_QTY > V_JOB_QTY THEN
 
 V_QTY := V_SERIAL_QTY - V_JOB_QTY ;

 ELSE 
 
 V_QTY := V_JOB_QTY ;

 BEGIN
 SELECT 1
 INTO STRICT V_DUMMY
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OP_HISTORIES JDOH ON JSN.ITEM_NUMBER = JDOH.ASSY_ITEM_NUMBER AND JSN.SERIAL_NUMBER = JDOH.SERIAL_NUMBER
 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID
 LIMIT 1;
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES',
 NULL,
 P_LANG,
 'E_ALREADY_START_OP');
 RETURN;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL;
 END; 

 END IF ;

 SELECT MIN(SERIAL_NUMBER), MAX(SERIAL_NUMBER)
 INTO V_MIN_SERIAL, V_MAX_SERIAL
 FROM (SELECT JSN.SERIAL_NUMBER
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID
 AND NOT EXISTS
 (SELECT 1
 FROM JOB_DISPATCH_OP_HISTORIES JDOH
 WHERE JDOH.ASSY_ITEM_NUMBER = JSN.ITEM_NUMBER
 AND JDOH.SERIAL_NUMBER = JSN.SERIAL_NUMBER)
 ORDER BY JSN.SERIAL_SEQUENCE_NUMBER) AA
 LIMIT V_QTY ;

 DELETE FROM JOB_CUSTOMER_SERIAL_NUMBERS JCSN
 WHERE JCSN.SERIAL_NUMBER_ID IN
 (SELECT SERIAL_NUMBER_ID
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID) ;

 DELETE FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID ;

 IF V_SHARED_END_FLAG = 'Y' THEN
 SELECT A.END_NUMBER
 INTO V_END_NUMBER
 FROM MTL_ITEM_SERIAL_RULES A
 WHERE A.SERIAL_RULE_ID = V_SERIAL_RULE_ID ;
 V_END_NUMBER := F_GET_END_NUMBER(P_DISPATCH_ID, V_END_NUMBER-V_QTY) ;
 UPDATE MTL_ITEM_SERIAL_RULES 
 SET END_NUMBER = V_END_NUMBER,
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_USER_ID
 WHERE SERIAL_RULE_ID = V_SERIAL_RULE_ID;
 ELSE
 SELECT A.END_NUMBER
 INTO V_END_NUMBER
 FROM MTL_ITEM_MASTERS A
 WHERE A.ITEM_NUMBER = V_ITEM_NUMBER;
 V_END_NUMBER := F_GET_END_NUMBER(P_DISPATCH_ID, V_END_NUMBER-V_QTY) ;
 UPDATE MTL_ITEM_MASTERS 
 SET END_NUMBER = V_END_NUMBER,
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = 1
 WHERE ITEM_NUMBER = V_ITEM_NUMBER;
 END IF;

 P_RESULT := 'OK';
 P_MESSAGE := ' ';
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES',
 NULL,
 P_LANG,
 'E_UNREGISTERED_SERIAL_INFO');
 RETURN ; 
END ; $$;


ALTER FUNCTION sdmes.p_cancel_job_serial_numbers(p_dispatch_id numeric, p_lang character varying, p_user_id numeric, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_create_domestic_serial(numeric, character varying, character varying, numeric, character varying, character varying, numeric, numeric, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_domestic_serial(p_dispatch_id numeric, p_item_number character varying, p_separator character varying, p_qty numeric, p_prefix character varying, p_date character varying, p_end_number numeric, p_digits numeric, p_suffix character varying, p_checksum character varying, p_lang character varying, p_user_id numeric, OUT p_cds_result character varying, OUT p_cds_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_SERIAL_TYPE VARCHAR(30);
 V_SERIAL_NUMBER VARCHAR(50);
 V_ENCODING NUMERIC;
 V_CONFIG_INDICATOR VARCHAR(100);
 V_DUMMY NUMERIC;
 V_DESCRIPTION VARCHAR(1000);
 V_CUS_NUMBER VARCHAR(50); 
 V_CUS_NUMBER3 VARCHAR(50); 
 V_ITEM_NUMBER VARCHAR(50); 
 V_CONFIG_INDICATOR2 VARCHAR(100);
 V_PREFIX VARCHAR(100);

BEGIN

 SELECT MISR.SERIAL_RULE_DESCRIPTION,
	 MIM.CUSTOMER_ITEM_NUMBER1, 
	 MIM.CUSTOMER_ITEM_NUMBER3, 
	 MISR.ENCODING, 
	 MIM.PREFIX_TYPE
	 INTO STRICT V_DESCRIPTION,
	 V_CUS_NUMBER,
	 V_CUS_NUMBER3,
	 V_ENCODING,
	 V_PREFIX
 FROM MTL_ITEM_SERIAL_RULES MISR INNER JOIN MTL_ITEM_MASTERS MIM ON MISR.SERIAL_RULE_ID = MIM.SERIAL_RULE_ID
 INNER JOIN JOB_DISPATCHES JD ON JD.ITEM_ID = MIM.ITEM_ID
 WHERE JD.DISPATCH_ID = P_DISPATCH_ID;

 FOR J IN 1 .. P_DIGITS - 1 LOOP
	 IF V_SERIAL_TYPE IS NULL THEN
	 	V_SERIAL_TYPE := '0' ;
	 ELSE
	 	V_SERIAL_TYPE := V_SERIAL_TYPE || '0';
	 END IF ;
 END LOOP;

 IF V_SERIAL_TYPE IS NULL THEN
 	V_SERIAL_TYPE := '9' ;
 ELSE
 	V_SERIAL_TYPE := V_SERIAL_TYPE || '9';
 END IF ;

 FOR I IN P_END_NUMBER + 1 .. P_END_NUMBER + P_QTY LOOP

 	IF P_SUFFIX IS NOT NULL THEN
 		IF P_PREFIX IS NOT NULL THEN
 			V_SERIAL_NUMBER := TRIM(P_PREFIX) || P_DATE ||
			 LTRIM(TO_CHAR(I, V_SERIAL_TYPE)) ||
 			TRIM(P_SUFFIX);
		ELSE
			 V_SERIAL_NUMBER := P_DATE ||
			 LTRIM(TO_CHAR(I, V_SERIAL_TYPE)) ||
			 TRIM(P_SUFFIX);
 		END IF ;
 	ELSE
 		IF P_PREFIX IS NOT NULL THEN
 			V_SERIAL_NUMBER := TRIM(P_PREFIX) || P_DATE ||
 			LTRIM(TO_CHAR(I, V_SERIAL_TYPE));
 		ELSE
 			V_SERIAL_NUMBER := P_DATE ||
			 LTRIM(TO_CHAR(I, V_SERIAL_TYPE));
 		END IF ;
	 END IF ;
 
	 IF P_CHECKSUM = 'Y' THEN
		 V_SERIAL_NUMBER := V_SERIAL_NUMBER ||
		 F_GENERATE_CHECK_DIGIT(I, 1);
	 END IF;

 	V_ITEM_NUMBER := P_ITEM_NUMBER;
 
	 IF P_SEPARATOR = 'S' THEN
	 	V_CONFIG_INDICATOR2 := V_SERIAL_NUMBER;
	 ELSIF P_SEPARATOR = 'C+' THEN
	 	V_CONFIG_INDICATOR2 := V_CUS_NUMBER3 || REPLACE(P_SEPARATOR,'C','') || V_SERIAL_NUMBER;
	 ELSIF V_PREFIX <> P_PREFIX THEN
	 	V_CONFIG_INDICATOR2 := P_ITEM_NUMBER || P_SEPARATOR || REPLACE(V_SERIAL_NUMBER, P_PREFIX, V_PREFIX);
	 ELSE
	 	V_CONFIG_INDICATOR2 := P_ITEM_NUMBER || P_SEPARATOR || V_SERIAL_NUMBER;
	 END IF;

 	BEGIN
		 SELECT JSN.CONFIG_INDICATOR
		 INTO STRICT V_CONFIG_INDICATOR
		 FROM JOB_SERIAL_NUMBERS JSN
		 WHERE JSN.SERIAL_NUMBER = V_SERIAL_NUMBER
		 AND JSN.ITEM_NUMBER IN (SELECT MIM1.ITEM_NUMBER
		 FROM MTL_ITEM_MASTERS MIM INNER JOIN MTL_ITEM_SERIAL_RULES MISR ON MIM.SERIAL_RULE_ID = MISR.SERIAL_RULE_ID
		 INNER JOIN MTL_ITEM_MASTERS MIM1 ON MISR.SERIAL_RULE_ID = MIM1.SERIAL_RULE_ID
		 WHERE MISR.SHARED_FLAG = 'Y'
		 AND MIM.ITEM_NUMBER = V_ITEM_NUMBER)
		 LIMIT 1 ;
		
 		ROLLBACK ;
 	
		 P_CDS_RESULT := 'NG' ;
		 P_CDS_MESSAGE := V_CONFIG_INDICATOR||' AND '||
		 P_ITEM_NUMBER || P_SEPARATOR || V_SERIAL_NUMBER||' : '||
		 F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES',
			 NULL,
			 P_LANG,
			 'E_ALREADY_EXISTED_SERIAL');
			 EXIT ;
	 EXCEPTION
 		WHEN NO_DATA_FOUND THEN
 
			 INSERT INTO JOB_SERIAL_NUMBERS
			 (CONFIG_INDICATOR,
			 DISPATCH_ID,
			 ITEM_NUMBER,
			 SERIAL_NUMBER,
			 QTY,
			 CREATION_DATE,
			 CREATED_BY,
			 LAST_UPDATE_DATE,
			 LAST_UPDATED_BY,
			 SERIAL_SEQUENCE_NUMBER)
			 VALUES
			 (V_CONFIG_INDICATOR2,
			 P_DISPATCH_ID,
			 V_ITEM_NUMBER,
			 V_SERIAL_NUMBER,
			 1,
			 NOW(),
			 P_USER_ID,
			 NOW(),
			 P_USER_ID,
			 I);
 
			 P_CDS_RESULT := 'OK';
 
	END ;

END LOOP;

END ; $$;


ALTER FUNCTION sdmes.p_create_domestic_serial(p_dispatch_id numeric, p_item_number character varying, p_separator character varying, p_qty numeric, p_prefix character varying, p_date character varying, p_end_number numeric, p_digits numeric, p_suffix character varying, p_checksum character varying, p_lang character varying, p_user_id numeric, OUT p_cds_result character varying, OUT p_cds_message character varying) OWNER TO mesuser;

--
-- Name: p_create_eol_history(character varying, numeric, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_eol_history(p_barcode character varying, p_user_id numeric, p_lang character varying, OUT p_item_number character varying, OUT p_serial_number character varying, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_RESULT VARCHAR(10);
 V_MESSAGE VARCHAR(200);
 V_ITEM_NUMBER VARCHAR(50);
 V_SERIAL_NUMBER VARCHAR(50);
 V_OPERATION_SEQ NUMERIC;
 V_DISPATCH_ID NUMERIC;
 V_TIME_STAMP DATE;
 V_DISPATCH_OPERATION_ID NUMERIC;
 V_LINE_ID NUMERIC;
 V_DUMMY NUMERIC;
 V_LINE VARCHAR(30);

BEGIN

 SELECT P_OUT_ITEM_NUMBER, P_OUT_SERIAL_NUMBER, P_OUT_RESULT, P_OUT_MESSAGE
 INTO V_ITEM_NUMBER, V_SERIAL_NUMBER, V_RESULT, V_MESSAGE
 FROM P_ASSY_BARCODE_CHECK (P_BARCODE,
 P_LANG) ;

 IF V_RESULT = 'NG' THEN
 P_RESULT := V_RESULT;
 P_MESSAGE := V_MESSAGE;
 RETURN ;
 END IF;
 
 BEGIN
 SELECT JDO.OPERATION_SEQ_NUM,
 JSN.DISPATCH_ID,
 JDO.DISPATCH_OPERATION_ID,
 JD.LINE_ID
 INTO STRICT V_OPERATION_SEQ, V_DISPATCH_ID, V_DISPATCH_OPERATION_ID, V_LINE_ID
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OPERATIONS JDO ON JSN.DISPATCH_ID = JDO.DISPATCH_ID
 INNER JOIN JOB_DISPATCHES JD ON JSN.DISPATCH_ID = JD.DISPATCH_ID
 WHERE JSN.ITEM_NUMBER = V_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = V_SERIAL_NUMBER
 AND JDO.OPERATION_TYPE = 'EOL'
 AND JDO.DISABLE_DATE IS NULL;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_NOT_EXIST_OPERATION');
 RETURN ; 
 END; 

 SELECT P_OP_CHK_RESULT, P_OP_CHK_MESSAGE
 INTO V_RESULT, V_MESSAGE
 FROM P_JOB_OPERATION_CHECK(V_ITEM_NUMBER,
 P_LANG,
 V_SERIAL_NUMBER,
 V_DISPATCH_ID,
 V_OPERATION_SEQ) ;

 IF V_RESULT = 'NG' THEN
 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;
 P_RESULT := V_RESULT;
 P_MESSAGE := V_MESSAGE;
 RETURN ;
 END IF;

 BEGIN

 SELECT JDOH.TIME_STAMP
 INTO STRICT V_TIME_STAMP
 FROM JOB_DISPATCH_OP_HISTORIES JDOH
 WHERE JDOH.ASSY_ITEM_NUMBER = V_ITEM_NUMBER
 AND JDOH.SERIAL_NUMBER = V_SERIAL_NUMBER
 AND JDOH.OPERATION_TYPE = 'EOL';

 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_ALREADY_EOL_COMPLETE');
 RETURN ; 

 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL;
 END;

 BEGIN
 SELECT 1
 INTO STRICT V_DUMMY
 FROM JOB_DISPATCH_OP_HISTORIES
 WHERE ASSY_ITEM_NUMBER = V_ITEM_NUMBER
 AND SERIAL_NUMBER = V_SERIAL_NUMBER
 AND OPERATION_TYPE = 'INSPCETION'
 AND PASSFAIL = 'FAIL'
 AND RECENT_FLAG = 'Y';

 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_RESULT_FAIL_EXIST');
 RETURN ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL;
 END;

 INSERT INTO JOB_DISPATCH_OP_HISTORIES
 (ASSY_ITEM_NUMBER,
 SERIAL_NUMBER,
 OPERATION_TYPE,
 PASSFAIL,
 COMMENTS,
 OPERATOR_ID,
 WORKSTATION_NAME,
 TIME_STAMP,
 RECENT_FLAG,
 LINE_ID,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 DISPATCH_OPERATION_ID,
 INTERFACE_FLAG,
 OPERATION_SEQ_NUM,
 OPERATION_DESC)
 VALUES
 (V_ITEM_NUMBER,
 V_SERIAL_NUMBER,
 'EOL',
 'OK',
 '',
 P_USER_ID,
 '-1',
 NOW(),
 'Y',
 V_LINE_ID,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID,
 V_DISPATCH_OPERATION_ID,
 'F',
 V_OPERATION_SEQ,
 'END OF LINE');

 P_RESULT := 'OK';
 P_MESSAGE := ' ';
 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;

END ; $$;


ALTER FUNCTION sdmes.p_create_eol_history(p_barcode character varying, p_user_id numeric, p_lang character varying, OUT p_item_number character varying, OUT p_serial_number character varying, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_create_eol_history(character varying, numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_eol_history(p_barcode character varying, p_user_id numeric, p_operation character varying, p_insp_operation character varying, p_lang character varying, OUT p_item_number character varying, OUT p_serial_number character varying, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_RESULT VARCHAR(10);
 V_MESSAGE VARCHAR(200);
 V_ITEM_NUMBER VARCHAR(50);
 V_SERIAL_NUMBER VARCHAR(50);
 V_OPERATION_SEQ NUMERIC;
 V_OPERATION_DESC VARCHAR(200);
 V_DISPATCH_ID NUMERIC;
 V_TIME_STAMP DATE;
 V_DISPATCH_OPERATION_ID NUMERIC;
 V_LINE_ID NUMERIC;
 V_DUMMY NUMERIC;
 V_LINE VARCHAR(30);

BEGIN

 SELECT P_OUT_ITEM_NUMBER, P_OUT_SERIAL_NUMBER, P_OUT_RESULT, P_OUT_MESSAGE
 INTO V_ITEM_NUMBER, V_SERIAL_NUMBER, V_RESULT, V_MESSAGE
 FROM P_ASSY_BARCODE_CHECK (P_BARCODE,
 P_LANG) ;

 IF V_RESULT = 'NG' THEN
 P_RESULT := V_RESULT;
 P_MESSAGE := V_MESSAGE;
 RETURN ;
 END IF;
 
 BEGIN
 SELECT JDO.OPERATION_SEQ_NUM,
 JSN.DISPATCH_ID,
 JDO.DISPATCH_OPERATION_ID,
 JD.LINE_ID,
 JDO.operation_desc 
 INTO STRICT V_OPERATION_SEQ, V_DISPATCH_ID, V_DISPATCH_OPERATION_ID, V_LINE_ID, V_OPERATION_DESC
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OPERATIONS JDO ON JSN.DISPATCH_ID = JDO.DISPATCH_ID
 INNER JOIN JOB_DISPATCHES JD ON JSN.DISPATCH_ID = JD.DISPATCH_ID
 WHERE JSN.ITEM_NUMBER = V_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = V_SERIAL_NUMBER
 AND JDO.OPERATION_TYPE = p_operation
 AND JDO.DISABLE_DATE IS NULL;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_NOT_EXIST_OPERATION');
 RETURN ; 
 END; 

 SELECT P_OP_CHK_RESULT, P_OP_CHK_MESSAGE
 INTO V_RESULT, V_MESSAGE
 FROM P_JOB_OPERATION_CHECK(V_ITEM_NUMBER,
 P_LANG,
 V_SERIAL_NUMBER,
 V_DISPATCH_ID,
 V_OPERATION_SEQ) ;

 IF V_RESULT = 'NG' THEN
 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;
 P_RESULT := V_RESULT;
 P_MESSAGE := V_MESSAGE;
 RETURN ;
 END IF;

 BEGIN

 SELECT JDOH.TIME_STAMP
 INTO STRICT V_TIME_STAMP
 FROM JOB_DISPATCH_OP_HISTORIES JDOH
 WHERE JDOH.ASSY_ITEM_NUMBER = V_ITEM_NUMBER
 AND JDOH.SERIAL_NUMBER = V_SERIAL_NUMBER
 AND JDOH.OPERATION_TYPE = p_operation;

 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_ALREADY_EOL_COMPLETE');
 RETURN ; 

 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL;
 END;

 BEGIN
 SELECT 1
 INTO STRICT V_DUMMY
 FROM JOB_DISPATCH_OP_HISTORIES
 WHERE ASSY_ITEM_NUMBER = V_ITEM_NUMBER
 AND SERIAL_NUMBER = V_SERIAL_NUMBER
 AND OPERATION_TYPE = p_insp_operation
 AND PASSFAIL = 'FAIL'
 AND RECENT_FLAG = 'Y';

 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_RESULT_FAIL_EXIST');
 RETURN ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL;
 END;

 INSERT INTO JOB_DISPATCH_OP_HISTORIES
 (ASSY_ITEM_NUMBER,
 SERIAL_NUMBER,
 OPERATION_TYPE,
 PASSFAIL,
 COMMENTS,
 OPERATOR_ID,
 WORKSTATION_NAME,
 TIME_STAMP,
 RECENT_FLAG,
 LINE_ID,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 DISPATCH_OPERATION_ID,
 INTERFACE_FLAG,
 OPERATION_SEQ_NUM,
 OPERATION_DESC)
 VALUES
 (V_ITEM_NUMBER,
 V_SERIAL_NUMBER,
 p_operation,
 'OK',
 '',
 P_USER_ID,
 '-1',
 NOW(),
 'Y',
 V_LINE_ID,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID,
 V_DISPATCH_OPERATION_ID,
 'F',
 V_OPERATION_SEQ,
 V_OPERATION_DESC);

 P_RESULT := 'OK';
 P_MESSAGE := ' ';
 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;

END ; $$;


ALTER FUNCTION sdmes.p_create_eol_history(p_barcode character varying, p_user_id numeric, p_operation character varying, p_insp_operation character varying, p_lang character varying, OUT p_item_number character varying, OUT p_serial_number character varying, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_create_inspection_op(character varying, character varying, character varying, character varying, numeric, numeric, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_inspection_op(p_item_number character varying, p_lang character varying, p_serial_number character varying, p_passfail character varying, p_operation_id numeric, p_user_id numeric, p_op_chk_flag character varying, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_DISPATCH_ID NUMERIC ;
 V_OPERATION_ID NUMERIC ;
 V_OPERATION_TYPE VARCHAR(50) ;
 V_OPERATION_SEQ NUMERIC ;
 V_HISTORY_ID NUMERIC ;
 V_TEST_TYPE NUMERIC ;
 V_INSPECTION_ID NUMERIC ;
 V_TEST_RESULT NUMERIC ;
 V_HIGH_VALUE NUMERIC ;
 V_LOW_VALUE NUMERIC ;
 V_OPERATION_DESC VARCHAR(50) ;
 V_RESULT VARCHAR(50) ;
 V_MESSAGE VARCHAR(200) ;
 V_LINE_ID NUMERIC ;
 V_CHK VARCHAR(50) ;
 V_TXN_DATE TIMESTAMP ;

BEGIN

 V_TXN_DATE := NOW() ;

 SELECT JSN.DISPATCH_ID,
 JDO.DISPATCH_OPERATION_ID,
 JDO.OPERATION_TYPE,
 JDO.OPERATION_SEQ_NUM,
 JDO.OPERATION_DESC,
 JD.LINE_ID
 INTO STRICT V_DISPATCH_ID,
 V_OPERATION_ID,
 V_OPERATION_TYPE,
 V_OPERATION_SEQ,
 V_OPERATION_DESC,
 V_LINE_ID
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OPERATIONS JDO ON JSN.DISPATCH_ID = JDO.DISPATCH_ID
 INNER JOIN JOB_DISPATCHES JD ON JSN.DISPATCH_ID = JD.DISPATCH_ID
 WHERE JSN.ITEM_NUMBER = P_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = P_SERIAL_NUMBER
 AND JDO.OPERATION_ID = P_OPERATION_ID
 AND JDO.DISABLE_DATE IS NULL;

 BEGIN
 SELECT 1, MI.INSPECTION_ID, MI.HIGH_VALUE, MI.LOW_VALUE
 INTO STRICT V_TEST_TYPE, V_INSPECTION_ID, V_HIGH_VALUE, V_LOW_VALUE
 FROM MTL_INSPECTIONS MI
 WHERE MI.OPERATION_ID = P_OPERATION_ID ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 V_TEST_TYPE := 0 ;
 END ;
 IF V_TEST_TYPE = 1 THEN
 BEGIN
 V_TEST_RESULT := TO_NUMBER(P_PASSFAIL);
 EXCEPTION
 WHEN OTHERS THEN
 P_RESULT := 'NG';
 P_MESSAGE := ' NUMBER ONLY' ;
 RETURN;
 END;
-- V_TEST_RESULT := P_PASSFAIL ;
 IF V_TEST_RESULT IS NULL THEN
 P_RESULT := 'NG';
 P_MESSAGE := 'RESISTANCE MUST BE ENTERED.';
 ELSIF P_PASSFAIL BETWEEN V_LOW_VALUE AND V_HIGH_VALUE THEN
 V_CHK := 'OK' ;
 ELSE
 V_CHK := 'NG' ;
 END IF;

 BEGIN
 
 IF P_OP_CHK_FLAG = 'Y' THEN
 
 SELECT P_OP_CHK_RESULT, P_OP_CHK_MESSAGE
 INTO V_RESULT, V_MESSAGE
 FROM P_JOB_OPERATION_CHECK (P_ITEM_NUMBER
 ,P_LANG
 ,P_SERIAL_NUMBER
 ,V_DISPATCH_ID
 ,V_OPERATION_SEQ);

 END IF ; 

 IF V_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_MESSAGE;
 RETURN;
 END IF;

 UPDATE JOB_DISPATCH_OP_HISTORIES 
 SET RECENT_FLAG = 'N',
 LAST_UPDATE_DATE = SYSDATE,
 LAST_UPDATED_BY = P_USER_ID
 WHERE DISPATCH_OPERATION_ID = V_OPERATION_ID
 AND ASSY_ITEM_NUMBER = P_ITEM_NUMBER
 AND SERIAL_NUMBER = P_SERIAL_NUMBER
 AND RECENT_FLAG = 'Y';

 INSERT INTO JOB_DISPATCH_OP_HISTORIES
 (ASSY_ITEM_NUMBER
 ,SERIAL_NUMBER
 ,OPERATION_TYPE
 ,PASSFAIL
 ,COMMENTS
 ,OPERATOR_ID
 ,WORKSTATION_NAME
 ,TIME_STAMP
 ,RECENT_FLAG
 ,LINE_ID
 ,CREATION_DATE
 ,CREATED_BY
 ,LAST_UPDATE_DATE
 ,LAST_UPDATED_BY
 ,DISPATCH_OPERATION_ID
 ,OPERATION_SEQ_NUM
 ,OPERATION_DESC)
 VALUES
 (P_ITEM_NUMBER
 ,P_SERIAL_NUMBER
 ,V_OPERATION_TYPE
 ,V_CHK
 ,''
 ,P_USER_ID
 ,'-1'
 ,V_TXN_DATE
 ,'Y'
 ,V_LINE_ID
 ,NOW()
 ,P_USER_ID
 ,NOW()
 ,P_USER_ID
 ,V_OPERATION_ID
 ,V_OPERATION_SEQ
 ,V_OPERATION_DESC) RETURNING HISTORY_ID INTO V_HISTORY_ID;

 INSERT INTO JOB_INSPECTION_RESULTS
 (RESULT_TYPE
 ,HISTORY_ID
 ,INSPECTION_ID
 ,INSPECTION_VALUE
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATE_DATE
 ,LAST_UPDATED_BY)
 VALUES
 ('FUSER LAMP TEST'
 ,V_HISTORY_ID
 ,V_INSPECTION_ID
 ,P_PASSFAIL
 ,P_USER_ID
 ,NOW()
 ,NOW()
 ,P_USER_ID) ;

 IF V_CHK = 'OK' THEN
 P_RESULT := 'OK' ;
 P_MESSAGE := ' VALUE : '||P_PASSFAIL ;
 ELSIF V_CHK = 'NG' THEN
 P_RESULT := 'NG' ;
 P_MESSAGE := ' VALUE : '||P_PASSFAIL ;
 ELSE 
 P_RESULT := 'NG';
 P_MESSAGE := ' CHECK : '||V_CHK ;
 END IF ;

 END ;

 ELSE
 IF P_PASSFAIL IS NULL THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES'
 ,NULL
 ,P_LANG
 ,'E_PASSFAIL_EMPTY');
 RETURN ;
 ELSIF P_PASSFAIL NOT IN ('PASS', 'FAIL') THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES'
 ,NULL
 ,P_LANG
 ,'E_PASSFAIL_INVALID');
 RETURN ;
 END IF;

 IF P_OP_CHK_FLAG = 'Y' THEN

 SELECT P_OP_CHK_RESULT, P_OP_CHK_MESSAGE
 INTO V_RESULT, V_MESSAGE
 FROM P_JOB_OPERATION_CHECK (P_ITEM_NUMBER
 ,P_LANG
 ,P_SERIAL_NUMBER
 ,V_DISPATCH_ID
 ,V_OPERATION_SEQ);
 
 END IF ;

 IF V_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_MESSAGE;
 RETURN;
 END IF;

 UPDATE JOB_DISPATCH_OP_HISTORIES 
 SET RECENT_FLAG = 'N',
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_USER_ID
 WHERE DISPATCH_OPERATION_ID = V_OPERATION_ID
 AND ASSY_ITEM_NUMBER = P_ITEM_NUMBER
 AND SERIAL_NUMBER = P_SERIAL_NUMBER
 AND RECENT_FLAG = 'Y';

 INSERT INTO JOB_DISPATCH_OP_HISTORIES
 (ASSY_ITEM_NUMBER
 ,SERIAL_NUMBER
 ,OPERATION_TYPE
 ,PASSFAIL
 ,COMMENTS
 ,OPERATOR_ID
 ,WORKSTATION_NAME
 ,TIME_STAMP
 ,RECENT_FLAG
 ,LINE_ID
 ,CREATION_DATE
 ,CREATED_BY
 ,LAST_UPDATE_DATE
 ,LAST_UPDATED_BY
 ,DISPATCH_OPERATION_ID
 ,OPERATION_SEQ_NUM
 ,OPERATION_DESC)
 VALUES
 (P_ITEM_NUMBER
 ,P_SERIAL_NUMBER
 ,V_OPERATION_TYPE
 ,P_PASSFAIL
 ,''
 ,P_USER_ID
 ,'-1'
 ,V_TXN_DATE
 ,'Y'
 ,V_LINE_ID
 ,NOW()
 ,P_USER_ID
 ,NOW()
 ,P_USER_ID
 ,V_OPERATION_ID
 ,V_OPERATION_SEQ
 ,V_OPERATION_DESC);

 P_RESULT := 'OK';
 P_MESSAGE := ' ';

 END IF;

END ; $$;


ALTER FUNCTION sdmes.p_create_inspection_op(p_item_number character varying, p_lang character varying, p_serial_number character varying, p_passfail character varying, p_operation_id numeric, p_user_id numeric, p_op_chk_flag character varying, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_create_job_dispatch(character varying, character varying, character varying, character varying, numeric, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_job_dispatch(p_line_name character varying, p_lang character varying, p_item_number character varying, p_start_date character varying, p_qty numeric, p_user_id numeric, p_mfg_site_id numeric, OUT p_dispatch_id character varying, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_LINE_ID NUMERIC;
 V_ITEM_ID NUMERIC;
 V_DISPATCH_ID NUMERIC;
 V_USER_DEFINED_PROD_DATE VARCHAR;
 V_INTERFACE_ID NUMERIC;

BEGIN

 BEGIN
 SELECT ML.LINE_ID
 INTO STRICT V_LINE_ID
 FROM MTL_LINES ML
 WHERE ML.LINE_NAME = P_LINE_NAME
 AND ML.MFG_SITE_ID = P_MFG_SITE_ID;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES'
 ,NULL
 ,P_LANG
 ,'E_UNREGISTERED_LINE');
 RETURN ; 
 END;

 BEGIN
 SELECT MIM.ITEM_ID, TO_CHAR(COALESCE(MIM.USER_DEFINED_PROD_DATE, now()),'YYYY-MM-DD')
 INTO STRICT V_ITEM_ID, V_USER_DEFINED_PROD_DATE
 FROM MTL_ITEM_MASTERS MIM
 WHERE MIM.ITEM_NUMBER = P_ITEM_NUMBER
 AND MIM.MFG_SITE_ID = P_MFG_SITE_ID;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES'
 ,NULL
 ,P_LANG
 ,'E_UNREGISTERED_ITEM');
 RETURN ; 
 END;

 SELECT NEXTVAL('JOB_DISPATCHES_S') 
 INTO V_DISPATCH_ID ;

 INSERT INTO JOB_DISPATCHES
 (DISPATCH_ID
 ,ITEM_NUMBER
 ,QTY
 ,LINE_ID
 ,START_DATE
 ,CREATION_DATE
 ,CREATED_BY
 ,LAST_UPDATE_DATE
 ,LAST_UPDATED_BY
 ,ITEM_ID
 ,MFG_SITE_ID
 ,FIXED_MANUFACTURING_DATE)
 VALUES
 (V_DISPATCH_ID
 ,P_ITEM_NUMBER
 ,P_QTY
 ,V_LINE_ID
 ,TO_DATE(P_START_DATE, 'YYYY-MM-DD HH24:MI:SS')
 ,NOW()
 ,P_USER_ID
 ,NOW()
 ,P_USER_ID
 ,V_ITEM_ID
 ,P_MFG_SITE_ID
 ,TO_DATE(V_USER_DEFINED_PROD_DATE, 'YYYY-MM-DD HH24:MI:SS'));

 SELECT NEXTVAL('JOB_NO_SEQ') 
 INTO V_INTERFACE_ID ;

 P_RESULT := 'OK';
 P_MESSAGE := ' ';
 P_DISPATCH_ID := V_DISPATCH_ID;

EXCEPTION
 WHEN OTHERS THEN
 P_RESULT := 'NG';
 P_MESSAGE := 'P_CREATE_JOB_DISPATCH'||SQLERRM;
END ; $$;


ALTER FUNCTION sdmes.p_create_job_dispatch(p_line_name character varying, p_lang character varying, p_item_number character varying, p_start_date character varying, p_qty numeric, p_user_id numeric, p_mfg_site_id numeric, OUT p_dispatch_id character varying, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_create_job_dp_operations(numeric, character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_job_dp_operations(p_dispatch_id numeric, p_lang character varying, p_user_id numeric, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_ITEM_NUMBER VARCHAR(50) ;

BEGIN

 UPDATE JOB_DISPATCH_OPERATIONS JDO
 SET OPERATION_SEQ_NUM = (SELECT OPERATION_SEQ FROM MTL_ROUTINGS MR INNER JOIN MTL_ROUTING_DETAILS MRD ON MR.ROUTING_ID = MRD.ROUTING_ID
 INNER JOIN MTL_OPERATIONS MO ON MRD.OPERATION_ID = MO.OPERATION_ID 
 WHERE MRD.DISABLE_DATE IS NULL
 AND JDO.DISABLE_DATE IS NULL
 AND MRD.EFFECTIVE_DATE <= TO_DATE(TO_CHAR(NOW(),'YYYY.MM.DD HH24:MI:SS'),'YYYY.MM.DD')
 AND MO.OPERATION_DESC = JDO.OPERATION_DESC
 AND JDO.ASSY_ITEM_NUMBER = MR.ASSY_ITEM_NUMBER)
 WHERE DISPATCH_ID = P_DISPATCH_ID;

 INSERT INTO JOB_DISPATCH_OPERATIONS
 (DISPATCH_ID
 ,OPERATION_SEQ_NUM
 ,ASSY_ITEM_NUMBER
 ,OPERATION_TYPE
 ,OPERATION_DESC
 ,PART_ITEM_NUMBER
 ,BARCODE_TYPE
 ,BARCODE_INDICATOR
 ,LOCATION
 ,LENGTH
 ,REQUIRED_FLAG
 ,EFFECTIVE_DATE
 ,DISABLE_DATE
 ,CREATION_DATE
 ,CREATED_BY
 ,LAST_UPDATE_DATE
 ,LAST_UPDATED_BY
 ,OPERATION_ID
 ,UNIQUE_CHECK
 ,QUANTITY_PER_ASSEMBLY
 ,USAGE_RATE_OR_AMOUNT
 ,ATTRIBUTE5 )
 SELECT JD.DISPATCH_ID,
 MRD.OPERATION_SEQ,
 MR.ASSY_ITEM_NUMBER,
 MO.OPERATION_TYPE,
 MO.OPERATION_DESC,
 MOP.ITEM_NUMBER,
 MOP.BARCODE_TYPE,
 MOP.BARCODE_INDICATOR,
 MOP.LOCATION,
 MOP.LENGTH,
 MRD.REQUIRED_FLAG,
 MRD.EFFECTIVE_DATE,
 MRD.DISABLE_DATE,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID,
 MO.OPERATION_ID,
 MOP.UNIQUE_CHECK,
 MRD.QUANTITY_PER_ASSEMBLY,
 MRD.USAGE_RATE_OR_AMOUNT,
 MRD.ATTRIBUTE5
 FROM MTL_ROUTINGS MR INNER JOIN MTL_ROUTING_DETAILS MRD ON MR.ROUTING_ID = MRD.ROUTING_ID
 INNER JOIN MTL_OPERATIONS MO ON MRD.OPERATION_ID = MO.OPERATION_ID
 LEFT JOIN MTL_OPERATION_PARTS MOP ON MO.OPERATION_ID = MOP.OPERATION_ID
 INNER JOIN JOB_DISPATCHES JD ON MR.ASSY_ITEM_ID = JD.ITEM_ID
 WHERE MRD.DISABLE_DATE IS NULL
 AND MRD.EFFECTIVE_DATE <= TO_DATE(TO_CHAR(NOW(),'YYYY.MM.DD HH24:MI:SS'),'YYYY.MM.DD')
 AND JD.DISPATCH_ID = P_DISPATCH_ID
 AND NOT EXISTS
 (SELECT 1
 FROM JOB_DISPATCH_OPERATIONS JDO
 WHERE JDO.DISPATCH_ID = P_DISPATCH_ID
 AND MO.OPERATION_DESC = JDO.OPERATION_DESC
 AND JDO.DISABLE_DATE IS NULL);

 SELECT JD.ITEM_NUMBER
 INTO STRICT V_ITEM_NUMBER
 FROM JOB_DISPATCHES JD
 WHERE JD.DISPATCH_ID = P_DISPATCH_ID ;

 P_RESULT := 'OK';
 P_MESSAGE := ' ';

END ; $$;


ALTER FUNCTION sdmes.p_create_job_dp_operations(p_dispatch_id numeric, p_lang character varying, p_user_id numeric, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_create_job_serial_numbers(numeric, character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_job_serial_numbers(p_dispatch_id numeric, p_lang character varying, p_user_id numeric, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_ITEM_ID NUMERIC;
 V_SERIAL_RULE_ID NUMERIC;
 V_SERIAL_RULE_DESC VARCHAR(100);
 V_ITEM_NUMBER VARCHAR(30);
 V_SEPARATOR VARCHAR(10);
 V_JOB_QTY NUMERIC;
 V_SERIAL_QTY NUMERIC;
 V_QTY NUMERIC;
 V_MID_FIX VARCHAR(30);
 V_PREFIX VARCHAR(30);
 V_DATE VARCHAR(30);
 V_DIGITS NUMERIC;
 V_END_NUMBER NUMERIC;
 V_FIXED_MANUFACTURING_DATE DATE;
 V_FIXED_SERIAL_PREFIX VARCHAR(30);
 V_JOB_START_DATE DATE;
 V_PREFIX_YEAR_MONTH_TYPE VARCHAR(30);
 V_SHARED_FLAG VARCHAR(10);
 V_ITEM_END_NUMBER NUMERIC;
 V_RULE_END_NUMBER NUMERIC;
 V_SUFFIX VARCHAR(30);
 V_CHECKSUM VARCHAR(30);
 V_SERVICE_TAG_TLI VARCHAR(30);
 V_SVC_TAG_SERIAL_ID NUMERIC;
 V_PPID_SERIAL_ID NUMERIC;
 V_MC_SERIAL_ID NUMERIC;
 V_SETUP_SERIAL_ID NUMERIC;
 V_DOMESTIC_SERIAL_RULE_ID NUMERIC;
 V_ALIAS VARCHAR(30);
 V_RUSC_PN VARCHAR(30);
 V_CUSTOMER_ITEM VARCHAR(50);
 V_CUS_DIGITS NUMERIC;
 V_MONTH VARCHAR(5);
 V_YEAR VARCHAR(5); 
 V_WEEK VARCHAR(5); 
 V_CUS_DATE_TYPE VARCHAR(30);
 V_MC_SERIAL_PG_TYPE VARCHAR(30);
 V_MFG_ID VARCHAR(30);
 V_SETUP_SERIAL_PG_TYPE VARCHAR(30);
 V_DUMMY NUMERIC;

BEGIN

 SELECT JD.ITEM_ID,
	 JD.ITEM_NUMBER,
	 JD.QTY,
	 JD.FIXED_MANUFACTURING_DATE,
	 JD.FIXED_SERIAL_PREFIX,
	 JD.START_DATE
	 INTO STRICT V_ITEM_ID,
	 V_ITEM_NUMBER,
	 V_JOB_QTY,
	 V_FIXED_MANUFACTURING_DATE,
	 V_FIXED_SERIAL_PREFIX,
	 V_JOB_START_DATE
	 FROM JOB_DISPATCHES JD
	 WHERE JD.DISPATCH_ID = P_DISPATCH_ID;

 SELECT COALESCE(COUNT(*),0)
	 INTO STRICT V_SERIAL_QTY
	 FROM JOB_SERIAL_NUMBERS JSN
	 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID ;

 V_QTY := V_JOB_QTY - V_SERIAL_QTY ;

 SELECT MIM.SERIAL_RULE_ID,
	 COALESCE(MIM.SEPARATOR, '+'),
	 MIM.PREFIX_TYPE,
	 MIM.END_NUMBER,
	 MIM.CUSTOMER_ITEM_NUMBER1,
	 MIM.CUSTOMER_ITEM_NUMBER2,
	 MIM.SVC_TAG_SERIAL_RULE_ID,
	 MIM.PPID_SERIAL_RULE_ID,
	 MIM.SETUP_SERIAL_RULE_ID,
	 MIM.MC_SERIAL_RULE_ID,
	 MIM.DOMESTIC_SERIAL_RULE_ID
	 INTO STRICT V_SERIAL_RULE_ID,
	 V_SEPARATOR,
	 V_PREFIX,
	 V_ITEM_END_NUMBER,
	 V_RUSC_PN,
	 V_CUSTOMER_ITEM,
	 V_SVC_TAG_SERIAL_ID,
	 V_PPID_SERIAL_ID,
	 V_SETUP_SERIAL_ID,
	 V_MC_SERIAL_ID,
	 V_DOMESTIC_SERIAL_RULE_ID
	 FROM MTL_ITEM_MASTERS MIM
	 WHERE MIM.ITEM_ID = V_ITEM_ID;

 IF V_SERIAL_RULE_ID IS NOT NULL THEN

	 SELECT MISR.SERIAL_PG_TYPE,
		 MISR.DIGITS,
		 MISR.PREFIX_YEAR_MONTH_TYPE,
		 MISR.SHARED_FLAG,
		 MISR.END_NUMBER,
		 MISR.SUFFIX,
		 MISR.CHECK_SUM,
		 MISR.FIXED_PREFIX,
		 MISR.FIXED_PREFIX
		 INTO STRICT V_SERIAL_RULE_DESC,
		 V_DIGITS,
		 V_PREFIX_YEAR_MONTH_TYPE,
		 V_SHARED_FLAG,
		 V_RULE_END_NUMBER,
		 V_SUFFIX,
		 V_CHECKSUM,
		 V_SERVICE_TAG_TLI,
		 V_ALIAS
		 FROM MTL_ITEM_SERIAL_RULES MISR
		 WHERE MISR.SERIAL_RULE_ID = V_SERIAL_RULE_ID;

	 V_DATE := TO_CHAR(COALESCE(V_FIXED_MANUFACTURING_DATE, V_JOB_START_DATE),
	 V_PREFIX_YEAR_MONTH_TYPE);

	 IF V_SHARED_FLAG = 'Y' THEN
	 	V_END_NUMBER := V_RULE_END_NUMBER;
	 ELSE
	 	V_END_NUMBER := V_ITEM_END_NUMBER;
	 END IF;
	
	P_RESULT := V_SERIAL_RULE_DESC;

	 IF V_SERIAL_RULE_DESC = 'NORMAL_SERIAL' THEN
		 SELECT P_CDS_RESULT, P_CDS_MESSAGE
		 INTO P_RESULT, P_MESSAGE
		 FROM P_CREATE_DOMESTIC_SERIAL(P_DISPATCH_ID,
		 V_ITEM_NUMBER,
		 V_SEPARATOR,
		 V_QTY,
		 V_PREFIX,
		 V_DATE,
		 V_END_NUMBER,
		 V_DIGITS,
		 V_SUFFIX,
		 V_CHECKSUM,
		 P_LANG,
		 P_USER_ID) ;
	 END IF ;

 	IF P_RESULT = 'OK' THEN
 		SELECT F_GET_END_NUMBER(P_DISPATCH_ID, V_END_NUMBER + V_QTY) INTO V_END_NUMBER ;
 		IF V_SHARED_FLAG = 'Y' THEN
			 UPDATE MTL_ITEM_SERIAL_RULES 
			 SET END_NUMBER = V_END_NUMBER,
			 LAST_UPDATED_BY = P_USER_ID,
			 LAST_UPDATE_DATE = NOW()
			 WHERE SERIAL_RULE_ID = V_SERIAL_RULE_ID;
 		ELSE
			 UPDATE MTL_ITEM_MASTERS 
			 SET END_NUMBER = V_END_NUMBER,
			 LAST_UPDATED_BY = 1,
			 LAST_UPDATE_DATE = NOW()
			 WHERE ITEM_NUMBER = V_ITEM_NUMBER;
		 END IF;
 	END IF;

 ELSE 
	 P_RESULT := 'NG';
	 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES',
		 NULL,
		 P_LANG,
		 'E_UNREGISTERED_SERIAL_INFO');
 END IF;

EXCEPTION
 WHEN NO_DATA_FOUND THEN
	 P_RESULT := 'NG';
	 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES',
	 NULL,
	 P_LANG,
	 'E_UNREGISTERED_ITEM');

END ; $$;


ALTER FUNCTION sdmes.p_create_job_serial_numbers(p_dispatch_id numeric, p_lang character varying, p_user_id numeric, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_create_op_history(character varying, character varying, character varying, numeric, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_op_history(p_barcode character varying, p_lang character varying, p_operation character varying, p_user_id numeric, p_operation_chk character varying, p_previous_operation_chk character varying, p_work_station character varying, p_comments character varying, OUT p_item_number character varying, OUT p_serial_number character varying, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_RESULT VARCHAR(10);
 V_MESSAGE VARCHAR(200);
 V_ITEM_NUMBER VARCHAR(50);
 V_SERIAL_NUMBER VARCHAR(50);
 V_OPERATION_SEQ NUMERIC;
 V_DISPATCH_ID NUMERIC;
 V_DISPATCH_OPERATION_ID NUMERIC;
 V_OPERATION_DESC VARCHAR(200);
 V_LINE_ID NUMERIC;
 DUMMY NUMERIC;
 V_RECENT_FLAG VARCHAR(10);
 V_HISTORY_ID NUMERIC;

BEGIN

 SELECT P_OUT_ITEM_NUMBER, P_OUT_SERIAL_NUMBER, P_OUT_RESULT, P_OUT_MESSAGE
 INTO V_ITEM_NUMBER, V_SERIAL_NUMBER, V_RESULT, V_MESSAGE
 FROM P_ASSY_BARCODE_CHECK(P_BARCODE,
 P_LANG);

 IF V_RESULT = 'NG' THEN
 P_RESULT := V_RESULT;
 P_MESSAGE := V_MESSAGE;
 RETURN ;
 END IF;

 SELECT JSN.DISPATCH_ID, JD.LINE_ID
 INTO STRICT V_DISPATCH_ID, V_LINE_ID
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCHES JD ON JSN.DISPATCH_ID = JD.DISPATCH_ID
 WHERE JSN.ITEM_NUMBER = V_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = V_SERIAL_NUMBER ;

 IF P_OPERATION_CHK = 'Y' THEN
 
 BEGIN
 SELECT JDO.OPERATION_SEQ_NUM,
 JSN.DISPATCH_ID,
 JDO.DISPATCH_OPERATION_ID,
 JDO.OPERATION_DESC
 INTO STRICT V_OPERATION_SEQ,
 V_DISPATCH_ID,
 V_DISPATCH_OPERATION_ID,
 V_OPERATION_DESC
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OPERATIONS JDO ON JSN.DISPATCH_ID = JDO.DISPATCH_ID
 WHERE JSN.ITEM_NUMBER = V_ITEM_NUMBER
 AND JDO.DISABLE_DATE IS NULL
 AND JSN.SERIAL_NUMBER = V_SERIAL_NUMBER
 AND UPPER(JDO.OPERATION_TYPE) = UPPER(P_OPERATION);
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_NOT_EXIST_OPERATION');
 RETURN ; 
 END;

 END IF ;

 IF P_PREVIOUS_OPERATION_CHK = 'Y' THEN

 SELECT P_OP_CHK_RESULT, P_OP_CHK_MESSAGE
 INTO V_RESULT, V_MESSAGE
 FROM P_JOB_OPERATION_CHECK (V_ITEM_NUMBER,
 P_LANG,
 V_SERIAL_NUMBER,
 V_DISPATCH_ID,
 V_OPERATION_SEQ);

 IF V_RESULT = 'NG' THEN
 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;
 P_RESULT := V_RESULT;
 P_MESSAGE := V_MESSAGE;
 RETURN ;
 END IF;

 END IF ;
 
 BEGIN
 SELECT HISTORY_ID
 INTO STRICT V_HISTORY_ID
 FROM JOB_DISPATCH_OP_HISTORIES 
 WHERE DISPATCH_OPERATION_ID = V_DISPATCH_OPERATION_ID
 AND ASSY_ITEM_NUMBER = V_ITEM_NUMBER
 AND SERIAL_NUMBER = V_SERIAL_NUMBER
 AND RECENT_FLAG = 'Y'
 LIMIT 1 ;
 
 UPDATE JOB_DISPATCH_OP_HISTORIES 
 SET RECENT_FLAG = 'N',
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_USER_ID
 WHERE DISPATCH_OPERATION_ID = V_DISPATCH_OPERATION_ID
 AND ASSY_ITEM_NUMBER = V_ITEM_NUMBER
 AND SERIAL_NUMBER = V_SERIAL_NUMBER
 AND RECENT_FLAG = 'Y';
 
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 END ;

 INSERT INTO JOB_DISPATCH_OP_HISTORIES
 (ASSY_ITEM_NUMBER,
 SERIAL_NUMBER,
 OPERATION_TYPE,
 PASSFAIL,
 COMMENTS,
 OPERATOR_ID,
 WORKSTATION_NAME,
 TIME_STAMP,
 RECENT_FLAG,
 LINE_ID,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 DISPATCH_OPERATION_ID,
 OPERATION_SEQ_NUM,
 OPERATION_DESC)
 VALUES
 (V_ITEM_NUMBER,
 V_SERIAL_NUMBER,
 P_OPERATION,
 'OK',
 P_COMMENTS,
 P_USER_ID,
 COALESCE(P_WORK_STATION, '-1'),
 NOW(),
 'Y',
 V_LINE_ID,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID,
 V_DISPATCH_OPERATION_ID,
 V_OPERATION_SEQ,
 V_OPERATION_DESC
 ) RETURNING HISTORY_ID INTO V_HISTORY_ID;


 P_ITEM_NUMBER := V_ITEM_NUMBER;
 P_SERIAL_NUMBER := V_SERIAL_NUMBER;
 P_RESULT := 'OK';
 P_MESSAGE := '';

END ; $$;


ALTER FUNCTION sdmes.p_create_op_history(p_barcode character varying, p_lang character varying, p_operation character varying, p_user_id numeric, p_operation_chk character varying, p_previous_operation_chk character varying, p_work_station character varying, p_comments character varying, OUT p_item_number character varying, OUT p_serial_number character varying, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_create_repair_operation_ins(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_repair_operation_ins(p_item_number character varying, p_repair_history_id character varying, p_qa_history_id character varying, p_lang character varying, p_defect_type character varying, p_degree character varying, p_fault character varying, p_serial_number character varying, p_defect_code character varying, p_repair_code character varying, p_repair_item character varying, p_item_barcode character varying, p_subsystem_code character varying, p_pagecount character varying, p_comments character varying, p_inspection character varying, p_user_id numeric, OUT p_repair_result character varying, OUT p_repair_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_HISTORY_ID NUMERIC;
 V_QA_HISTORY_ID NUMERIC;
 V_OPERATION_ID NUMERIC;
 V_DUMMY NUMERIC;
 V_REPAIR_TYPE VARCHAR(100);
 V_RESULT VARCHAR(50);
 V_MESSAGE VARCHAR(200);
 V_REPAIR_ITEM VARCHAR(50);

BEGIN

 IF P_REPAIR_HISTORY_ID IS NULL THEN
 V_HISTORY_ID := -1;
 ELSE
 V_HISTORY_ID := CAST(P_REPAIR_HISTORY_ID AS NUMERIC);
 END IF;

 IF P_QA_HISTORY_ID = '-1' OR P_QA_HISTORY_ID IS NULL THEN
 V_QA_HISTORY_ID := -1;
 V_REPAIR_TYPE := 'INLINE INSPECTION';
 ELSE
 V_QA_HISTORY_ID := CAST(P_QA_HISTORY_ID AS NUMERIC);
 V_REPAIR_TYPE := 'QA INSPECTION';
 END IF;

 IF P_INSPECTION IS NULL THEN
 P_REPAIR_RESULT := 'NG';
 P_REPAIR_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_INSPECTION_EMPTY');
 RETURN ; 
 END IF;

 IF P_ITEM_NUMBER IS NULL OR P_SERIAL_NUMBER IS NULL THEN
 P_REPAIR_RESULT := 'NG';
 P_REPAIR_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_SERIAL_EMPTY');
 RETURN ; 
 END IF;

 IF P_DEFECT_CODE IS NULL THEN
 P_REPAIR_RESULT := 'NG';
 P_REPAIR_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_DEFECT_CODE_EMPTY');
 RETURN ; 
 END IF;

 IF P_REPAIR_CODE IS NULL THEN
 IF P_REPAIR_ITEM IS NOT NULL THEN
 P_REPAIR_RESULT := 'NG';
 P_REPAIR_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_REPAIR_CODE_EMPTY');
 RETURN ; 
 END IF;
 END IF;

 IF P_REPAIR_ITEM IS NOT NULL THEN

 BEGIN
 SELECT JDO.OPERATION_ID
 INTO STRICT V_OPERATION_ID
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OPERATIONS JDO ON JSN.DISPATCH_ID = JDO.DISPATCH_ID
 WHERE JSN.SERIAL_NUMBER = P_SERIAL_NUMBER
 AND JSN.ITEM_NUMBER = P_ITEM_NUMBER
 AND JDO.PART_ITEM_NUMBER = P_REPAIR_ITEM
 AND JDO.DISABLE_DATE IS NULL;

 IF P_ITEM_BARCODE IS NULL THEN
 P_REPAIR_RESULT := 'NG';
 P_REPAIR_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_ITEM_BARCODE_EMPTY');
 RETURN ; 
 END IF;

 SELECT P_RESULT, P_MESSAGE
 INTO V_RESULT, V_MESSAGE
 FROM P_CREATE_TRACE_OP_HISTORY(P_ITEM_NUMBER,
 P_LANG,
 P_SERIAL_NUMBER,
 P_ITEM_BARCODE,
 V_OPERATION_ID,
 P_USER_ID) ;

 IF V_RESULT = 'NG' THEN
 P_REPAIR_RESULT := 'NG';
 P_REPAIR_MESSAGE := V_MESSAGE;
 RETURN ;
 END IF;

 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL;
 END;

 END IF;

 BEGIN

 SELECT 1
 INTO STRICT V_DUMMY
 FROM JOB_DISPATCH_OP_HISTORIES
 WHERE HISTORY_ID = V_HISTORY_ID;

 UPDATE JOB_DISPATCH_OP_HISTORIES
 SET COMMENTS = TRIM(P_COMMENTS),
 LAST_UPDATED_BY = P_USER_ID,
 LAST_UPDATE_DATE = NOW(),
 OPERATION_DESC = V_REPAIR_TYPE
 WHERE HISTORY_ID = V_HISTORY_ID;

 UPDATE JOB_DISPATCH_OP_HIS_DETAILS
 SET RESULT_VALUE = P_DEFECT_CODE,
 ATTRIBUTE2 = P_DEGREE,
 ATTRIBUTE3 = P_DEFECT_TYPE,
 LAST_UPDATED_BY = P_USER_ID,
 LAST_UPDATE_DATE = NOW()
 WHERE HISTORY_ID = V_HISTORY_ID
 AND RESULT_TYPE = 'DEFECT CODE';

 UPDATE JOB_DISPATCH_OP_HIS_DETAILS
 SET RESULT_VALUE = P_REPAIR_CODE,
 PART_ITEM_NUMBER = P_REPAIR_ITEM,
 PART_SERIAL_NUMBER = P_ITEM_BARCODE,
 ATTRIBUTE1 = P_SUBSYSTEM_CODE,
 ATTRIBUTE2 = P_FAULT,
 ATTRIBUTE3 = P_PAGECOUNT,
 LAST_UPDATED_BY = P_USER_ID,
 LAST_UPDATE_DATE = NOW()
 WHERE HISTORY_ID = V_HISTORY_ID
 AND RESULT_TYPE = 'REPAIR CODE';

 P_REPAIR_RESULT := 'OK';
 P_REPAIR_MESSAGE := P_REPAIR_HISTORY_ID || ' UPDATE';

 EXCEPTION
 WHEN NO_DATA_FOUND THEN

 INSERT INTO JOB_DISPATCH_OP_HISTORIES
 (ASSY_ITEM_NUMBER,
 SERIAL_NUMBER,
 OPERATION_TYPE,
 PASSFAIL,
 COMMENTS,
 OPERATOR_ID,
 WORKSTATION_NAME,
 TIME_STAMP,
 RECENT_FLAG,
 LINE_ID,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 DISPATCH_OPERATION_ID,
 OPERATION_SEQ_NUM,
 OPERATION_DESC,
 INTERFACE_FLAG )
 VALUES
 (P_ITEM_NUMBER,
 P_SERIAL_NUMBER,
 'REPAIR',
 'OK',
 TRIM(P_COMMENTS),
 P_USER_ID,
 '-1',
 NOW(),
 'Y',
 -1,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID,
 NULL,
 NULL,
 V_REPAIR_TYPE,
 'F') RETURNING HISTORY_ID INTO V_HISTORY_ID ;

 INSERT INTO JOB_DISPATCH_OP_HIS_DETAILS
 (HISTORY_ID,
 RESULT_TYPE,
 RESULT_VALUE,
 PART_ITEM_NUMBER,
 PART_SERIAL_NUMBER,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 COMMENTS,
 ATTRIBUTE1,
 ATTRIBUTE2,
 ATTRIBUTE3)
 VALUES
 (V_HISTORY_ID,
 'DEFECT CODE',
 P_DEFECT_CODE,
 NULL,
 NULL,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID,
 NULL,
 P_INSPECTION,
 P_DEGREE,
 P_DEFECT_TYPE);

 INSERT INTO JOB_DISPATCH_OP_HIS_DETAILS
 (HISTORY_ID,
 RESULT_TYPE,
 RESULT_VALUE,
 PART_ITEM_NUMBER,
 PART_SERIAL_NUMBER,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 COMMENTS,
 ATTRIBUTE1,
 ATTRIBUTE2,
 ATTRIBUTE3)
 VALUES
 (V_HISTORY_ID,
 'REPAIR CODE',
 P_REPAIR_CODE,
 P_REPAIR_ITEM,
 P_ITEM_BARCODE,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID,
 NULL,
 P_SUBSYSTEM_CODE,
 P_FAULT,
 P_PAGECOUNT);

 P_REPAIR_RESULT := 'OK';
 P_REPAIR_MESSAGE := ' ';

 IF V_QA_HISTORY_ID <> -1 THEN
 BEGIN
 UPDATE OQC_TRANSACTIONS
 SET DEFECT_GRADE = P_DEGREE, DEFECT_CODE = P_DEFECT_CODE
 WHERE TRANSACTION_ID = V_QA_HISTORY_ID;

 END;
 END IF;

 END;

END ; $$;


ALTER FUNCTION sdmes.p_create_repair_operation_ins(p_item_number character varying, p_repair_history_id character varying, p_qa_history_id character varying, p_lang character varying, p_defect_type character varying, p_degree character varying, p_fault character varying, p_serial_number character varying, p_defect_code character varying, p_repair_code character varying, p_repair_item character varying, p_item_barcode character varying, p_subsystem_code character varying, p_pagecount character varying, p_comments character varying, p_inspection character varying, p_user_id numeric, OUT p_repair_result character varying, OUT p_repair_message character varying) OWNER TO mesuser;

--
-- Name: p_create_serialnumbers(numeric, character varying, numeric, character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_serialnumbers(p_dispatch_id numeric, p_lang character varying, p_user_id numeric, p_fixed_prefix character varying, p_fixed_prod character varying, OUT p_cs_result character varying, OUT p_cs_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_ITEM_NUMBER VARCHAR(50);
 V_START_DATE DATE;
 V_JOB_QTY NUMERIC;
 V_SERIAL_QTY NUMERIC;
 V_FIXED_MANUFACTURING_DATE DATE;
 V_MIN_SERIAL VARCHAR(50);
 V_MAX_SERIAL VARCHAR(50);

 V_SHARED_FLAG VARCHAR(1) ;
 V_END_NUMBER INT ;


BEGIN

 SELECT JD.ITEM_NUMBER,
 JD.START_DATE,
 JD.QTY,
 JD.FIXED_MANUFACTURING_DATE
 INTO STRICT V_ITEM_NUMBER,
 V_START_DATE,
 V_JOB_QTY,
 V_FIXED_MANUFACTURING_DATE
 FROM JOB_DISPATCHES JD
 WHERE JD.DISPATCH_ID = P_DISPATCH_ID;

 SELECT COALESCE(COUNT(*), 0)
 INTO V_SERIAL_QTY
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID ;

 IF V_SERIAL_QTY < V_JOB_QTY THEN

 UPDATE JOB_DISPATCHES 
 SET FIXED_MANUFACTURING_DATE = COALESCE(TO_DATE(P_FIXED_PROD,'RRRR-MM-DD'),
 FIXED_MANUFACTURING_DATE),
 FIXED_SERIAL_PREFIX = COALESCE(P_FIXED_PREFIX,
 FIXED_SERIAL_PREFIX)
 WHERE DISPATCH_ID = P_DISPATCH_ID;

 UPDATE MTL_ITEM_MASTERS 
 SET USER_DEFINED_PROD_DATE = COALESCE(TO_DATE(P_FIXED_PROD,'RRRR-MM-DD'),
 V_FIXED_MANUFACTURING_DATE)
 WHERE ITEM_NUMBER = V_ITEM_NUMBER; 

 SELECT P_RESULT, P_MESSAGE
 INTO P_CS_RESULT, P_CS_MESSAGE
 FROM P_CREATE_JOB_SERIAL_NUMBERS(P_DISPATCH_ID,
 P_LANG,
 P_USER_ID) ;

 IF P_CS_RESULT = 'OK' THEN
 
 SELECT MIN(JSN.SERIAL_NUMBER), MAX(JSN.SERIAL_NUMBER)
 INTO STRICT V_MIN_SERIAL, V_MAX_SERIAL
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.DISPATCH_ID = P_DISPATCH_ID ;

 SELECT MISR.SHARED_FLAG, CASE WHEN MISR.SHARED_FLAG = 'Y' THEN MISR.END_NUMBER ELSE MIM.END_NUMBER END END_NUMBER
 INTO STRICT V_SHARED_FLAG, V_END_NUMBER
 FROM MTL_ITEM_MASTERS MIM INNER JOIN MTL_ITEM_SERIAL_RULES MISR ON MIM.SERIAL_RULE_ID = MISR.SERIAL_RULE_ID
 WHERE MIM.ITEM_NUMBER = V_ITEM_NUMBER ;

 
 END IF ;

 ELSE
 P_CS_RESULT := 'NG';
 P_CS_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES',
 NULL,
 P_LANG,
 'E_SERIAL_ALREADY_EXISTED');
 
 END IF ;

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_CS_RESULT := 'NG';
 P_CS_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCHES'
 ,NULL
 ,P_LANG
 ,'E_UNREGISTERED_JOB');
END ; $$;


ALTER FUNCTION sdmes.p_create_serialnumbers(p_dispatch_id numeric, p_lang character varying, p_user_id numeric, p_fixed_prefix character varying, p_fixed_prod character varying, OUT p_cs_result character varying, OUT p_cs_message character varying) OWNER TO mesuser;

--
-- Name: p_create_trace_op_history(character varying, character varying, character varying, character varying, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_trace_op_history(p_item_number character varying, p_lang character varying, p_serial_number character varying, p_part_barcode character varying, p_operation_id numeric, p_user_id numeric, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_DISPATCH_ID NUMERIC;
 V_PART_NUMBER VARCHAR(50);
 V_BARCODE_TYPE VARCHAR(10);
 V_BARCODE_INDICATOR VARCHAR(50);
 V_LOCATION INT;
 V_LENGTH INT;
 V_OPERATION_ID NUMERIC;
 V_OPERATION_SEQ NUMERIC;
 V_ITEM_NUMBER VARCHAR(50);
 V_PART_SERIAL VARCHAR(50);
 V_OPERATION_TYPE VARCHAR(30);
 V_OPERATION_DESC VARCHAR(200);
 V_HISTORY_ID NUMERIC;
 V_UNIQUE_CHECK VARCHAR(10);
 V_LINE_ID NUMERIC;
 V_DUMMY NUMERIC;
 V_RESULT VARCHAR(10);
 V_MESSAGE VARCHAR(200);
 V_COMMENTS VARCHAR(200);
 V_PASSFAIL VARCHAR(10) ;
 V_PART_OPERATION_DESC VARCHAR(30) ;

BEGIN

 BEGIN
 SELECT JSN.DISPATCH_ID, JD.LINE_ID
 INTO STRICT V_DISPATCH_ID, V_LINE_ID
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCHES JD ON JSN.DISPATCH_ID = JD.DISPATCH_ID
 WHERE JSN.ITEM_NUMBER = P_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = P_SERIAL_NUMBER;

 SELECT JDO.PART_ITEM_NUMBER,
 JDO.BARCODE_TYPE,
 JDO.BARCODE_INDICATOR,
 JDO.LOCATION,
 JDO.LENGTH,
 JDO.DISPATCH_OPERATION_ID,
 JDO.OPERATION_TYPE,
 JDO.OPERATION_DESC,
 JDO.OPERATION_SEQ_NUM,
 JDO.UNIQUE_CHECK
 INTO STRICT V_PART_NUMBER,
 V_BARCODE_TYPE,
 V_BARCODE_INDICATOR,
 V_LOCATION,
 V_LENGTH,
 V_OPERATION_ID,
 V_OPERATION_TYPE,
 V_OPERATION_DESC,
 V_OPERATION_SEQ,
 V_UNIQUE_CHECK
 FROM JOB_DISPATCH_OPERATIONS JDO
 WHERE JDO.DISPATCH_ID = V_DISPATCH_ID
 AND JDO.OPERATION_ID = P_OPERATION_ID
 AND JDO.DISABLE_DATE IS NULL;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_NOT_EXIST_OPERATION');
 RETURN ; 
 END;

 BEGIN

	 SELECT 1
	 INTO STRICT V_DUMMY
	 FROM MTL_HOLD_PART_SERIALS MHPS
	 WHERE MHPS.BARCODE_VALUE = P_PART_BARCODE
	 AND MHPS.EFFECTIVE_DATE < NOW()
	 AND (MHPS.DISABLE_DATE IS NULL OR MHPS.DISABLE_DATE > NOW())
	 AND MHPS.ISSUE_FLAG = 'N'
	 LIMIT 1 ;
	
	 P_RESULT := 'NG' ;
	 P_MESSAGE := 'DEFECT PART LOT : '||P_PART_BARCODE ;
	 RETURN ;

 EXCEPTION
 	WHEN NO_DATA_FOUND THEN
 	NULL ;
 END ;


 IF V_UNIQUE_CHECK = 'Y' THEN
	 BEGIN
		 SELECT 1
		 INTO STRICT V_DUMMY
		 FROM JOB_DISPATCH_OP_HISTORIES A INNER JOIN JOB_DISPATCH_OP_HIS_DETAILS B ON A.HISTORY_ID = B.HISTORY_ID
		 WHERE A.RECENT_FLAG = 'Y'
		 AND B.RESULT_VALUE = P_PART_BARCODE
		 LIMIT 1;

		 P_RESULT := 'NG';
		 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
		 NULL,
		 P_LANG,
		 'E_ALREADY_ASSEMBLED');
 		RETURN ; 
 	EXCEPTION
		 WHEN NO_DATA_FOUND THEN
		 NULL;
	 END;
 END IF;

 SELECT P_OP_CHK_RESULT, P_OP_CHK_MESSAGE
 INTO V_RESULT, V_MESSAGE
 FROM P_JOB_OPERATION_CHECK (P_ITEM_NUMBER,
 P_LANG,
 P_SERIAL_NUMBER,
 V_DISPATCH_ID,
 V_OPERATION_SEQ);

 IF V_RESULT = 'NG' THEN
	 P_RESULT := V_RESULT;
	 P_MESSAGE := V_MESSAGE;
	 RETURN ;
 END IF;

 IF V_BARCODE_TYPE = 'A' THEN

 	IF V_BARCODE_INDICATOR IS NOT NULL THEN

		 SELECT SUBSTRING(P_PART_BARCODE, V_LOCATION, V_LENGTH)
		 INTO V_ITEM_NUMBER ;

		 IF V_ITEM_NUMBER = V_BARCODE_INDICATOR THEN
			 V_PART_SERIAL := SUBSTR(P_PART_BARCODE, V_LENGTH + 2);
		 ELSE
 			P_RESULT := 'NG';
			P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 			NULL,
			 P_LANG,
			 'E_TRACE_BARCODE_ERROR');
			 RETURN ;
 		END IF;

 	ELSE

 		V_PART_SERIAL := P_PART_BARCODE;

 	END IF;

 ELSIF V_BARCODE_TYPE = 'B' THEN

 	V_ITEM_NUMBER := SUBSTR(P_PART_BARCODE, V_LOCATION, 1);

 	IF V_BARCODE_INDICATOR LIKE '%'||V_ITEM_NUMBER||'%' AND LENGTH(P_PART_BARCODE) = V_LENGTH THEN
 		V_PART_SERIAL := P_PART_BARCODE;
 	ELSE
 		P_RESULT := 'NG';
		 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
		 NULL,
		 P_LANG,
		 'E_TRACE_BARCODE_ERROR');
		 RETURN ; 
 	END IF ;

 END IF;

 SELECT P_ASSY_RESULT, P_ASSY_MESSAGE
 INTO V_RESULT, V_MESSAGE
 FROM P_PART_ASSEMBLY_CHECK(V_PART_NUMBER,
 P_PART_BARCODE,
 P_LANG);

 IF V_RESULT = 'NG' THEN
 P_RESULT := V_RESULT;
 P_MESSAGE := V_MESSAGE;
 RETURN ;
 END IF;

 UPDATE JOB_DISPATCH_OP_HISTORIES 
 SET RECENT_FLAG = 'N',
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_USER_ID
 WHERE DISPATCH_OPERATION_ID = V_OPERATION_ID
 AND ASSY_ITEM_NUMBER = P_ITEM_NUMBER
 AND SERIAL_NUMBER = P_SERIAL_NUMBER
 AND RECENT_FLAG = 'Y';

 UPDATE JOB_DISPATCH_OP_HISTORIES JDOH
 SET RECENT_FLAG = 'N',
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_USER_ID
 WHERE HISTORY_ID IN (
 SELECT JDOH1.HISTORY_ID
 FROM JOB_DISPATCH_OP_HISTORIES JDOH1 INNER JOIN JOB_DISPATCH_OP_HIS_DETAILS JDOHD1 ON JDOH1.HISTORY_ID = JDOHD1.HISTORY_ID
 WHERE JDOH1.ASSY_ITEM_NUMBER = P_ITEM_NUMBER
 AND JDOH1.SERIAL_NUMBER = P_SERIAL_NUMBER
 AND JDOH1.RECENT_FLAG = 'Y'
 AND JDOHD1.PART_ITEM_NUMBER||'' = V_PART_NUMBER ) ;

 INSERT INTO JOB_DISPATCH_OP_HISTORIES
 (ASSY_ITEM_NUMBER,
 SERIAL_NUMBER,
 OPERATION_TYPE,
 OPERATION_DESC,
 PASSFAIL,
 COMMENTS,
 OPERATOR_ID,
 WORKSTATION_NAME,
 TIME_STAMP,
 RECENT_FLAG,
 LINE_ID,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 DISPATCH_OPERATION_ID,
 OPERATION_SEQ_NUM)
 VALUES
 (P_ITEM_NUMBER,
 P_SERIAL_NUMBER,
 V_OPERATION_TYPE,
 V_OPERATION_DESC,
 'OK',
 V_COMMENTS,
 P_USER_ID,
 '-1',
 NOW(),
 'Y',
 V_LINE_ID,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID,
 V_OPERATION_ID,
 V_OPERATION_SEQ) RETURNING HISTORY_ID INTO V_HISTORY_ID ;

 INSERT INTO JOB_DISPATCH_OP_HIS_DETAILS
 (HISTORY_ID,
 RESULT_TYPE,
 RESULT_VALUE,
 PART_ITEM_NUMBER,
 PART_SERIAL_NUMBER,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY)
 VALUES
 (V_HISTORY_ID,
 'PART SCAN',
 P_PART_BARCODE,
 V_PART_NUMBER,
 V_PART_SERIAL,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID);

 P_RESULT := 'OK';
 P_MESSAGE := P_ITEM_NUMBER||'+'||P_SERIAL_NUMBER ;

END ; $$;


ALTER FUNCTION sdmes.p_create_trace_op_history(p_item_number character varying, p_lang character varying, p_serial_number character varying, p_part_barcode character varying, p_operation_id numeric, p_user_id numeric, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_create_user_operation(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_create_user_operation(p_user_id numeric, p_array_seq character varying, p_operation_id character varying, p_item_number character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 V_VALUE NUMERIC ;
BEGIN

 SELECT 1
 INTO STRICT V_VALUE
 FROM MES_USER_PROFILES MUP
 WHERE MUP.MES_USER_ID = P_USER_ID
 AND MUP.PROFILE_VALUE2 = P_ITEM_NUMBER
 AND MUP.PROFILE_VALUE = P_OPERATION_ID ;

 UPDATE MES_USER_PROFILES 
 SET PROFILE_VALUE3 = ''
 ,LAST_UPDATED_BY = P_USER_ID
 ,LAST_UPDATE_DATE = NOW()
 ,RECENT_FLAG = 'N'
 WHERE MES_USER_ID = P_USER_ID
 AND PROFILE_VALUE3 >= P_ARRAY_SEQ
 AND PROFILE_VALUE2 = P_ITEM_NUMBER ;

 UPDATE MES_USER_PROFILES 
 SET LAST_UPDATED_BY = P_USER_ID
 ,LAST_UPDATE_DATE = NOW()
 ,RECENT_FLAG = 'N'
 WHERE MES_USER_ID = P_USER_ID
 AND PROFILE_VALUE2 <> P_ITEM_NUMBER ;

 UPDATE MES_USER_PROFILES 
 SET PROFILE_VALUE3 = P_ARRAY_SEQ
 ,LAST_UPDATED_BY = P_USER_ID
 ,LAST_UPDATE_DATE = NOW()
 ,RECENT_FLAG = 'Y'
 WHERE MES_USER_ID = P_USER_ID
 AND PROFILE_VALUE = P_OPERATION_ID
 AND PROFILE_VALUE2 = P_ITEM_NUMBER ;
 
 RETURN 'OK' ;

 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 INSERT INTO MES_USER_PROFILES (PROFILE_NAME
 ,PROFILE_VALUE
 ,PROFILE_VALUE2
 ,PROFILE_VALUE3
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY 
 ,LAST_UPDATE_DATE 
 ,MES_USER_ID
 ,RECENT_FLAG)
 VALUES ('OPERATION_ID'
 ,P_OPERATION_ID
 ,P_ITEM_NUMBER
 ,P_ARRAY_SEQ
 ,P_USER_ID
 ,NOW()
 ,P_USER_ID
 ,NOW()
 ,P_USER_ID
 ,'Y') ;

 RETURN 'OK' ;
 WHEN OTHERS THEN
 RETURN 'NG'||SQLERRM ;
END ; $$;


ALTER FUNCTION sdmes.p_create_user_operation(p_user_id numeric, p_array_seq character varying, p_operation_id character varying, p_item_number character varying) OWNER TO mesuser;

--
-- Name: p_delete_operation_parts(numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_delete_operation_parts(p_operation_id numeric, p_item_id numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN

 DELETE FROM MTL_OPERATION_PARTS
 WHERE OPERATION_ID = P_OPERATION_ID
 AND COALESCE(ITEM_ID, 0) = COALESCE(P_ITEM_ID, 0);

 RETURN 'OK' ;
EXCEPTION
 WHEN OTHERS THEN
 RETURN 'NG'||SQLERRM ;
END ; $$;


ALTER FUNCTION sdmes.p_delete_operation_parts(p_operation_id numeric, p_item_id numeric) OWNER TO mesuser;

--
-- Name: p_delete_operations(integer); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_delete_operations(p_operation_id integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN

 DELETE FROM MTL_OPERATION_PARTS WHERE OPERATION_ID = P_OPERATION_ID;

 DELETE FROM MTL_OPERATIONS WHERE OPERATION_ID = P_OPERATION_ID;

 RETURN 'OK' ;
EXCEPTION
 WHEN OTHERS THEN
 RETURN 'NG'||SQLERRM ;
END ; $$;


ALTER FUNCTION sdmes.p_delete_operations(p_operation_id integer) OWNER TO mesuser;

--
-- Name: p_delete_routing_details(numeric, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_delete_routing_details(p_routing_id numeric, p_operation_id numeric, p_operation_seq numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN

 DELETE FROM MTL_ROUTING_DETAILS
 WHERE ROUTING_ID = P_ROUTING_ID
 AND OPERATION_ID = COALESCE(P_OPERATION_ID, OPERATION_ID)
 AND COALESCE(OPERATION_SEQ, 0) =
 COALESCE(P_OPERATION_SEQ, COALESCE(OPERATION_SEQ, 0));

 RETURN 'OK' ;
EXCEPTION
 WHEN OTHERS THEN
 RETURN 'NG'||SQLERRM ;
END ; $$;


ALTER FUNCTION sdmes.p_delete_routing_details(p_routing_id numeric, p_operation_id numeric, p_operation_seq numeric) OWNER TO mesuser;

--
-- Name: p_get_user_operation(numeric, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_get_user_operation(p_user_id numeric, p_item_number character varying, OUT p_result character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 V_VALUE NUMERIC ;
BEGIN

 SELECT 1
 INTO STRICT V_VALUE
 FROM MES_USER_PROFILES MUP
 WHERE MUP.PROFILE_VALUE2 = P_ITEM_NUMBER
 AND MUP.PROFILE_VALUE3 IS NOT NULL
 AND MUP.MES_USER_ID = P_USER_ID
 LIMIT 1 ;

 UPDATE MES_USER_PROFILES 
 SET RECENT_FLAG = 'N'
 ,LAST_UPDATE_DATE = NOW()
 ,LAST_UPDATED_BY = P_USER_ID
 WHERE PROFILE_NAME = 'OPERATION_ID'
 AND RECENT_FLAG = 'Y'
 AND MES_USER_ID = P_USER_ID ;

 UPDATE MES_USER_PROFILES 
 SET RECENT_FLAG = 'Y'
 ,LAST_UPDATE_DATE = NOW()
 ,LAST_UPDATED_BY = P_USER_ID
 WHERE PROFILE_VALUE2 = P_ITEM_NUMBER
 AND PROFILE_VALUE3 IS NOT NULL
 AND MES_USER_ID = P_USER_ID ;

 P_RESULT := 'OK' ;

 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG' ;
END ; $$;


ALTER FUNCTION sdmes.p_get_user_operation(p_user_id numeric, p_item_number character varying, OUT p_result character varying) OWNER TO mesuser;

--
-- Name: p_insert_operation_parts(numeric, numeric, character varying, character varying, character varying, character varying, numeric, timestamp without time zone, character varying, character varying, character varying, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_insert_operation_parts(p_operation_id numeric, p_item_id numeric, p_item_number character varying, p_barcode_type character varying, p_barcode_indicator character varying, p_location character varying, p_length numeric, p_disable_date timestamp without time zone, p_routing_exist character varying, p_unique_check character varying, p_traceability character varying, p_seperator numeric, p_user_id numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN

 INSERT INTO MTL_OPERATION_PARTS
 (OPERATION_ID,
 ITEM_ID,
 ITEM_NUMBER,
 BARCODE_TYPE,
 BARCODE_INDICATOR,
 LOCATION,
 LENGTH,
 DISABLE_DATE,
 ROUTING_EXIST,
 UNIQUE_CHECK,
 TRACEABILITY,
 SEPERATOR,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY)
 VALUES
 (P_OPERATION_ID,
 P_ITEM_ID,
 P_ITEM_NUMBER,
 P_BARCODE_TYPE,
 P_BARCODE_INDICATOR,
 P_LOCATION,
 P_LENGTH,
 P_DISABLE_DATE,
 P_ROUTING_EXIST,
 P_UNIQUE_CHECK,
 P_TRACEABILITY,
 P_SEPERATOR,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID);

 RETURN 'OK' ;
EXCEPTION
 WHEN OTHERS THEN
 RETURN 'NG'||SQLERRM ;
END ; $$;


ALTER FUNCTION sdmes.p_insert_operation_parts(p_operation_id numeric, p_item_id numeric, p_item_number character varying, p_barcode_type character varying, p_barcode_indicator character varying, p_location character varying, p_length numeric, p_disable_date timestamp without time zone, p_routing_exist character varying, p_unique_check character varying, p_traceability character varying, p_seperator numeric, p_user_id numeric) OWNER TO mesuser;

--
-- Name: p_insert_operations(character varying, character varying, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_insert_operations(p_operation_type character varying, p_operation_desc character varying, p_mfg_site_id numeric, p_user_id numeric, OUT p_operation_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_OPERATION_ID MTL_OPERATIONS.OPERATION_ID%TYPE;
 V_USER_LANGUAGE VARCHAR(10);
 V_USER_DEFAULT_MFG_SITE_NAME VARCHAR( 20);
 V_DUMMY NUMERIC;

BEGIN

 select U.lang, R."name" 
 into V_USER_LANGUAGE, V_USER_DEFAULT_MFG_SITE_NAME
 from USERS U, user_roles ur, roles r 
 where U.user_id = UR.user_id 
 and UR.role_id = R.role_id 
 and U.SITE = P_MFG_SITE_ID
 and U.user_id = P_USER_ID;

 IF P_OPERATION_TYPE = 'INSPECTION' THEN

 BEGIN

 SELECT 1
 INTO STRICT V_DUMMY
 FROM MTL_QUALITY_PLANS
 WHERE QUALITY_PLAN_DESC = P_OPERATION_DESC
 AND LANGUAGE = V_USER_LANGUAGE
 AND QUALITY_PLAN_TYPE = 'IS_TYPE';

 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 INSERT INTO MTL_QUALITY_PLANS(QUALITY_PLAN_ID,
 QUALITY_PLAN_NAME,
 QUALITY_PLAN_DESC,
 CREATED_BY,
 CREATION_DATE,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 QUALITY_PLAN_TYPE,
 LANGUAGE)
 VALUES(NEXTVAL('MTL_QUALITY_PLANS_S'),
 'IS'||CURRVAL('MTL_QUALITY_PLANS_S'),
 P_OPERATION_DESC,
 P_USER_ID,
 NOW(),
 NOW(),
 P_USER_ID,
 'IS_TYPE',
 V_USER_LANGUAGE);
 END;

 END IF;

 INSERT INTO MTL_OPERATIONS
 (OPERATION_TYPE,
 OPERATION_DESC,
 MFG_SITE_ID,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY)
 VALUES
 (P_OPERATION_TYPE,
 P_OPERATION_DESC,
 P_MFG_SITE_ID,
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID)
 RETURNING OPERATION_ID INTO V_OPERATION_ID;

 INSERT INTO MES_LOOKUP_VALUES
 (LOOKUP_TYPE,
 LOOKUP_CODE,
 LANGUAGE,
 LOOKUP_TAG,
 LOOKUP_MEANING,
 DESCRIPTION,
 ENABLE_FLAG,
 CREATED_BY,
 CREATION_DATE)
 VALUES
 ('OPERATION_ID',
 V_OPERATION_ID,
 V_USER_LANGUAGE,
 P_MFG_SITE_ID,
 V_USER_DEFAULT_MFG_SITE_NAME || '_CURRENT_OPID',
 P_OPERATION_DESC,
 'Y',
 P_USER_ID,
 NOW());

 P_OPERATION_ID := V_OPERATION_ID ;

END ; $$;


ALTER FUNCTION sdmes.p_insert_operations(p_operation_type character varying, p_operation_desc character varying, p_mfg_site_id numeric, p_user_id numeric, OUT p_operation_id integer) OWNER TO mesuser;

--
-- Name: p_insert_packaing_number_detail(numeric, character varying, character varying, character varying, numeric, numeric, character varying, character varying, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_insert_packaing_number_detail(p_move_tag_id numeric, p_content_number character varying, p_item_number character varying, p_serial_number character varying, p_history_id numeric, p_item_id numeric, p_packing_type character varying, p_userlang character varying, p_user_id numeric, p_target_count numeric, OUT p_packing_count numeric, OUT p_packing_cont_result character varying, OUT p_packing_cont_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_PACKING_NUMBER NUMERIC;
 V_ITEM_NUMBER VARCHAR(50);
 V_COUNT NUMERIC;
 V_STATUS VARCHAR(30);
 V_PACKING_ID NUMERIC;

BEGIN

 SELECT COUNT(*)
 INTO V_COUNT
 FROM MTL_PACKING_NUMBER_CONTENTS T
 WHERE T.PACKING_ID = P_MOVE_TAG_ID;

 BEGIN
 SELECT MPN.PACKING_NUMBER
 INTO STRICT V_PACKING_NUMBER
 FROM MTL_PACKING_NUMBER_CONTENTS MPNC INNER JOIN MTL_PACKING_NUMBERS MPN ON MPNC.PACKING_ID = MPN.PACKING_ID
 WHERE MPN.STATUS <> 'CANCELED'
 AND MPNC.ITEM_NUMBER = P_ITEM_NUMBER
 AND MPNC.SERIAL_NUMBER = P_SERIAL_NUMBER
 LIMIT 1;

 P_PACKING_COUNT := V_COUNT;
 P_PACKING_CONT_RESULT := 'NG';
 P_PACKING_CONT_MESSAGE := '[' || V_PACKING_NUMBER || ']' ||
 F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,110
 ,P_USERLANG
 ,'E_ALREADY_LOADED');
 RETURN ;
 
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL;
 END;

 BEGIN
 SELECT DISTINCT MPNC.ITEM_NUMBER
 INTO STRICT V_ITEM_NUMBER
 FROM MTL_PACKING_NUMBER_CONTENTS MPNC
 WHERE MPNC.PACKING_ID = P_MOVE_TAG_ID ;
 IF V_ITEM_NUMBER = P_ITEM_NUMBER THEN
 NULL ;
 ELSE
 P_PACKING_COUNT := V_COUNT;
 P_PACKING_CONT_RESULT := 'NG';
 P_PACKING_CONT_MESSAGE := '[' || P_ITEM_NUMBER || ']' ||
 F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,NULL
 ,P_USERLANG
 ,'E_NOT_ALLOWED_MIXED_PACKING');
 RETURN ;
 END IF ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 END ;

 IF V_COUNT + 1 = 0 THEN
 V_STATUS := 'DEFINED BUT NOT USED';
 ELSIF V_COUNT + 1 > 0
 AND V_COUNT + 1 < P_TARGET_COUNT THEN
 V_STATUS := 'PACKING';
 ELSIF V_COUNT + 1 = P_TARGET_COUNT THEN
 V_STATUS := 'PACKED';
 ELSE
 P_PACKING_COUNT := V_COUNT;
 P_PACKING_CONT_RESULT := 'NG_OVER';
 P_PACKING_CONT_MESSAGE := F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,40
 ,P_USERLANG
 ,'E_OVER_PACKING');
 RETURN ;
 END IF;

 UPDATE MTL_PACKING_NUMBERS 
 SET STATUS = V_STATUS,
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_USER_ID
 WHERE PACKING_ID = P_MOVE_TAG_ID;

 INSERT INTO MTL_PACKING_NUMBER_CONTENTS
 (PACKING_ID
 ,CONTENT_NUMBER
 ,ITEM_NUMBER
 ,SERIAL_NUMBER
 ,QTY
 ,HISTORY_ID
 ,ITEM_ID
 ,PACKING_TYPE
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATE_DATE
 ,LAST_UPDATED_BY)
 VALUES
 (P_MOVE_TAG_ID
 ,P_CONTENT_NUMBER
 ,P_ITEM_NUMBER
 ,P_SERIAL_NUMBER
 ,1
 ,P_HISTORY_ID
 ,P_ITEM_ID
 ,P_PACKING_TYPE
 ,P_USER_ID
 ,NOW()
 ,NOW()
 ,P_USER_ID);

 P_PACKING_COUNT := V_COUNT + 1 ;
 P_PACKING_CONT_RESULT := 'OK';
 P_PACKING_CONT_MESSAGE := ' ';

EXCEPTION
 WHEN OTHERS THEN
 P_PACKING_CONT_RESULT := 'NG';
 P_PACKING_CONT_MESSAGE := 'P_INSERT_PACKAING_NUMBER_DETAIL'||SQLERRM;
END ; $$;


ALTER FUNCTION sdmes.p_insert_packaing_number_detail(p_move_tag_id numeric, p_content_number character varying, p_item_number character varying, p_serial_number character varying, p_history_id numeric, p_item_id numeric, p_packing_type character varying, p_userlang character varying, p_user_id numeric, p_target_count numeric, OUT p_packing_count numeric, OUT p_packing_cont_result character varying, OUT p_packing_cont_message character varying) OWNER TO mesuser;

--
-- Name: p_insert_packing_number(numeric, character varying, numeric, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_insert_packing_number(p_mfg_site_id numeric, p_userlang character varying, p_user_id numeric, p_packing_type character varying, p_lpn_instanced character varying, p_move_tag_number character varying, p_item_number character varying, OUT p_move_tag_id numeric, OUT p_packing_result character varying, OUT p_packing_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

BEGIN

 INSERT INTO MTL_PACKING_NUMBERS
 (PACKING_NUMBER
 ,PARENT_PACKING_ID
 ,STATUS
 ,PACKING_TYPE
 ,LPN_INSTANCED
 ,MFG_SITE_ID
 ,ITEM_NUMBER
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY
 ,LAST_UPDATE_DATE)
 VALUES
 (P_MOVE_TAG_NUMBER
 ,NULL
 ,'DEFINED BUT NOT USED'
 ,P_PACKING_TYPE
 ,P_LPN_INSTANCED
 ,P_MFG_SITE_ID
 ,P_ITEM_NUMBER
 ,P_USER_ID
 ,NOW()
 ,P_USER_ID
 ,NOW()) RETURNING PACKING_ID INTO P_MOVE_TAG_ID ;

 P_PACKING_RESULT := 'OK';
 P_PACKING_MESSAGE := ' ';

 EXCEPTION
 WHEN OTHERS THEN
 P_PACKING_RESULT := 'NG';
 P_PACKING_MESSAGE := 'P_INSERT_PACKING_NUMBER'||SQLERRM;
END ; $$;


ALTER FUNCTION sdmes.p_insert_packing_number(p_mfg_site_id numeric, p_userlang character varying, p_user_id numeric, p_packing_type character varying, p_lpn_instanced character varying, p_move_tag_number character varying, p_item_number character varying, OUT p_move_tag_id numeric, OUT p_packing_result character varying, OUT p_packing_message character varying) OWNER TO mesuser;

--
-- Name: p_insert_routing_details(numeric, numeric, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_insert_routing_details(p_routing_id numeric, p_operation_seq numeric, p_operation_id numeric, p_user_id numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 V_OPERATION_SEQ NUMERIC ;
BEGIN

 IF P_OPERATION_SEQ IS NULL THEN
 SELECT MAX(OPERATION_SEQ) + 10
 INTO STRICT V_OPERATION_SEQ
 FROM MTL_ROUTING_DETAILS
 WHERE ROUTING_ID = P_ROUTING_ID;
 IF V_OPERATION_SEQ IS NULL THEN
 V_OPERATION_SEQ := 10;
 END IF;
 ELSE
 V_OPERATION_SEQ := P_OPERATION_SEQ;
 END IF;
 INSERT INTO MTL_ROUTING_DETAILS
 (ROUTING_ID,
 OPERATION_SEQ,
 OPERATION_ID,
 REQUIRED_FLAG,
 DISABLE_DATE,
 EFFECTIVE_DATE,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY)
 VALUES
 (P_ROUTING_ID,
 V_OPERATION_SEQ,
 P_OPERATION_ID,
 'Y',
 NULL,
 DATE_TRUNC('DAY', NOW()),
 NOW(),
 P_USER_ID,
 NOW(),
 P_USER_ID);

 RETURN 'OK' ;
EXCEPTION
 WHEN OTHERS THEN
 RETURN 'NG'||SQLERRM ;
END ; $$;


ALTER FUNCTION sdmes.p_insert_routing_details(p_routing_id numeric, p_operation_seq numeric, p_operation_id numeric, p_user_id numeric) OWNER TO mesuser;

--
-- Name: p_item_label_copy(character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_item_label_copy(p_from_item_number character varying, p_to_item_number character varying, p_user_id numeric, p_lang character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_FROM_ITEM_ID NUMERIC;
 V_TO_ITEM_ID NUMERIC;

BEGIN

 SELECT MIM.ITEM_ID
 INTO V_FROM_ITEM_ID
 FROM MTL_ITEM_MASTERS MIM
 WHERE MIM.ITEM_NUMBER = P_FROM_ITEM_NUMBER;

 SELECT MIM.ITEM_ID
 INTO V_TO_ITEM_ID
 FROM MTL_ITEM_MASTERS MIM
 WHERE MIM.ITEM_NUMBER = P_TO_ITEM_NUMBER;

 INSERT INTO MTL_ITEM_LABEL_RULES
 (ITEM_ID
 ,LABEL_NAME
 ,LABEL_DESC
 ,USE_ATTRIBUTE_NAME
 ,USE_ATTRIBUTE_VALUE
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATE_DATE
 ,LAST_UPDATED_BY
 ,MFG_SITE_ID)
 SELECT V_TO_ITEM_ID,
 LABEL_NAME,
 LABEL_DESC,
 USE_ATTRIBUTE_NAME,
 USE_ATTRIBUTE_VALUE,
 P_USER_ID,
 NOW(),
 NOW(),
 P_USER_ID,
 MFG_SITE_ID
 FROM MTL_ITEM_LABEL_RULES A
 WHERE A.ITEM_ID = V_FROM_ITEM_ID
 AND NOT EXISTS
 (SELECT 1
 FROM MTL_ITEM_LABEL_RULES B
 WHERE B.LABEL_NAME = A.LABEL_NAME
 AND B.USE_ATTRIBUTE_NAME = A.USE_ATTRIBUTE_NAME
 AND B.ITEM_ID = V_TO_ITEM_ID);
 RETURN 'OK' ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 RETURN 'NG' ;
END ; $$;


ALTER FUNCTION sdmes.p_item_label_copy(p_from_item_number character varying, p_to_item_number character varying, p_user_id numeric, p_lang character varying) OWNER TO mesuser;

--
-- Name: p_item_packing_copy(character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_item_packing_copy(p_from_item_number character varying, p_to_item_number character varying, p_user_id numeric, p_lang character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_FROM_ITEM_ID NUMERIC;
 V_TO_ITEM_ID NUMERIC;

BEGIN

 SELECT MIM.ITEM_ID
 INTO V_FROM_ITEM_ID
 FROM MTL_ITEM_MASTERS MIM
 WHERE MIM.ITEM_NUMBER = P_FROM_ITEM_NUMBER;

 SELECT MIM.ITEM_ID
 INTO V_TO_ITEM_ID
 FROM MTL_ITEM_MASTERS MIM
 WHERE MIM.ITEM_NUMBER = P_TO_ITEM_NUMBER;

 INSERT INTO MTL_ITEM_PACKING_RULES
 (ITEM_ID
 ,PACKING_TYPE
 ,PACKING_QTY
 ,SUBPACKING_TYPE
 ,CREATED_BY
 ,CREATION_DATE
 ,LAST_UPDATED_BY
 ,LAST_UPDATE_DATE
 ,LPN_INSTANCED
 ,MFG_SITE_ID)
 SELECT V_TO_ITEM_ID,
 PACKING_TYPE,
 PACKING_QTY,
 SUBPACKING_TYPE,
 P_USER_ID,
 NOW(),
 P_USER_ID,
 NOW(),
 LPN_INSTANCED,
 MFG_SITE_ID
 FROM MTL_ITEM_PACKING_RULES A
 WHERE A.ITEM_ID = V_FROM_ITEM_ID
 AND NOT EXISTS (SELECT 1
 FROM MTL_ITEM_PACKING_RULES B
 WHERE B.PACKING_TYPE = A.PACKING_TYPE
 AND B.ITEM_ID = V_TO_ITEM_ID);
 
 RETURN 'OK' ;
 
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 RETURN 'NG' ;
END ; $$;


ALTER FUNCTION sdmes.p_item_packing_copy(p_from_item_number character varying, p_to_item_number character varying, p_user_id numeric, p_lang character varying) OWNER TO mesuser;

--
-- Name: p_job_dispatch_op_his_chk(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_job_dispatch_op_his_chk(p_operation_id numeric, p_lang character varying, p_item_number character varying, p_serial_number character varying, OUT p_result_value character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

DECLARE

    V_RESULT_VALUE VARCHAR(100) ;

BEGIN

    SELECT JDOHD.RESULT_VALUE
      INTO STRICT V_RESULT_VALUE
      FROM JOB_DISPATCH_OP_HIS_DETAILS JDOHD INNER JOIN JOB_DISPATCH_OP_HISTORIES   JDOH ON JDOH.HISTORY_ID = JDOHD.HISTORY_ID
           									 INNER JOIN JOB_DISPATCH_OPERATIONS     JDO  ON JDO.DISPATCH_OPERATION_ID = JDOH.DISPATCH_OPERATION_ID
     WHERE JDO.OPERATION_ID = P_OPERATION_ID
       AND JDOH.ASSY_ITEM_NUMBER = P_ITEM_NUMBER
       AND JDOH.SERIAL_NUMBER = P_SERIAL_NUMBER
       AND JDOH.RECENT_FLAG = 'Y'
     LIMIT 1 ;
	 
    P_RESULT_VALUE := V_RESULT_VALUE ;
	
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_RESULT_VALUE := '' ;
END ; $$;


ALTER FUNCTION sdmes.p_job_dispatch_op_his_chk(p_operation_id numeric, p_lang character varying, p_item_number character varying, p_serial_number character varying, OUT p_result_value character varying) OWNER TO mesuser;

--
-- Name: p_job_dispatch_op_his_create(numeric, character varying, numeric, numeric, character varying, character varying, character varying, character varying, character varying, character varying, numeric, character varying, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_job_dispatch_op_his_create(p_dispatch_operation_id numeric, p_lang character varying, p_dispatch_id numeric, p_operation_seq_num numeric, p_assy_item_number character varying, p_serial_number character varying, p_operation_type character varying, p_operation_desc character varying, p_passfail character varying, p_comments character varying, p_operator_id numeric, p_workstation_name character varying, p_shop_floor_id numeric, p_line_id numeric, OUT p_history_id numeric, OUT p_his_result character varying, OUT p_his_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_OP_CHECK_RESULT VARCHAR(50);
 V_OP_CHECK_MESSAGE VARCHAR(200);
 V_HISTORY_ID NUMERIC;

BEGIN

 SELECT P_OP_CHK_RESULT, P_OP_CHK_MESSAGE
 INTO V_OP_CHECK_RESULT, V_OP_CHECK_MESSAGE
 FROM P_JOB_OPERATION_CHECK (P_ASSY_ITEM_NUMBER,
 P_LANG,
 P_SERIAL_NUMBER,
 P_DISPATCH_ID,
 P_OPERATION_SEQ_NUM);

 IF V_OP_CHECK_RESULT = 'NG' THEN
 P_HIS_RESULT := 'NG';
 P_HIS_MESSAGE := V_OP_CHECK_MESSAGE;
 RETURN ;
 END IF;

 UPDATE JOB_DISPATCH_OP_HISTORIES 
 SET RECENT_FLAG = 'N',
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_OPERATOR_ID
 WHERE DISPATCH_OPERATION_ID = P_DISPATCH_OPERATION_ID
 AND ASSY_ITEM_NUMBER = P_ASSY_ITEM_NUMBER
 AND SERIAL_NUMBER = P_SERIAL_NUMBER
 AND RECENT_FLAG = 'Y';

 INSERT INTO JOB_DISPATCH_OP_HISTORIES
 (ASSY_ITEM_NUMBER,
 SERIAL_NUMBER,
 OPERATION_TYPE,
 PASSFAIL,
 COMMENTS,
 OPERATOR_ID,
 WORKSTATION_NAME,
 TIME_STAMP,
 RECENT_FLAG,
 LINE_ID,
 SHOPFLOOR_ID,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 DISPATCH_OPERATION_ID,
 OPERATION_SEQ_NUM,
 OPERATION_DESC)
 VALUES
 (P_ASSY_ITEM_NUMBER,
 P_SERIAL_NUMBER,
 P_OPERATION_TYPE,
 P_PASSFAIL,
 P_COMMENTS,
 P_OPERATOR_ID,
 P_WORKSTATION_NAME,
 NOW(),
 'Y',
 P_LINE_ID,
 P_SHOP_FLOOR_ID,
 NOW(),
 P_OPERATOR_ID,
 NOW(),
 P_OPERATOR_ID,
 P_DISPATCH_OPERATION_ID,
 P_OPERATION_SEQ_NUM,
 P_OPERATION_DESC) RETURNING HISTORY_ID INTO V_HISTORY_ID ;

 P_HIS_RESULT := 'OK';
 P_HIS_MESSAGE := ' ';
 P_HISTORY_ID := V_HISTORY_ID;

END ; $$;


ALTER FUNCTION sdmes.p_job_dispatch_op_his_create(p_dispatch_operation_id numeric, p_lang character varying, p_dispatch_id numeric, p_operation_seq_num numeric, p_assy_item_number character varying, p_serial_number character varying, p_operation_type character varying, p_operation_desc character varying, p_passfail character varying, p_comments character varying, p_operator_id numeric, p_workstation_name character varying, p_shop_floor_id numeric, p_line_id numeric, OUT p_history_id numeric, OUT p_his_result character varying, OUT p_his_message character varying) OWNER TO mesuser;

--
-- Name: p_job_dispatch_op_his_detail(numeric, character varying, character varying, character varying, character varying, character varying, numeric, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_job_dispatch_op_his_detail(p_history_id numeric, p_lang character varying, p_result_type character varying, p_result_value character varying, p_part_item_number character varying, p_part_serial_number character varying, p_operator_id numeric, p_comments character varying, OUT p_hisd_result character varying, OUT p_hisd_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

BEGIN

 INSERT INTO JOB_DISPATCH_OP_HIS_DETAILS
 (HISTORY_ID,
 RESULT_TYPE,
 RESULT_VALUE,
 PART_ITEM_NUMBER,
 PART_SERIAL_NUMBER,
 COMMENTS,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY)
 VALUES
 (P_HISTORY_ID,
 P_RESULT_TYPE,
 P_RESULT_VALUE,
 P_PART_ITEM_NUMBER,
 P_PART_SERIAL_NUMBER,
 P_COMMENTS,
 NOW(),
 P_OPERATOR_ID,
 NOW(),
 P_OPERATOR_ID);

 P_HISD_RESULT := 'OK';
 P_HISD_MESSAGE := ' ';

 EXCEPTION
 WHEN OTHERS THEN
 P_HISD_RESULT := 'NG';
 P_HISD_MESSAGE := 'P_JOB_DISPATCH_OP_HIS_DETAIL'||SQLERRM;
END ; $$;


ALTER FUNCTION sdmes.p_job_dispatch_op_his_detail(p_history_id numeric, p_lang character varying, p_result_type character varying, p_result_value character varying, p_part_item_number character varying, p_part_serial_number character varying, p_operator_id numeric, p_comments character varying, OUT p_hisd_result character varying, OUT p_hisd_message character varying) OWNER TO mesuser;

--
-- Name: p_job_operation_check(character varying, character varying, character varying, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_job_operation_check(p_item_number character varying, p_lang character varying, p_serial_number character varying, p_dispatch_id numeric, p_operation_seq numeric, OUT p_op_chk_result character varying, OUT p_op_chk_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_OPERATION_DESC VARCHAR(200);
 V_DUMMY NUMERIC;

BEGIN

 SELECT JDO.OPERATION_DESC
 INTO STRICT V_OPERATION_DESC
 FROM JOB_DISPATCH_OPERATIONS JDO
 WHERE JDO.DISPATCH_ID = P_DISPATCH_ID
 AND JDO.REQUIRED_FLAG = 'Y'
 AND JDO.DISABLE_DATE IS NULL
 AND JDO.OPERATION_SEQ_NUM < P_OPERATION_SEQ
 AND NOT EXISTS
 (SELECT 1
 FROM JOB_DISPATCH_OP_HISTORIES JDOH INNER JOIN JOB_DISPATCH_OPERATIONS JDO1 ON JDOH.DISPATCH_OPERATION_ID = JDO1.DISPATCH_OPERATION_ID
 WHERE JDOH.ASSY_ITEM_NUMBER = P_ITEM_NUMBER
 AND JDOH.SERIAL_NUMBER = P_SERIAL_NUMBER
 AND JDO1.OPERATION_ID = JDO.OPERATION_ID
 AND JDOH.PASSFAIL <> 'FAIL')
 LIMIT 1 ;

 P_OP_CHK_RESULT := 'NG';
 P_OP_CHK_MESSAGE := '<' || V_OPERATION_DESC || '> ' ||
 F_MES_GET_ERR_MESSAGE('K_JOB_DISPATCH_OP_HISTORIES',
 NULL,
 P_LANG,
 'E_REQUIRED_OPERATION');

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_OP_CHK_RESULT := 'OK';
 P_OP_CHK_MESSAGE := ' ';
END ; $$;


ALTER FUNCTION sdmes.p_job_operation_check(p_item_number character varying, p_lang character varying, p_serial_number character varying, p_dispatch_id numeric, p_operation_seq numeric, OUT p_op_chk_result character varying, OUT p_op_chk_message character varying) OWNER TO mesuser;

--
-- Name: p_movetag_cancel(character varying, numeric, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_movetag_cancel(p_packing_number character varying, p_user_id numeric, p_userlang character varying, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_LINE VARCHAR(30);
 V_ITEM VARCHAR(50);

BEGIN

 UPDATE MTL_PACKING_NUMBERS
 SET STATUS = 'CANCELED',
 LAST_UPDATED_BY = P_USER_ID,
 LAST_UPDATE_DATE = NOW()
 WHERE PACKING_NUMBER = P_PACKING_NUMBER ;
 
 BEGIN
 SELECT ML.LINE_NAME, JSN.ITEM_NUMBER
 INTO V_LINE, V_ITEM
 FROM JOB_DISPATCHES A INNER JOIN JOB_SERIAL_NUMBERS JSN ON A.DISPATCH_ID = JSN.DISPATCH_ID
 INNER JOIN MTL_LINES ML ON A.LINE_ID = ML.LINE_ID
 INNER JOIN MTL_PACKING_NUMBER_CONTENTS MPNC ON JSN.ITEM_NUMBER = MPNC.ITEM_NUMBER AND JSN.SERIAL_NUMBER = MPNC.SERIAL_NUMBER
 INNER JOIN MTL_PACKING_NUMBERS MPN ON MPNC.PACKING_ID = MPN.PACKING_ID
 WHERE MPN.PACKING_NUMBER = P_PACKING_NUMBER
 LIMIT 1 ;
 END;
 P_RESULT := 'OK';
 P_MESSAGE := ' ';
EXCEPTION
 WHEN OTHERS THEN
 P_RESULT := 'NG';
 P_MESSAGE := 'P_MOVETAG_CANCEL'||SQLERRM;
END ; $$;


ALTER FUNCTION sdmes.p_movetag_cancel(p_packing_number character varying, p_user_id numeric, p_userlang character varying, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_movetag_insert(character varying, numeric, character varying, character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_movetag_insert(p_scan_data character varying, p_mfg_site_id numeric, p_packing_number_in character varying, p_userlang character varying, p_user_id numeric, OUT p_target_count numeric, OUT p_count numeric, OUT p_result character varying, OUT p_message character varying, OUT p_packing_number character varying, OUT p_packing_id numeric) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_ITEM_NUMBER VARCHAR(50);
 V_SERIAL_NUMBER VARCHAR(50);
 V_BOX_BARCODE_CHECK_RESULT VARCHAR(50);
 V_BOX_BARCODE_CHECK_MESSAGE VARCHAR(200);

 V_TARGET_COUNT NUMERIC;
 V_ITEM_ID NUMERIC;
 V_TARGET_COUNT_RESULT VARCHAR(50);
 V_TARGET_COUNT_MESSAGE VARCHAR(200);

 V_OPERATION_SEQ_NUM NUMERIC;
 V_DISPATCH_ID NUMERIC;
 V_DISPATCH_OPERATION_ID NUMERIC;
 V_OP_CHECK_RESULT VARCHAR(50);
 V_OP_CHECK_MESSAGE VARCHAR(200);

 V_HISTORY_ID NUMERIC;
 V_HIS_RESULT VARCHAR(50);
 V_HIS_MESSAGE VARCHAR(200);

 V_MOVE_TAG_NUMBER VARCHAR(20);
 V_MOVE_TAG_ID NUMERIC;
 V_PACKING_RESULT VARCHAR(50);
 V_PACKING_MESSAGE VARCHAR(200);

 V_COUNT NUMERIC;
 V_PACKING_CONT_RESULT VARCHAR(50);
 V_PACKING_CONT_MESSAGE VARCHAR(200);

 V_BOX_BARCODE_TYPE VARCHAR(50);
 V_PACKING_TYPE VARCHAR(50);

 V_HIS_DETAIL_RESULT VARCHAR(50);
 V_HIS_DETAIL_MESSAGE VARCHAR(200);

 V_LINE VARCHAR(30);
 V_LPN_INSTANCED VARCHAR(1) ;

 V_MOVETAG_STATUS VARCHAR(10) ;
 
 I RECORD ;

BEGIN

 -- INITIALIZE
 P_TARGET_COUNT := -1;
 P_COUNT := 0;
 P_PACKING_NUMBER := '-1';
 P_PACKING_ID := -1;

 SELECT P_BOX_BARCODE_TYPE, P_ITEM_NUMBER, P_SERIAL_NUMBER, P_BOX_CHK_RESULT, P_BOX_CHK_MESSAGE
 INTO V_BOX_BARCODE_TYPE, V_ITEM_NUMBER, V_SERIAL_NUMBER, V_BOX_BARCODE_CHECK_RESULT, V_BOX_BARCODE_CHECK_MESSAGE
 FROM P_BOX_BARCODE_CHECK(P_SCAN_DATA
 ,P_USERLANG) ;

 IF V_BOX_BARCODE_CHECK_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_BOX_BARCODE_CHECK_MESSAGE;
 RETURN ;
 END IF;

 SELECT P_SUB_TARGET_COUNT, P_ITEM_ID, P_SUB_RESULT, P_SUB_MESSAGE
 INTO V_TARGET_COUNT, V_ITEM_ID, V_TARGET_COUNT_RESULT, V_TARGET_COUNT_MESSAGE
 FROM P_TARGET_COUNT(V_ITEM_NUMBER
 ,P_MFG_SITE_ID
 ,P_USERLANG) ;

 IF V_TARGET_COUNT_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_TARGET_COUNT_MESSAGE;
 RETURN ;
 END IF;

 IF P_PACKING_NUMBER_IN = '-1'
 OR P_PACKING_NUMBER_IN IS NULL THEN
 SELECT '5'||NEXTVAL('MTL_PACKING_NUMBERS_SEQ')
 INTO V_MOVE_TAG_NUMBER ;
 ELSE
 V_MOVE_TAG_NUMBER := P_PACKING_NUMBER_IN;
 SELECT PACKING_ID, T.STATUS
 INTO V_MOVE_TAG_ID, V_MOVETAG_STATUS
 FROM MTL_PACKING_NUMBERS T
 WHERE T.PACKING_NUMBER = P_PACKING_NUMBER_IN;
 IF V_MOVETAG_STATUS = 'PACKED' THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,NULL
 ,P_USERLANG
 ,'E_ALREADY_PACKED_MOVETAG');
 END IF ;
 END IF;
 
 P_PACKING_NUMBER := V_MOVE_TAG_NUMBER;
 
 FOR I IN SELECT AA.*
 FROM (SELECT 'ITEM + SERIAL TYPE' BOX_BARCODE_TYPE,
 V_ITEM_NUMBER ITEM_NUMBER,
 V_SERIAL_NUMBER SERIAL_NUMBER
 UNION ALL
 SELECT 'CUSTORMER ITEM + SERIAL TYPE' BOX_BARCODE_TYPE,
 V_ITEM_NUMBER ITEM_NUMBER,
 V_SERIAL_NUMBER SERIAL_NUMBER
 UNION ALL
 SELECT 'IC BOX ITEM + SERIAL TYPE' BOX_BARCODE_TYPE,
 V_ITEM_NUMBER ITEM_NUMBER,
 V_SERIAL_NUMBER SERIAL_NUMBER
 UNION ALL
 SELECT 'PACKING NUMBER TYPE' BOX_BARCODE_TYPE,
 T2.ITEM_NUMBER,
 T2.SERIAL_NUMBER
 FROM MTL_PACKING_NUMBERS T1, MTL_PACKING_NUMBER_CONTENTS T2
 WHERE T1.PACKING_ID = T2.PACKING_ID
 AND T1.PACKING_NUMBER = P_SCAN_DATA) AA
 WHERE AA.BOX_BARCODE_TYPE = V_BOX_BARCODE_TYPE LOOP
 
 BEGIN

 SELECT JDO.OPERATION_SEQ_NUM,
 JSN.DISPATCH_ID,
 JDO.DISPATCH_OPERATION_ID
 INTO STRICT V_OPERATION_SEQ_NUM, 
 V_DISPATCH_ID, 
 V_DISPATCH_OPERATION_ID
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OPERATIONS JDO ON JSN.DISPATCH_ID = JDO.DISPATCH_ID
 WHERE JSN.ITEM_NUMBER = I.ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = I.SERIAL_NUMBER
 AND JDO.OPERATION_TYPE = 'MOVETAG'
 AND JDO.DISABLE_DATE IS NULL ;

 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,NULL
 ,P_USERLANG
 ,'E_NOT_EXIST_OPERATION');
 END; 

 SELECT P_HISTORY_ID, P_HIS_RESULT, P_HIS_MESSAGE
 INTO V_HISTORY_ID, V_HIS_RESULT, V_HIS_MESSAGE
 FROM P_JOB_DISPATCH_OP_HIS_CREATE (V_DISPATCH_OPERATION_ID
 ,P_USERLANG
 ,V_DISPATCH_ID
 ,V_OPERATION_SEQ_NUM
 ,I.ITEM_NUMBER
 ,I.SERIAL_NUMBER
 ,'MOVETAG'
 ,'MOVE TAG GENERATION'
 ,'OK'
 ,NULL
 ,P_USER_ID
 ,NULL
 ,NULL
 ,NULL) ;

 IF V_HIS_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_HIS_MESSAGE;
 RETURN;
 END IF;

 SELECT P_HISD_RESULT, P_HISD_MESSAGE
 INTO V_HIS_DETAIL_RESULT, V_HIS_DETAIL_MESSAGE
 FROM P_JOB_DISPATCH_OP_HIS_DETAIL (V_HISTORY_ID
 ,P_USERLANG
 ,'MOVETAG'
 ,V_MOVE_TAG_NUMBER
 ,''
 ,''
 ,P_USER_ID
 ,'') ;

 IF V_HIS_DETAIL_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_HIS_DETAIL_MESSAGE;
 RETURN;
 END IF;
 
 IF V_BOX_BARCODE_TYPE = 'PACKING NUMBER TYPE' THEN
 V_SERIAL_NUMBER := '';
 END IF;

 END LOOP ; 


 IF V_SERIAL_NUMBER IS NOT NULL THEN
 V_PACKING_TYPE := 'EA';
 ELSE
 V_PACKING_TYPE := 'BOX';
 END IF;

 IF P_PACKING_NUMBER_IN = '-1' OR P_PACKING_NUMBER_IN IS NULL THEN

 BEGIN
 SELECT MIPR.LPN_INSTANCED
 INTO STRICT V_LPN_INSTANCED
 FROM MTL_ITEM_MASTERS MIM INNER JOIN MTL_ITEM_PACKING_RULES MIPR ON MIM.MFG_SITE_ID = MIPR.MFG_SITE_ID AND MIM.ITEM_ID = MIPR.ITEM_ID
 WHERE MIM.ITEM_NUMBER = V_ITEM_NUMBER
 AND MIPR.PACKING_TYPE = 'PALLET'
 LIMIT 1 ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 V_LPN_INSTANCED := 'N' ;
 END ;

 SELECT P_MOVE_TAG_ID, P_PACKING_RESULT, P_PACKING_MESSAGE
 INTO V_MOVE_TAG_ID, V_PACKING_RESULT, V_PACKING_MESSAGE
 FROM P_INSERT_PACKING_NUMBER(P_MFG_SITE_ID
 ,P_USERLANG
 ,P_USER_ID
 ,'PALLET'
 ,V_LPN_INSTANCED
 ,V_MOVE_TAG_NUMBER
 ,V_ITEM_NUMBER);

 IF V_PACKING_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_MESSAGE;
 RETURN ;
 END IF;

 SELECT P_PACKING_COUNT, P_PACKING_CONT_RESULT, P_PACKING_CONT_MESSAGE
 INTO V_COUNT, V_PACKING_CONT_RESULT, V_PACKING_CONT_MESSAGE
 FROM P_INSERT_PACKAING_NUMBER_DETAIL(V_MOVE_TAG_ID
 ,P_SCAN_DATA
 ,V_ITEM_NUMBER
 ,V_SERIAL_NUMBER
 ,V_HISTORY_ID
 ,V_ITEM_ID
 ,V_PACKING_TYPE
 ,P_USERLANG
 ,P_USER_ID
 ,V_TARGET_COUNT);
 IF V_PACKING_CONT_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_CONT_MESSAGE;
 RETURN ;
 ELSIF V_PACKING_CONT_RESULT = 'NG_OVER' THEN
 P_PACKING_ID := -1;
 P_PACKING_NUMBER := '-1';
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_CONT_MESSAGE;
 RETURN ;
 END IF;
 
 ELSE
 SELECT P_PACKING_COUNT, P_PACKING_CONT_RESULT, P_PACKING_CONT_MESSAGE
 INTO V_COUNT, V_PACKING_CONT_RESULT, V_PACKING_CONT_MESSAGE
 FROM P_INSERT_PACKAING_NUMBER_DETAIL(V_MOVE_TAG_ID
 ,P_SCAN_DATA
 ,V_ITEM_NUMBER
 ,V_SERIAL_NUMBER
 ,V_HISTORY_ID
 ,V_ITEM_ID
 ,V_PACKING_TYPE
 ,P_USERLANG
 ,P_USER_ID
 ,V_TARGET_COUNT); 
 IF V_PACKING_CONT_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_CONT_MESSAGE;
 RETURN ;
 ELSIF V_PACKING_CONT_RESULT = 'NG_OVER' THEN
 P_PACKING_ID := -1;
 P_PACKING_NUMBER := '-1';
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_CONT_MESSAGE;
 RETURN ;
 END IF;
 END IF ;

 P_TARGET_COUNT := V_TARGET_COUNT;
 P_COUNT := V_COUNT;

 IF V_TARGET_COUNT = V_COUNT THEN

 P_PACKING_ID := -1;
 P_PACKING_NUMBER := V_MOVE_TAG_NUMBER ;

 BEGIN
 SELECT MPN.LPN_INSTANCED
 INTO STRICT V_LPN_INSTANCED
 FROM MTL_PACKING_NUMBERS MPN
 WHERE MPN.PACKING_NUMBER = V_MOVE_TAG_NUMBER
 AND MPN.LPN_INSTANCED IS NOT NULL ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 V_LPN_INSTANCED := 'Y' ;
 END ;

 IF V_LPN_INSTANCED = 'Y' THEN
 BEGIN
 SELECT ML.LINE_NAME
 INTO STRICT V_LINE
 FROM JOB_DISPATCHES A INNER JOIN JOB_SERIAL_NUMBERS JSN ON A.DISPATCH_ID = JSN.DISPATCH_ID
 INNER JOIN MTL_LINES ML ON A.LINE_ID = ML.LINE_ID
 WHERE JSN.ITEM_NUMBER = V_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = V_SERIAL_NUMBER;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 END;
 END IF ;

 ELSE
 P_PACKING_ID := V_MOVE_TAG_ID;
 P_PACKING_NUMBER := V_MOVE_TAG_NUMBER;
 END IF;
 P_RESULT := 'OK';
 P_MESSAGE := ' ';

END ; $$;


ALTER FUNCTION sdmes.p_movetag_insert(p_scan_data character varying, p_mfg_site_id numeric, p_packing_number_in character varying, p_userlang character varying, p_user_id numeric, OUT p_target_count numeric, OUT p_count numeric, OUT p_result character varying, OUT p_message character varying, OUT p_packing_number character varying, OUT p_packing_id numeric) OWNER TO mesuser;

--
-- Name: p_movetag_insert(character varying, numeric, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_movetag_insert(p_scan_data character varying, p_mfg_site_id numeric, p_packing_number_in character varying, p_operation character varying, p_userlang character varying, p_user_id numeric, OUT p_target_count numeric, OUT p_count numeric, OUT p_result character varying, OUT p_message character varying, OUT p_packing_number character varying, OUT p_packing_id numeric) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_ITEM_NUMBER VARCHAR(50);
 V_SERIAL_NUMBER VARCHAR(50);
 V_BOX_BARCODE_CHECK_RESULT VARCHAR(50);
 V_BOX_BARCODE_CHECK_MESSAGE VARCHAR(200);

 V_TARGET_COUNT NUMERIC;
 V_ITEM_ID NUMERIC;
 V_TARGET_COUNT_RESULT VARCHAR(50);
 V_TARGET_COUNT_MESSAGE VARCHAR(200);

 V_OPERATION_SEQ_NUM NUMERIC;
 V_DISPATCH_ID NUMERIC;
 V_DISPATCH_OPERATION_ID NUMERIC;
 V_OP_CHECK_RESULT VARCHAR(50);
 V_OP_CHECK_MESSAGE VARCHAR(200);

 V_HISTORY_ID NUMERIC;
 V_HIS_RESULT VARCHAR(50);
 V_HIS_MESSAGE VARCHAR(200);

 V_MOVE_TAG_NUMBER VARCHAR(20);
 V_MOVE_TAG_ID NUMERIC;
 V_PACKING_RESULT VARCHAR(50);
 V_PACKING_MESSAGE VARCHAR(200);

 V_COUNT NUMERIC;
 V_PACKING_CONT_RESULT VARCHAR(50);
 V_PACKING_CONT_MESSAGE VARCHAR(200);

 V_BOX_BARCODE_TYPE VARCHAR(50);
 V_PACKING_TYPE VARCHAR(50);

 V_HIS_DETAIL_RESULT VARCHAR(50);
 V_HIS_DETAIL_MESSAGE VARCHAR(200);

 V_LINE VARCHAR(30);
 V_LPN_INSTANCED VARCHAR(1) ;

 V_MOVETAG_STATUS VARCHAR(10) ;
 
 I RECORD ;

BEGIN

 -- INITIALIZE
 P_TARGET_COUNT := -1;
 P_COUNT := 0;
 P_PACKING_NUMBER := '-1';
 P_PACKING_ID := -1;

 SELECT P_BOX_BARCODE_TYPE, P_ITEM_NUMBER, P_SERIAL_NUMBER, P_BOX_CHK_RESULT, P_BOX_CHK_MESSAGE
 INTO V_BOX_BARCODE_TYPE, V_ITEM_NUMBER, V_SERIAL_NUMBER, V_BOX_BARCODE_CHECK_RESULT, V_BOX_BARCODE_CHECK_MESSAGE
 FROM P_BOX_BARCODE_CHECK(P_SCAN_DATA
 ,P_USERLANG) ;

 IF V_BOX_BARCODE_CHECK_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_BOX_BARCODE_CHECK_MESSAGE;
 RETURN ;
 END IF;

 SELECT P_SUB_TARGET_COUNT, P_ITEM_ID, P_SUB_RESULT, P_SUB_MESSAGE
 INTO V_TARGET_COUNT, V_ITEM_ID, V_TARGET_COUNT_RESULT, V_TARGET_COUNT_MESSAGE
 FROM P_TARGET_COUNT(V_ITEM_NUMBER
 ,P_MFG_SITE_ID
 ,P_USERLANG) ;

 IF V_TARGET_COUNT_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_TARGET_COUNT_MESSAGE;
 RETURN ;
 END IF;

 IF P_PACKING_NUMBER_IN = '-1'
 OR P_PACKING_NUMBER_IN IS NULL THEN
 SELECT '5'||NEXTVAL('MTL_PACKING_NUMBERS_SEQ')
 INTO V_MOVE_TAG_NUMBER ;
 ELSE
 V_MOVE_TAG_NUMBER := P_PACKING_NUMBER_IN;
 SELECT PACKING_ID, T.STATUS
 INTO V_MOVE_TAG_ID, V_MOVETAG_STATUS
 FROM MTL_PACKING_NUMBERS T
 WHERE T.PACKING_NUMBER = P_PACKING_NUMBER_IN;
 IF V_MOVETAG_STATUS = 'PACKED' THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,NULL
 ,P_USERLANG
 ,'E_ALREADY_PACKED_MOVETAG');
 END IF ;
 END IF;
 
 P_PACKING_NUMBER := V_MOVE_TAG_NUMBER;
 
 FOR I IN SELECT AA.*
 FROM (SELECT 'ITEM + SERIAL TYPE' BOX_BARCODE_TYPE,
 V_ITEM_NUMBER ITEM_NUMBER,
 V_SERIAL_NUMBER SERIAL_NUMBER
 UNION ALL
 SELECT 'CUSTORMER ITEM + SERIAL TYPE' BOX_BARCODE_TYPE,
 V_ITEM_NUMBER ITEM_NUMBER,
 V_SERIAL_NUMBER SERIAL_NUMBER
 UNION ALL
 SELECT 'IC BOX ITEM + SERIAL TYPE' BOX_BARCODE_TYPE,
 V_ITEM_NUMBER ITEM_NUMBER,
 V_SERIAL_NUMBER SERIAL_NUMBER
 UNION ALL
 SELECT 'PACKING NUMBER TYPE' BOX_BARCODE_TYPE,
 T2.ITEM_NUMBER,
 T2.SERIAL_NUMBER
 FROM MTL_PACKING_NUMBERS T1, MTL_PACKING_NUMBER_CONTENTS T2
 WHERE T1.PACKING_ID = T2.PACKING_ID
 AND T1.PACKING_NUMBER = P_SCAN_DATA) AA
 WHERE AA.BOX_BARCODE_TYPE = V_BOX_BARCODE_TYPE LOOP
 
 BEGIN

 SELECT JDO.OPERATION_SEQ_NUM,
 JSN.DISPATCH_ID,
 JDO.DISPATCH_OPERATION_ID
 INTO STRICT V_OPERATION_SEQ_NUM, 
 V_DISPATCH_ID, 
 V_DISPATCH_OPERATION_ID
 FROM JOB_SERIAL_NUMBERS JSN INNER JOIN JOB_DISPATCH_OPERATIONS JDO ON JSN.DISPATCH_ID = JDO.DISPATCH_ID
 WHERE JSN.ITEM_NUMBER = I.ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = I.SERIAL_NUMBER
 AND JDO.OPERATION_TYPE = p_operation
 AND JDO.DISABLE_DATE IS NULL ;

 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_RESULT := 'NG';
 P_MESSAGE := F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,NULL
 ,P_USERLANG
 ,'E_NOT_EXIST_OPERATION');
 END; 

 SELECT P_HISTORY_ID, P_HIS_RESULT, P_HIS_MESSAGE
 INTO V_HISTORY_ID, V_HIS_RESULT, V_HIS_MESSAGE
 FROM P_JOB_DISPATCH_OP_HIS_CREATE (V_DISPATCH_OPERATION_ID
 ,P_USERLANG
 ,V_DISPATCH_ID
 ,V_OPERATION_SEQ_NUM
 ,I.ITEM_NUMBER
 ,I.SERIAL_NUMBER
 ,p_operation
 ,p_operation || ' GENERATION'
 ,'OK'
 ,NULL
 ,P_USER_ID
 ,NULL
 ,NULL
 ,NULL) ;

 IF V_HIS_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_HIS_MESSAGE;
 RETURN;
 END IF;

 SELECT P_HISD_RESULT, P_HISD_MESSAGE
 INTO V_HIS_DETAIL_RESULT, V_HIS_DETAIL_MESSAGE
 FROM P_JOB_DISPATCH_OP_HIS_DETAIL (V_HISTORY_ID
 ,P_USERLANG
 ,p_operation
 ,V_MOVE_TAG_NUMBER
 ,''
 ,''
 ,P_USER_ID
 ,'') ;

 IF V_HIS_DETAIL_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_HIS_DETAIL_MESSAGE;
 RETURN;
 END IF;
 
 IF V_BOX_BARCODE_TYPE = 'PACKING NUMBER TYPE' THEN
 V_SERIAL_NUMBER := '';
 END IF;

 END LOOP ; 


 IF V_SERIAL_NUMBER IS NOT NULL THEN
 V_PACKING_TYPE := 'EA';
 ELSE
 V_PACKING_TYPE := 'BOX';
 END IF;

 IF P_PACKING_NUMBER_IN = '-1' OR P_PACKING_NUMBER_IN IS NULL THEN

 BEGIN
 SELECT MIPR.LPN_INSTANCED
 INTO STRICT V_LPN_INSTANCED
 FROM MTL_ITEM_MASTERS MIM INNER JOIN MTL_ITEM_PACKING_RULES MIPR ON MIM.MFG_SITE_ID = MIPR.MFG_SITE_ID AND MIM.ITEM_ID = MIPR.ITEM_ID
 WHERE MIM.ITEM_NUMBER = V_ITEM_NUMBER
 AND MIPR.PACKING_TYPE = 'PALLET'
 LIMIT 1 ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 V_LPN_INSTANCED := 'N' ;
 END ;

 SELECT P_MOVE_TAG_ID, P_PACKING_RESULT, P_PACKING_MESSAGE
 INTO V_MOVE_TAG_ID, V_PACKING_RESULT, V_PACKING_MESSAGE
 FROM P_INSERT_PACKING_NUMBER(P_MFG_SITE_ID
 ,P_USERLANG
 ,P_USER_ID
 ,'PALLET'
 ,V_LPN_INSTANCED
 ,V_MOVE_TAG_NUMBER
 ,V_ITEM_NUMBER);

 IF V_PACKING_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_MESSAGE;
 RETURN ;
 END IF;

 SELECT P_PACKING_COUNT, P_PACKING_CONT_RESULT, P_PACKING_CONT_MESSAGE
 INTO V_COUNT, V_PACKING_CONT_RESULT, V_PACKING_CONT_MESSAGE
 FROM P_INSERT_PACKAING_NUMBER_DETAIL(V_MOVE_TAG_ID
 ,P_SCAN_DATA
 ,V_ITEM_NUMBER
 ,V_SERIAL_NUMBER
 ,V_HISTORY_ID
 ,V_ITEM_ID
 ,V_PACKING_TYPE
 ,P_USERLANG
 ,P_USER_ID
 ,V_TARGET_COUNT);
 IF V_PACKING_CONT_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_CONT_MESSAGE;
 RETURN ;
 ELSIF V_PACKING_CONT_RESULT = 'NG_OVER' THEN
 P_PACKING_ID := -1;
 P_PACKING_NUMBER := '-1';
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_CONT_MESSAGE;
 RETURN ;
 END IF;
 
 ELSE
 SELECT P_PACKING_COUNT, P_PACKING_CONT_RESULT, P_PACKING_CONT_MESSAGE
 INTO V_COUNT, V_PACKING_CONT_RESULT, V_PACKING_CONT_MESSAGE
 FROM P_INSERT_PACKAING_NUMBER_DETAIL(V_MOVE_TAG_ID
 ,P_SCAN_DATA
 ,V_ITEM_NUMBER
 ,V_SERIAL_NUMBER
 ,V_HISTORY_ID
 ,V_ITEM_ID
 ,V_PACKING_TYPE
 ,P_USERLANG
 ,P_USER_ID
 ,V_TARGET_COUNT); 
 IF V_PACKING_CONT_RESULT = 'NG' THEN
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_CONT_MESSAGE;
 RETURN ;
 ELSIF V_PACKING_CONT_RESULT = 'NG_OVER' THEN
 P_PACKING_ID := -1;
 P_PACKING_NUMBER := '-1';
 P_RESULT := 'NG';
 P_MESSAGE := V_PACKING_CONT_MESSAGE;
 RETURN ;
 END IF;
 END IF ;

 P_TARGET_COUNT := V_TARGET_COUNT;
 P_COUNT := V_COUNT;

 IF V_TARGET_COUNT = V_COUNT THEN

 P_PACKING_ID := -1;
 P_PACKING_NUMBER := V_MOVE_TAG_NUMBER ;

 BEGIN
 SELECT MPN.LPN_INSTANCED
 INTO STRICT V_LPN_INSTANCED
 FROM MTL_PACKING_NUMBERS MPN
 WHERE MPN.PACKING_NUMBER = V_MOVE_TAG_NUMBER
 AND MPN.LPN_INSTANCED IS NOT NULL ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 V_LPN_INSTANCED := 'Y' ;
 END ;

 IF V_LPN_INSTANCED = 'Y' THEN
 BEGIN
 SELECT ML.LINE_NAME
 INTO STRICT V_LINE
 FROM JOB_DISPATCHES A INNER JOIN JOB_SERIAL_NUMBERS JSN ON A.DISPATCH_ID = JSN.DISPATCH_ID
 INNER JOIN MTL_LINES ML ON A.LINE_ID = ML.LINE_ID
 WHERE JSN.ITEM_NUMBER = V_ITEM_NUMBER
 AND JSN.SERIAL_NUMBER = V_SERIAL_NUMBER;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL ;
 END;
 END IF ;

 ELSE
 P_PACKING_ID := V_MOVE_TAG_ID;
 P_PACKING_NUMBER := V_MOVE_TAG_NUMBER;
 END IF;
 P_RESULT := 'OK';
 P_MESSAGE := ' ';

END ; $$;


ALTER FUNCTION sdmes.p_movetag_insert(p_scan_data character varying, p_mfg_site_id numeric, p_packing_number_in character varying, p_operation character varying, p_userlang character varying, p_user_id numeric, OUT p_target_count numeric, OUT p_count numeric, OUT p_result character varying, OUT p_message character varying, OUT p_packing_number character varying, OUT p_packing_id numeric) OWNER TO mesuser;

--
-- Name: p_movetag_print(numeric, numeric, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_movetag_print(p_packing_id numeric, p_user_id numeric, p_userlang character varying, OUT p_result character varying, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_LINE VARCHAR(30);
 V_ITEM VARCHAR(50);

BEGIN

 UPDATE MTL_PACKING_NUMBERS
 SET STATUS = 'PACKED',
 LAST_UPDATED_BY = P_USER_ID,
 LAST_UPDATE_DATE = NOW()
 WHERE PACKING_ID = P_PACKING_ID
 AND STATUS = 'PACKING' ;

 IF NOT FOUND THEN
 BEGIN
 SELECT ML.LINE_NAME, JSN.ITEM_NUMBER
 INTO STRICT V_LINE, V_ITEM
 FROM JOB_DISPATCHES A INNER JOIN JOB_SERIAL_NUMBERS JSN ON A.DISPATCH_ID = JSN.DISPATCH_ID
 INNER JOIN MTL_LINES ML ON A.LINE_ID = ML.LINE_ID
 INNER JOIN MTL_PACKING_NUMBER_CONTENTS MPNC ON JSN.ITEM_NUMBER = MPNC.ITEM_NUMBER AND JSN.SERIAL_NUMBER = MPNC.SERIAL_NUMBER
 INNER JOIN MTL_PACKING_NUMBERS MPN ON MPNC.PACKING_ID = MPN.PACKING_ID
 
 WHERE MPN.PACKING_ID = P_PACKING_ID
 LIMIT 1 ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 -- BOX BARCODE MOVETAG PRINT
 SELECT ML.LINE_NAME, JSN.ITEM_NUMBER
 INTO STRICT V_LINE, V_ITEM
 FROM JOB_DISPATCHES A INNER JOIN JOB_SERIAL_NUMBERS JSN ON A.DISPATCH_ID = JSN.DISPATCH_ID
 INNER JOIN MTL_LINES ML ON A.LINE_ID = ML.LINE_ID
 INNER JOIN MTL_PACKING_NUMBER_CONTENTS MPNC_B ON JSN.ITEM_NUMBER = MPNC_B.ITEM_NUMBER AND JSN.SERIAL_NUMBER = MPNC_B.SERIAL_NUMBER
 INNER JOIN MTL_PACKING_NUMBERS MPN_B ON MPN_B.PACKING_ID = MPNC_B.PACKING_ID
 INNER JOIN MTL_PACKING_NUMBER_CONTENTS MPNC ON MPNC.CONTENT_NUMBER = MPN_B.PACKING_NUMBER
 INNER JOIN MTL_PACKING_NUMBERS MPN ON MPNC.PACKING_ID = MPN.PACKING_ID
 WHERE MPN.PACKING_TYPE = 'PALLET'
 AND MPN_B.PACKING_TYPE = 'BOX'
 AND MPN.PACKING_ID = P_PACKING_ID
 LIMIT 1 ;
 END;

 END IF ;

 P_RESULT := 'OK';
 P_MESSAGE := '';

EXCEPTION
 WHEN OTHERS THEN
 P_RESULT := 'NG';
 P_MESSAGE := 'P_MOVETAG_PRINT : ' || SQLERRM;
END ; $$;


ALTER FUNCTION sdmes.p_movetag_print(p_packing_id numeric, p_user_id numeric, p_userlang character varying, OUT p_result character varying, OUT p_message character varying) OWNER TO mesuser;

--
-- Name: p_part_assembly_check(character varying, character varying, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_part_assembly_check(p_part_number character varying, p_part_barcode character varying, p_lang character varying, OUT p_assy_result character varying, OUT p_assy_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_SERIAL_NUMBER VARCHAR(50) ;
 V_DISPATCH_ID NUMERIC ;
 V_OPERATION_SEQ NUMERIC ;
 
 V_RESULT VARCHAR(10) ;
 V_MESSAGE VARCHAR(100) ;

BEGIN

 SELECT JSN.SERIAL_NUMBER, JSN.DISPATCH_ID
 INTO STRICT V_SERIAL_NUMBER, V_DISPATCH_ID
 FROM JOB_SERIAL_NUMBERS JSN
 WHERE JSN.CONFIG_INDICATOR = P_PART_BARCODE
 AND JSN.ITEM_NUMBER = P_PART_NUMBER
 LIMIT 1 ;

 SELECT MAX(JDO.OPERATION_SEQ_NUM)
 INTO V_OPERATION_SEQ
 FROM JOB_DISPATCH_OPERATIONS JDO
 WHERE JDO.DISPATCH_ID = V_DISPATCH_ID
 AND JDO.REQUIRED_FLAG = 'Y'
 AND JDO.DISABLE_DATE IS NULL ;

 IF V_OPERATION_SEQ IS NOT NULL THEN

 SELECT P_OP_CHK_RESULT, P_OP_CHK_MESSAGE
 INTO V_RESULT, V_MESSAGE
 FROM P_JOB_OPERATION_CHECK (P_PART_NUMBER
 ,P_LANG
 ,V_SERIAL_NUMBER
 ,V_DISPATCH_ID
 ,V_OPERATION_SEQ+10);
 
 IF V_RESULT = 'NG' THEN
 P_ASSY_RESULT := 'NG' ;
 P_ASSY_MESSAGE := V_MESSAGE ;
 RETURN ;
 ELSE
 P_ASSY_RESULT := 'OK' ;
 P_ASSY_MESSAGE := '' ;
 END IF ;

 ELSE

 P_ASSY_RESULT := 'OK' ;
 P_ASSY_MESSAGE := '' ;

 END IF ;
EXCEPTION
 WHEN NO_DATA_FOUND THEN 
 P_ASSY_RESULT := 'OK' ;
 P_ASSY_MESSAGE := '' ;
END ; $$;


ALTER FUNCTION sdmes.p_part_assembly_check(p_part_number character varying, p_part_barcode character varying, p_lang character varying, OUT p_assy_result character varying, OUT p_assy_message character varying) OWNER TO mesuser;

--
-- Name: p_target_count(character varying, numeric, character varying); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_target_count(p_item_number character varying, p_mfg_site_id numeric, p_userlang character varying, OUT p_sub_target_count numeric, OUT p_item_id numeric, OUT p_sub_result character varying, OUT p_sub_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$

DECLARE

 V_TARGET_COUNT NUMERIC;
 V_ITEM_ID NUMERIC;

BEGIN

 SELECT MIPR.PACKING_QTY, MIPR.ITEM_ID
 INTO STRICT V_TARGET_COUNT, V_ITEM_ID
 FROM MTL_ITEM_MASTERS MIM INNER JOIN MTL_ITEM_PACKING_RULES MIPR ON MIPR.ITEM_ID = MIM.ITEM_ID AND MIPR.MFG_SITE_ID = MIM.MFG_SITE_ID
 WHERE MIM.ITEM_NUMBER = P_ITEM_NUMBER
 AND MIM.MFG_SITE_ID = P_MFG_SITE_ID
 AND MIPR.PACKING_TYPE = 'PALLET'
 LIMIT 1;

 P_SUB_TARGET_COUNT := V_TARGET_COUNT;
 P_ITEM_ID := V_ITEM_ID;
 P_SUB_RESULT := 'OK';
 P_SUB_MESSAGE := ' ';

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 P_SUB_TARGET_COUNT := 0;
 P_SUB_RESULT := 'NG';
 P_SUB_MESSAGE := F_MES_GET_ERR_MESSAGE('K_PACKING'
 ,NULL
 ,P_USERLANG
 ,'E_NOT_EXIST_PALLET_PACKING_TYPE'); 
END ; $$;


ALTER FUNCTION sdmes.p_target_count(p_item_number character varying, p_mfg_site_id numeric, p_userlang character varying, OUT p_sub_target_count numeric, OUT p_item_id numeric, OUT p_sub_result character varying, OUT p_sub_message character varying) OWNER TO mesuser;

--
-- Name: p_update_operation_parts(numeric, numeric, character varying, character varying, character varying, character varying, numeric, timestamp without time zone, character varying, character varying, character varying, numeric, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_update_operation_parts(p_operation_id numeric, p_item_id numeric, p_item_number character varying, p_barcode_type character varying, p_barcode_indicator character varying, p_location character varying, p_length numeric, p_disable_date timestamp without time zone, p_routing_exist character varying, p_unique_check character varying, p_traceability character varying, p_seperator numeric, p_old_item_id numeric, p_user_id numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN

 UPDATE MTL_OPERATION_PARTS
 SET ITEM_ID = P_ITEM_ID,
 ITEM_NUMBER = P_ITEM_NUMBER,
 BARCODE_TYPE = P_BARCODE_TYPE,
 BARCODE_INDICATOR = P_BARCODE_INDICATOR,
 LOCATION = P_LOCATION,
 LENGTH = P_LENGTH,
 DISABLE_DATE = P_DISABLE_DATE,
 ROUTING_EXIST = P_ROUTING_EXIST,
 UNIQUE_CHECK = P_UNIQUE_CHECK,
 TRACEABILITY = P_TRACEABILITY,
 SEPERATOR = P_SEPERATOR,
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_USER_ID
 WHERE OPERATION_ID = P_OPERATION_ID
 AND COALESCE(P_OLD_ITEM_ID, 0) = COALESCE(P_OLD_ITEM_ID, 0);

 RETURN 'OK' ;
EXCEPTION
 WHEN OTHERS THEN
 RETURN 'NG'||SQLERRM ;
END ; $$;


ALTER FUNCTION sdmes.p_update_operation_parts(p_operation_id numeric, p_item_id numeric, p_item_number character varying, p_barcode_type character varying, p_barcode_indicator character varying, p_location character varying, p_length numeric, p_disable_date timestamp without time zone, p_routing_exist character varying, p_unique_check character varying, p_traceability character varying, p_seperator numeric, p_old_item_id numeric, p_user_id numeric) OWNER TO mesuser;

--
-- Name: p_update_operations(integer, character varying, character varying, numeric, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_update_operations(p_operation_id integer, p_operation_type character varying, p_operation_desc character varying, p_mfg_site_id numeric, p_user_id numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN

 UPDATE MTL_OPERATIONS
 SET OPERATION_TYPE = P_OPERATION_TYPE,
 OPERATION_DESC = P_OPERATION_DESC,
 MFG_SITE_ID = P_MFG_SITE_ID,
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_USER_ID
 WHERE OPERATION_ID = P_OPERATION_ID;

 RETURN 'OK' ;
EXCEPTION
 WHEN OTHERS THEN
 RETURN 'NG'||SQLERRM ;
END ; $$;


ALTER FUNCTION sdmes.p_update_operations(p_operation_id integer, p_operation_type character varying, p_operation_desc character varying, p_mfg_site_id numeric, p_user_id numeric) OWNER TO mesuser;

--
-- Name: p_update_routing_details(numeric, numeric, numeric, character varying, timestamp without time zone, timestamp without time zone, numeric, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: sdmes; Owner: mesuser
--

CREATE FUNCTION sdmes.p_update_routing_details(p_routing_id numeric, p_operation_id numeric, p_operation_seq numeric, p_required_flag character varying, p_disable_date timestamp without time zone, p_effective_date timestamp without time zone, p_user_id numeric, p_part_number character varying, p_indicator character varying, p_location character varying, p_length numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN

 UPDATE MTL_ROUTING_DETAILS
 SET OPERATION_SEQ = P_OPERATION_SEQ,
 REQUIRED_FLAG = P_REQUIRED_FLAG,
 DISABLE_DATE = P_DISABLE_DATE,
 EFFECTIVE_DATE = DATE_TRUNC('DAY', P_EFFECTIVE_DATE),
 LAST_UPDATE_DATE = NOW(),
 LAST_UPDATED_BY = P_USER_ID
 WHERE ROUTING_ID = P_ROUTING_ID
 AND OPERATION_ID = P_OPERATION_ID;

 UPDATE MTL_OPERATION_PARTS
 SET ITEM_NUMBER = P_PART_NUMBER
 , BARCODE_INDICATOR = P_INDICATOR
 , LOCATION = P_LOCATION
 , LENGTH = P_LENGTH
 WHERE OPERATION_ID = P_OPERATION_ID;

 RETURN 'OK' ;
EXCEPTION
 WHEN OTHERS THEN
 RETURN 'NG'||SQLERRM ;
END ; $$;


ALTER FUNCTION sdmes.p_update_routing_details(p_routing_id numeric, p_operation_id numeric, p_operation_seq numeric, p_required_flag character varying, p_disable_date timestamp without time zone, p_effective_date timestamp without time zone, p_user_id numeric, p_part_number character varying, p_indicator character varying, p_location character varying, p_length numeric) OWNER TO mesuser;

--
-- Name: hibernate_sequence; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.hibernate_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.hibernate_sequence OWNER TO mesuser;

SET default_tablespace = '';

--
-- Name: job_customer_serial_numbers; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.job_customer_serial_numbers (
    serial_number_id numeric NOT NULL,
    item_number character varying(50) NOT NULL,
    serial_number character varying(50) NOT NULL,
    serial_type character varying(50) NOT NULL,
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    cus_serial_number character varying(100) NOT NULL
);


ALTER TABLE sdmes.job_customer_serial_numbers OWNER TO mesuser;

--
-- Name: job_dispatch_op_his_details; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.job_dispatch_op_his_details (
    history_id numeric,
    result_type character varying(50),
    result_value text,
    part_item_number character varying(50),
    part_serial_number character varying(50),
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    comments text,
    attribute1 text,
    attribute2 text,
    attribute3 text,
    attribute4 text,
    attribute5 text,
    interface_id numeric,
    interface_date timestamp without time zone
);


ALTER TABLE sdmes.job_dispatch_op_his_details OWNER TO mesuser;

--
-- Name: job_dispatch_op_histories; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.job_dispatch_op_histories (
    history_id integer NOT NULL,
    dispatch_operation_id numeric,
    operation_seq_num numeric,
    assy_item_number character varying(50),
    serial_number character varying(50),
    operation_type character varying(50),
    passfail character varying(20),
    comments text,
    operator_id numeric,
    time_stamp timestamp without time zone,
    recent_flag character varying(1),
    line_id numeric,
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    workstation_name character varying(100),
    interface_flag character varying(1),
    shopfloor_id numeric,
    operation_desc character varying(50),
    production_count character varying(1),
    interface_date timestamp without time zone,
    interface_error_message text
);


ALTER TABLE sdmes.job_dispatch_op_histories OWNER TO mesuser;

--
-- Name: job_dispatch_op_histories_history_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.job_dispatch_op_histories_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.job_dispatch_op_histories_history_id_seq OWNER TO mesuser;

--
-- Name: job_dispatch_op_histories_history_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.job_dispatch_op_histories_history_id_seq OWNED BY sdmes.job_dispatch_op_histories.history_id;


--
-- Name: job_dispatches; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.job_dispatches (
    dispatch_id numeric,
    item_id numeric,
    item_number character varying(50),
    qty numeric,
    line_id numeric,
    start_date timestamp without time zone,
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    mfg_site_id numeric,
    interfaced_wo_num character varying(50),
    fixed_manufacturing_date timestamp without time zone,
    fixed_serial_prefix character varying(30),
    machine_id numeric,
    part_lot_number character varying(50),
    operator numeric,
    attribute1 character varying(50),
    attribute2 character varying(50),
    attribute3 character varying(50),
    attribute4 character varying(50),
    attribute5 character varying(50),
    cancel_flag character varying(10),
    cancel_date timestamp without time zone,
    product_family character varying(255),
    line_name character varying(255),
    serial_check character varying(255),
    status character varying(255)
);


ALTER TABLE sdmes.job_dispatches OWNER TO mesuser;

--
-- Name: job_serial_numbers; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.job_serial_numbers (
    serial_number_id integer NOT NULL,
    dispatch_id numeric,
    item_number character varying(50),
    serial_number character varying(50),
    serial_sequence_number numeric,
    qty numeric,
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    production_month character varying(10),
    config_indicator character varying(100),
    oqc_lot_number character varying(20),
    oqc_lot_status character varying(20),
    serial_status character varying(30),
    completion_lpn character varying(30),
    attribute1 character varying(100)
);


ALTER TABLE sdmes.job_serial_numbers OWNER TO mesuser;

--
-- Name: mtl_item_masters; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_item_masters (
    mfg_site_id numeric NOT NULL,
    item_id numeric NOT NULL,
    item_number character varying(50),
    item_description text,
    item_type character varying(30),
    status character varying(20) DEFAULT 'PROTOTYPE'::character varying,
    comments text,
    team_code character varying(50),
    gross_weight numeric,
    net_weight numeric,
    product_family text,
    serial_rule_id numeric,
    prefix_type character varying(10),
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    separator character varying(10) DEFAULT '+'::character varying,
    end_number numeric DEFAULT 0,
    customer_item_number1 character varying(50),
    customer_item_number2 character varying(50),
    svc_tag_serial_rule_id numeric,
    ppid_serial_rule_id numeric,
    setup_serial_rule_id numeric,
    mc_serial_rule_id numeric,
    user_defined_prod_date timestamp without time zone,
    assembly_family_id numeric,
    domestic_serial_rule_id numeric,
    wms_packing_operation character varying(15),
    box_barcode_type character varying(10),
    domestic_flag character varying(1),
    primary_uom_code character varying(10),
    thickness numeric,
    width numeric,
    customer_item_number3 character varying(50),
    max_limit_serial_seq numeric,
    csu numeric,
    order_flag character varying(1),
    line_id numeric,
    machine_id numeric,
    created_by_desc character varying(255),
    last_updated_by_desc character varying(255),
    serial_rule_description character varying(255),
    lastupdatedbydesc character varying(255)
);


ALTER TABLE sdmes.mtl_item_masters OWNER TO mesuser;

--
-- Name: mtl_lines; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_lines (
    line_id numeric NOT NULL,
    mfg_site_id numeric,
    line_name character varying(20),
    description character varying(100),
    disable_date timestamp without time zone,
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    job_order_flag character varying(1),
    default_tact_time numeric,
    line_alias character varying(20),
    line_manager_id numeric,
    org_id numeric
);


ALTER TABLE sdmes.mtl_lines OWNER TO mesuser;

--
-- Name: users; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.users (
    user_id integer NOT NULL,
    username character varying(100) NOT NULL,
    password character varying(2000) NOT NULL,
    firstname character varying(1000),
    lastname character varying(1000),
    email character varying(1000),
    organization character varying(1000),
    site numeric,
    lang character varying(100),
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    registered_date timestamp without time zone,
    disable_date timestamp without time zone
);


ALTER TABLE sdmes.users OWNER TO mesuser;

--
-- Name: job_dispatch_op_histories_v; Type: VIEW; Schema: sdmes; Owner: mesuser
--

CREATE VIEW sdmes.job_dispatch_op_histories_v AS
 SELECT jd.dispatch_id,
    jd.item_id,
    jd.item_number,
    jd.qty AS dispatch_qty,
    jd.line_id,
    jd.start_date,
    jd.mfg_site_id,
    jd.interfaced_wo_num,
    jd.fixed_manufacturing_date,
    jd.fixed_serial_prefix,
    jd.machine_id,
    jd.part_lot_number,
    jsn.serial_number_id,
    jsn.serial_number,
    jsn.serial_sequence_number,
    jsn.qty AS serial_qty,
    jsn.config_indicator,
    jsn.serial_status,
    jsn.completion_lpn,
    jdoh.history_id,
    jdoh.dispatch_operation_id,
    jdoh.operation_seq_num,
    jdoh.operation_type,
    jdoh.passfail,
    jdoh.comments,
    jdoh.operator_id,
    jdoh.time_stamp,
    jdoh.recent_flag,
    jdoh.interface_flag,
    jdoh.operation_desc,
    jdohd.result_type,
    jdohd.result_value,
    jdohd.part_item_number,
    jdohd.part_serial_number,
    jdohd.comments AS detail_comments,
    jdohd.attribute1,
    jdohd.attribute2,
    jdohd.attribute3,
    jdohd.attribute4,
    jdohd.attribute5,
    ((u.firstname)::text || (u.lastname)::text) AS user_name,
    ml.line_name,
    mim1.item_description,
    mim1.product_family,
    ( SELECT mtl_item_masters.item_description
           FROM sdmes.mtl_item_masters
          WHERE ((mtl_item_masters.item_number)::text = (jdohd.part_item_number)::text)) AS part_description,
    to_char(jdoh.time_stamp, 'YYYY-MM-DD HH24:MI:SS'::text) AS timestamp_str,
        CASE
            WHEN (jdoh.time_stamp >= date_trunc('DAY'::text, now())) THEN 'TODAY'::text
            ELSE 'BEFORE'::text
        END AS date_flag
   FROM ((((((sdmes.job_dispatches jd
     JOIN sdmes.job_serial_numbers jsn ON ((jd.dispatch_id = jsn.dispatch_id)))
     JOIN sdmes.job_dispatch_op_histories jdoh ON ((((jsn.item_number)::text = (jdoh.assy_item_number)::text) AND ((jsn.serial_number)::text = (jdoh.serial_number)::text))))
     JOIN sdmes.mtl_lines ml ON ((ml.line_id = jd.line_id)))
     JOIN sdmes.users u ON (((u.user_id)::numeric = jdoh.operator_id)))
     JOIN sdmes.mtl_item_masters mim1 ON (((mim1.item_number)::text = (jdoh.assy_item_number)::text)))
     LEFT JOIN sdmes.job_dispatch_op_his_details jdohd ON (((jdoh.history_id)::numeric = jdohd.history_id)));


ALTER TABLE sdmes.job_dispatch_op_histories_v OWNER TO mesuser;

--
-- Name: job_dispatch_operations; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.job_dispatch_operations (
    dispatch_operation_id integer NOT NULL,
    dispatch_id numeric,
    operation_seq_num numeric,
    assy_item_number character varying(50),
    operation_type character varying(50),
    operation_desc character varying(75),
    part_item_number character varying(50),
    barcode_type character varying(50),
    barcode_indicator character varying(50),
    location character varying(50),
    length numeric,
    required_flag character varying(1),
    disable_date timestamp without time zone,
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    effective_date timestamp without time zone,
    unique_check character varying(1),
    operation_id numeric,
    production_count character varying(1),
    quantity_per_assembly numeric,
    usage_rate_or_amount numeric,
    attribute1 character varying(10),
    attribute2 character varying(10),
    attribute3 character varying(10),
    attribute4 character varying(10),
    attribute5 character varying(10)
);


ALTER TABLE sdmes.job_dispatch_operations OWNER TO mesuser;

--
-- Name: job_dispatch_operations_dispatch_operation_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.job_dispatch_operations_dispatch_operation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.job_dispatch_operations_dispatch_operation_id_seq OWNER TO mesuser;

--
-- Name: job_dispatch_operations_dispatch_operation_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.job_dispatch_operations_dispatch_operation_id_seq OWNED BY sdmes.job_dispatch_operations.dispatch_operation_id;


--
-- Name: roles; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.roles (
    role_id integer NOT NULL,
    name character varying(100),
    description character varying(300)
);


ALTER TABLE sdmes.roles OWNER TO mesuser;

--
-- Name: user_roles; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.user_roles (
    user_id bigint NOT NULL,
    role_id bigint NOT NULL
);


ALTER TABLE sdmes.user_roles OWNER TO mesuser;

--
-- Name: users_v; Type: VIEW; Schema: sdmes; Owner: mesuser
--

CREATE VIEW sdmes.users_v AS
 SELECT u.user_id,
    u.username,
    (((u.firstname)::text || ' '::text) || (u.lastname)::text) AS name,
    u.email,
    u.organization,
    u.site,
    ur.role_id,
    r.name AS role_name,
    u.lang,
    u.registered_date,
    u.disable_date,
    u.firstname,
    u.lastname
   FROM sdmes.users u,
    sdmes.user_roles ur,
    sdmes.roles r
  WHERE ((r.role_id = ur.role_id) AND (ur.user_id = u.user_id));


ALTER TABLE sdmes.users_v OWNER TO mesuser;

--
-- Name: job_dispatch_repair_defect_v; Type: VIEW; Schema: sdmes; Owner: mesuser
--

CREATE VIEW sdmes.job_dispatch_repair_defect_v AS
 SELECT b.history_id,
    a.line_id,
    ( SELECT mtl_lines.line_name
           FROM sdmes.mtl_lines
          WHERE (mtl_lines.line_id = a.line_id)) AS line_name,
    a.assy_item_number,
    a.serial_number,
    a.operation_type AS operation,
    a.comments,
    a.time_stamp,
    a.operation_desc,
    COALESCE(b.comments, b.attribute1) AS inspection,
    COALESCE(b.part_serial_number, (b.attribute2)::character varying) AS tdegree,
    b.attribute3 AS defect_type,
    b.result_value AS defect_code,
    COALESCE(b.part_item_number, (t.attribute1)::character varying) AS subsystem_code,
    t.result_value AS repair_code,
    t.part_item_number AS part_number,
    t.part_serial_number AS part_barcode,
    COALESCE(t.comments, t.attribute2) AS fault_code,
    t.attribute3 AS pagecount,
    t.attribute4 AS total_pagecount,
    ( SELECT uv.name
           FROM sdmes.users_v uv
          WHERE ((uv.user_id)::numeric = a.created_by)) AS worker
   FROM ((sdmes.job_dispatch_op_histories a
     JOIN sdmes.job_dispatch_op_his_details b ON (((a.history_id)::numeric = b.history_id)))
     JOIN sdmes.job_dispatch_op_his_details t ON ((b.history_id = t.history_id)))
  WHERE (((a.operation_type)::text = 'REPAIR'::text) AND ((b.result_type)::text = 'DEFECT CODE'::text) AND ((t.result_type)::text = 'REPAIR CODE'::text));


ALTER TABLE sdmes.job_dispatch_repair_defect_v OWNER TO mesuser;

--
-- Name: job_dispatches_s; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.job_dispatches_s
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.job_dispatches_s OWNER TO mesuser;

--
-- Name: job_dispatches_v; Type: VIEW; Schema: sdmes; Owner: mesuser
--

CREATE VIEW sdmes.job_dispatches_v AS
 SELECT jd.dispatch_id,
    jd.item_number,
    mim.product_family,
    jd.item_id,
    jd.qty,
    jd.line_id,
    ml.line_name,
    to_char(jd.start_date, 'YYYY-MM-DD'::text) AS start_date,
    jd.creation_date,
    jd.created_by,
    jd.last_update_date,
    jd.last_updated_by,
    jd.mfg_site_id,
    jd.interfaced_wo_num,
    jd.fixed_manufacturing_date,
    ( SELECT count(*) AS count
           FROM sdmes.job_serial_numbers jsn
          WHERE (jsn.dispatch_id = jd.dispatch_id)) AS serial_count,
        CASE
            WHEN (( SELECT count(*) AS count
               FROM sdmes.job_serial_numbers jsn
              WHERE (jsn.dispatch_id = jd.dispatch_id)) = 0) THEN
            CASE
                WHEN (( SELECT count(*) AS count
                   FROM sdmes.job_dispatch_operations jdo
                  WHERE ((jdo.dispatch_id = jd.dispatch_id) AND (jdo.disable_date IS NULL))) = 0) THEN 'NEW'::text
                ELSE 'OP_CREATED'::text
            END
            ELSE
            CASE
                WHEN (( SELECT count(*) AS count
                   FROM sdmes.job_dispatch_operations jdo
                  WHERE ((jdo.dispatch_id = jd.dispatch_id) AND (jdo.disable_date IS NULL))) = 0) THEN 'SN_CREATED'::text
                ELSE
                CASE
                    WHEN (( SELECT count(*) AS count
                       FROM (sdmes.job_dispatch_op_histories jdoh
                         JOIN sdmes.job_serial_numbers jsn ON ((((jdoh.assy_item_number)::text = (jsn.item_number)::text) AND ((jdoh.serial_number)::text = (jsn.serial_number)::text) AND (jsn.dispatch_id = jd.dispatch_id) AND ((jdoh.recent_flag)::text = 'Y'::text))))) = 0) THEN 'OP_CREATED'::text
                    ELSE
                    CASE
                        WHEN ((( SELECT count(*) AS count
                           FROM (sdmes.job_dispatch_op_histories jdoh
                             JOIN sdmes.job_serial_numbers jsn ON ((((jdoh.assy_item_number)::text = (jsn.item_number)::text) AND ((jdoh.serial_number)::text = (jsn.serial_number)::text) AND (jsn.dispatch_id = jd.dispatch_id) AND ((jdoh.operation_type)::text = 'EOL'::text) AND ((jdoh.recent_flag)::text = 'Y'::text))))))::numeric = jd.qty) THEN 'COMPLETED'::text
                        ELSE 'MANUFACTURING'::text
                    END
                END
            END
        END AS status,
    ( SELECT max((jsn.serial_number)::text) AS max
           FROM sdmes.job_serial_numbers jsn
          WHERE (jsn.dispatch_id = jd.dispatch_id)) AS max_sn,
    ( SELECT min((jsn.serial_number)::text) AS min
           FROM sdmes.job_serial_numbers jsn
          WHERE (jsn.dispatch_id = jd.dispatch_id)) AS min_sn,
    mim.user_defined_prod_date
   FROM ((sdmes.job_dispatches jd
     JOIN sdmes.mtl_lines ml ON ((ml.line_id = jd.line_id)))
     JOIN sdmes.mtl_item_masters mim ON ((mim.item_id = jd.item_id)));


ALTER TABLE sdmes.job_dispatches_v OWNER TO mesuser;

--
-- Name: job_inspection_results; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.job_inspection_results (
    result_id integer NOT NULL,
    result_type character varying(20),
    item_number character varying(50),
    serial_number character varying(50),
    mfg_site_id numeric,
    item_id numeric,
    quality_plan_id numeric,
    inspection_item_id numeric,
    history_id character varying(50),
    inspection_value numeric,
    attribute1 text,
    attribute2 text,
    attribute3 text,
    attribute4 text,
    attribute5 text,
    attribute6 text,
    attribute7 text,
    attribute8 text,
    attribute9 text,
    attribute10 text,
    attribute_value1 numeric,
    attribute_value2 numeric,
    attribute_value3 numeric,
    attribute_value4 numeric,
    attribute_value5 numeric,
    attribute_value6 numeric,
    attribute_value7 numeric,
    attribute_value8 numeric,
    attribute_value9 numeric,
    attribute_value10 numeric,
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    inspection_id numeric
);


ALTER TABLE sdmes.job_inspection_results OWNER TO mesuser;

--
-- Name: job_inspection_results_result_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.job_inspection_results_result_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.job_inspection_results_result_id_seq OWNER TO mesuser;

--
-- Name: job_inspection_results_result_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.job_inspection_results_result_id_seq OWNED BY sdmes.job_inspection_results.result_id;


--
-- Name: job_no_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.job_no_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.job_no_seq OWNER TO mesuser;

--
-- Name: job_serial_numbers_serial_number_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.job_serial_numbers_serial_number_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.job_serial_numbers_serial_number_id_seq OWNER TO mesuser;

--
-- Name: job_serial_numbers_serial_number_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.job_serial_numbers_serial_number_id_seq OWNED BY sdmes.job_serial_numbers.serial_number_id;


--
-- Name: job_serial_numbers_v; Type: VIEW; Schema: sdmes; Owner: mesuser
--

CREATE VIEW sdmes.job_serial_numbers_v AS
 SELECT t.serial_number_id,
    t.dispatch_id,
    t.item_number,
    t.serial_number,
    t.serial_sequence_number,
    t.qty,
    t.creation_date,
    t.created_by,
    t.last_update_date,
    t.last_updated_by,
    t.production_month,
    t.config_indicator,
    t.oqc_lot_number,
    t.oqc_lot_status,
    t.serial_status,
    t.completion_lpn,
    t.attribute1,
    sdmes.f_get_serialnum_status(t.item_number, t.serial_number) AS status
   FROM sdmes.job_serial_numbers t;


ALTER TABLE sdmes.job_serial_numbers_v OWNER TO mesuser;

--
-- Name: mes_lookup_values; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mes_lookup_values (
    lookup_type character varying(50) NOT NULL,
    lookup_code character varying(50) NOT NULL,
    language character varying(20),
    lookup_tag character varying(20),
    lookup_meaning character varying(100),
    description character varying(100),
    enable_flag character varying(20),
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    used_operation character varying,
    order_flag character varying
);


ALTER TABLE sdmes.mes_lookup_values OWNER TO mesuser;

--
-- Name: mes_printing_programs; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mes_printing_programs (
    id numeric(10,0) NOT NULL,
    system_id numeric NOT NULL,
    type character varying(200) NOT NULL,
    name character varying(200) NOT NULL,
    file character varying(300),
    description character varying(200),
    parameters text,
    labels text,
    attributes text,
    attribute1 character varying(300),
    attribute2 character varying(300),
    attribute3 character varying(300),
    attribute4 character varying(300),
    attribute5 character varying(300),
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    used_operation character varying(255),
    order_flag character varying(255),
    contents text,
    qrcode character varying(300),
    serial_flag character varying
);


ALTER TABLE sdmes.mes_printing_programs OWNER TO mesuser;

--
-- Name: mes_printing_programs_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mes_printing_programs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mes_printing_programs_id_seq OWNER TO mesuser;

--
-- Name: mes_printing_programs_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mes_printing_programs_id_seq OWNED BY sdmes.mes_printing_programs.id;


--
-- Name: mes_program_errors; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mes_program_errors (
    program_name character varying(50) NOT NULL,
    language character varying(20) NOT NULL,
    error_seq numeric NOT NULL,
    error_code character varying(50),
    error_message text,
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric
);


ALTER TABLE sdmes.mes_program_errors OWNER TO mesuser;


--
-- Name: mes_sites; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mes_sites (
    id bigint NOT NULL,
    country character varying(1000),
    location character varying(1000),
    site_name character varying(100)
);


ALTER TABLE sdmes.mes_sites OWNER TO mesuser;

--
-- Name: mes_sites_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mes_sites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mes_sites_id_seq OWNER TO mesuser;

--
-- Name: mes_sites_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mes_sites_id_seq OWNED BY sdmes.mes_sites.id;


--
-- Name: mes_systems_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mes_systems_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mes_systems_id_seq OWNER TO mesuser;

--
-- Name: mes_systems; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mes_systems (
    id numeric DEFAULT nextval('sdmes.mes_systems_id_seq'::regclass) NOT NULL,
    type character varying(50) NOT NULL,
    name character varying(50) NOT NULL,
    description character varying(200),
    call_type character varying(1000),
    call_value character varying(1000),
    default_flag character varying(10) DEFAULT 'N'::character varying,
    disable_date timestamp without time zone,
    attribute1 character varying(300),
    attribute2 character varying(300),
    attribute3 character varying(300),
    attribute4 character varying(300),
    attribute5 character varying(300),
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    labels character varying(255),
    parameters character varying(255),
    system_id bigint,
    call_proc character varying
);


ALTER TABLE sdmes.mes_systems OWNER TO mesuser;

--
-- Name: mes_user_profiles; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mes_user_profiles (
    user_profile_id integer NOT NULL,
    profile_name character varying(50),
    profile_value text,
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    mes_user_id numeric,
    profile_value2 text,
    profile_value3 text,
    recent_flag character varying(1)
);


ALTER TABLE sdmes.mes_user_profiles OWNER TO mesuser;

--
-- Name: mes_user_profiles_user_profile_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mes_user_profiles_user_profile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mes_user_profiles_user_profile_id_seq OWNER TO mesuser;

--
-- Name: mes_user_profiles_user_profile_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mes_user_profiles_user_profile_id_seq OWNED BY sdmes.mes_user_profiles.user_profile_id;


--
-- Name: mtl_defect_codes; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_defect_codes (
    defect_code_id integer NOT NULL,
    defect_code character varying(50) NOT NULL,
    code_level integer NOT NULL,
    defect_name text,
    disable_date date,
    creation_date timestamp without time zone,
    created_by numeric,
    last_updated_by numeric,
    last_update_date timestamp without time zone,
    assembly_family_id numeric,
    assembly_family_code character varying(50),
    reason_for_fault character varying(50),
    alarm_count numeric,
    parent_code_lv1 character varying(50),
    parent_code_lv2 character varying(50),
    parent_code_lv3 character varying(50),
    parent_code_lv4 character varying(50),
    datetime_pattern character varying(255)
);


ALTER TABLE sdmes.mtl_defect_codes OWNER TO mesuser;

--
-- Name: mtl_defect_codes_defect_code_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_defect_codes_defect_code_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mtl_defect_codes_defect_code_id_seq OWNER TO mesuser;

--
-- Name: mtl_defect_codes_defect_code_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mtl_defect_codes_defect_code_id_seq OWNED BY sdmes.mtl_defect_codes.defect_code_id;


--
-- Name: mtl_hold_part_serials; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_hold_part_serials (
    item_id numeric NOT NULL,
    mfg_site_id numeric NOT NULL,
    item_number character varying(50) NOT NULL,
    lot_number character varying(50),
    effective_date timestamp without time zone NOT NULL,
    disable_date timestamp without time zone,
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    barcode_value character varying(100) NOT NULL,
    issue_flag character varying(1) NOT NULL
);


ALTER TABLE sdmes.mtl_hold_part_serials OWNER TO mesuser;

--
-- Name: mtl_inspections; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_inspections (
    inspection_id numeric NOT NULL,
    parent_inspection_id numeric,
    inspection_name text,
    inspection_desc text,
    attribute_value character varying(20),
    high_value numeric,
    low_value numeric,
    disable_date timestamp without time zone,
    seq character varying(20),
    inspection_type character varying(20),
    operation_id numeric,
    quality_plan_id numeric,
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric
);


ALTER TABLE sdmes.mtl_inspections OWNER TO mesuser;

--
-- Name: mtl_item_label_rules; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_item_label_rules (
    item_id numeric NOT NULL,
    label_name character varying(30) NOT NULL,
    label_desc text,
    use_attribute_name character varying(30) NOT NULL,
    use_attribute_value text,
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    mfg_site_id numeric,
    label_id integer NOT NULL
);


ALTER TABLE sdmes.mtl_item_label_rules OWNER TO mesuser;

--
-- Name: mtl_item_label_rules_label_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_item_label_rules_label_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mtl_item_label_rules_label_id_seq OWNER TO mesuser;

--
-- Name: mtl_item_label_rules_label_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mtl_item_label_rules_label_id_seq OWNED BY sdmes.mtl_item_label_rules.label_id;


--
-- Name: mtl_item_serial_rules; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_item_serial_rules (
    serial_rule_id integer NOT NULL,
    serial_rule_description character varying(100),
    prefix_year_month timestamp without time zone,
    prefix_year_month_type character varying(20),
    start_number numeric,
    end_number numeric,
    digits numeric,
    suffix character varying(20),
    daily_initialized character varying(1),
    check_sum character varying(1),
    fixed_prefix character varying(20),
    user_defined_prod_date timestamp without time zone,
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    shared_flag character varying(1) DEFAULT 'N'::character varying NOT NULL,
    country_code character varying(50),
    mfg_id character varying(50),
    encoding numeric,
    serial_pg_type character varying(30),
    monthly_initialized character varying(1),
    serial_rule_type character varying(30)
);


ALTER TABLE sdmes.mtl_item_serial_rules OWNER TO mesuser;

--
-- Name: mtl_item_masters_v; Type: VIEW; Schema: sdmes; Owner: mesuser
--

CREATE VIEW sdmes.mtl_item_masters_v AS
 SELECT t.item_id,
    t.item_number,
    t.item_description,
    t.item_type,
    t.product_family,
    t.separator,
    t.team_code,
    t.gross_weight,
    t.net_weight,
    t.customer_item_number1,
    t.customer_item_number2,
    t.serial_rule_id,
    ( SELECT misr.serial_rule_description
           FROM sdmes.mtl_item_serial_rules misr
          WHERE ((misr.serial_rule_id)::numeric = t.serial_rule_id)) AS serial_rule_description,
    t.prefix_type,
    t.mfg_site_id,
    t.status,
    t.comments,
    t.creation_date,
    t.created_by,
    ( SELECT uv.name
           FROM sdmes.users_v uv
          WHERE ((uv.user_id)::numeric = t.created_by)) AS created_by_desc,
    t.last_update_date,
    ( SELECT uv.name
           FROM sdmes.users_v uv
          WHERE ((uv.user_id)::numeric = t.last_updated_by)) AS last_updated_by_desc,
    ( SELECT ml.line_name
           FROM sdmes.mtl_lines ml
          WHERE (ml.line_id = t.line_id)) AS line_name,
    t.line_id,
    t.last_updated_by,
    t.customer_item_number3,
    t.end_number
   FROM sdmes.mtl_item_masters t;


ALTER TABLE sdmes.mtl_item_masters_v OWNER TO mesuser;

--
-- Name: mtl_item_packing_rules; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_item_packing_rules (
    item_id numeric NOT NULL,
    packing_type character varying(30) NOT NULL,
    packing_qty numeric,
    subpacking_type character varying(30),
    created_by numeric,
    creation_date timestamp without time zone,
    last_updated_by numeric,
    last_update_date timestamp without time zone,
    lpn_instanced character varying(1),
    mfg_site_id numeric NOT NULL,
    packing_id integer NOT NULL
);


ALTER TABLE sdmes.mtl_item_packing_rules OWNER TO mesuser;

--
-- Name: mtl_item_packing_rules_packing_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_item_packing_rules_packing_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mtl_item_packing_rules_packing_id_seq OWNER TO mesuser;

--
-- Name: mtl_item_packing_rules_packing_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mtl_item_packing_rules_packing_id_seq OWNED BY sdmes.mtl_item_packing_rules.packing_id;


--
-- Name: mtl_item_serial_rules_serial_rule_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_item_serial_rules_serial_rule_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mtl_item_serial_rules_serial_rule_id_seq OWNER TO mesuser;

--
-- Name: mtl_item_serial_rules_serial_rule_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mtl_item_serial_rules_serial_rule_id_seq OWNED BY sdmes.mtl_item_serial_rules.serial_rule_id;


--
-- Name: mtl_lines_v; Type: VIEW; Schema: sdmes; Owner: mesuser
--

CREATE VIEW sdmes.mtl_lines_v AS
 SELECT ml.line_id,
    ml.line_name,
    ml.description,
    ml.disable_date,
    ml.job_order_flag,
    ml.default_tact_time,
    ml.line_alias,
    ml.line_manager_id,
    ml.org_id,
    ml.mfg_site_id,
    ms.site_name,
    uv.name AS user_name,
    ml.creation_date,
    ml.created_by,
    ml.last_update_date,
    ml.last_updated_by
   FROM ((sdmes.mtl_lines ml
     JOIN sdmes.mes_sites ms ON ((ml.mfg_site_id = (ms.id)::numeric)))
     LEFT JOIN sdmes.users_v uv ON ((ml.line_manager_id = (uv.user_id)::numeric)));


ALTER TABLE sdmes.mtl_lines_v OWNER TO mesuser;

--
-- Name: mtl_operation_parts; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_operation_parts (
    operation_id numeric,
    item_id numeric,
    item_number character varying(50),
    barcode_type character varying(50),
    barcode_indicator character varying(50),
    location character varying(50),
    length numeric,
    disable_date timestamp without time zone,
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    routing_exist character varying(1),
    unique_check character varying(1),
    traceability character varying(1),
    seperator numeric,
    material_name character varying(50),
    grade character varying(50),
    color character varying(50)
);


ALTER TABLE sdmes.mtl_operation_parts OWNER TO mesuser;

--
-- Name: mtl_operations; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_operations (
    operation_id integer NOT NULL,
    operation_type character varying(50),
    operation_desc character varying(50),
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    mfg_site_id numeric
);


ALTER TABLE sdmes.mtl_operations OWNER TO mesuser;

--
-- Name: mtl_operations_operation_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_operations_operation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mtl_operations_operation_id_seq OWNER TO mesuser;

--
-- Name: mtl_operations_operation_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mtl_operations_operation_id_seq OWNED BY sdmes.mtl_operations.operation_id;


--
-- Name: mtl_packing_number_contents; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_packing_number_contents (
    packing_id numeric NOT NULL,
    content_number character varying(50) NOT NULL,
    item_number character varying(50),
    serial_number character varying(50),
    qty numeric,
    history_id numeric,
    item_id numeric,
    packing_type character varying(30),
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    mfg_site_id numeric
);


ALTER TABLE sdmes.mtl_packing_number_contents OWNER TO mesuser;

--
-- Name: mtl_packing_numbers; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_packing_numbers (
    packing_id integer NOT NULL,
    packing_number character varying(50),
    parent_packing_id numeric,
    status character varying(20),
    packing_type character varying(30),
    lpn_instanced character varying(20),
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    mfg_site_id numeric,
    item_number character varying(50)
);


ALTER TABLE sdmes.mtl_packing_numbers OWNER TO mesuser;

--
-- Name: mtl_packing_numbers_packing_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_packing_numbers_packing_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mtl_packing_numbers_packing_id_seq OWNER TO mesuser;

--
-- Name: mtl_packing_numbers_packing_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mtl_packing_numbers_packing_id_seq OWNED BY sdmes.mtl_packing_numbers.packing_id;


--
-- Name: mtl_packing_numbers_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_packing_numbers_seq
    START WITH 20000000
    INCREMENT BY 1
    MINVALUE 10000001
    MAXVALUE 99999999
    CACHE 1;


ALTER TABLE sdmes.mtl_packing_numbers_seq OWNER TO mesuser;

--
-- Name: mtl_packing_numbers_v; Type: VIEW; Schema: sdmes; Owner: mesuser
--

CREATE VIEW sdmes.mtl_packing_numbers_v AS
 SELECT mpn.packing_id,
    mpn.packing_number,
    COALESCE(mpn.item_number, mpnc.item_number) AS item_number,
    mpn.packing_type,
    mpn.status,
    mpnc.content_number,
    mipr.packing_qty
   FROM ((sdmes.mtl_packing_numbers mpn
     JOIN sdmes.mtl_packing_number_contents mpnc ON (((mpn.packing_id)::numeric = mpnc.packing_id)))
     JOIN sdmes.mtl_item_packing_rules mipr ON (((mpnc.item_id = mipr.item_id) AND ((mpn.packing_type)::text = (mipr.packing_type)::text))));


ALTER TABLE sdmes.mtl_packing_numbers_v OWNER TO mesuser;

--
-- Name: mtl_quality_plans; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_quality_plans (
    quality_plan_id numeric NOT NULL,
    quality_plan_name character varying(30),
    quality_plan_desc text,
    created_by numeric,
    creation_date timestamp without time zone,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    quality_plan_type text,
    language character varying(20)
);


ALTER TABLE sdmes.mtl_quality_plans OWNER TO mesuser;

--
-- Name: mtl_quality_plans_s; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_quality_plans_s
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mtl_quality_plans_s OWNER TO mesuser;

--
-- Name: mtl_repair_codes; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_repair_codes (
    repair_code_id integer NOT NULL,
    repair_code character varying(50) NOT NULL,
    code_level integer NOT NULL,
    repair_name character varying(100),
    disable_date date,
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    parent_code_lv1 character varying(50),
    parent_code_lv2 character varying(50),
    parent_code_lv3 character varying(50),
    parent_code_lv4 character varying(50),
    alarm_count bigint,
    assembly_family_code character varying(255),
    assembly_family_id bigint,
    defect_code character varying(255),
    defect_name character varying(255),
    reason_for_fault character varying(255),
    datetime_pattern character varying(255)
);


ALTER TABLE sdmes.mtl_repair_codes OWNER TO mesuser;

--
-- Name: mtl_repair_codes_repair_code_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_repair_codes_repair_code_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mtl_repair_codes_repair_code_id_seq OWNER TO mesuser;

--
-- Name: mtl_repair_codes_repair_code_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mtl_repair_codes_repair_code_id_seq OWNED BY sdmes.mtl_repair_codes.repair_code_id;


--
-- Name: mtl_routing_details; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_routing_details (
    routing_id numeric,
    operation_seq numeric,
    operation_id numeric,
    required_flag character varying(1),
    disable_date timestamp without time zone,
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    effective_date timestamp without time zone,
    production_count character varying(1),
    quantity_per_assembly numeric,
    usage_rate_or_amount numeric,
    uom character varying(10),
    attribute1 character varying(10),
    attribute2 character varying(10),
    attribute3 character varying(10),
    attribute4 character varying(10),
    attribute5 character varying(10),
    routing_desc character varying(255),
    mfg_site_id integer
);


ALTER TABLE sdmes.mtl_routing_details OWNER TO mesuser;

--
-- Name: mtl_routing_details_v; Type: VIEW; Schema: sdmes; Owner: mesuser
--

CREATE VIEW sdmes.mtl_routing_details_v AS
 SELECT mrd.operation_seq,
    mrd.operation_id,
    mrd.required_flag,
    mo.operation_type,
    mo.operation_desc,
    mop.item_number,
    mop.barcode_indicator,
    mop.location,
    mop.length,
    mrd.creation_date,
    mrd.created_by,
    mrd.last_update_date,
    mrd.last_updated_by,
    mrd.disable_date,
    mrd.effective_date,
    mrd.production_count,
    mrd.routing_id
   FROM ((sdmes.mtl_routing_details mrd
     JOIN sdmes.mtl_operations mo ON (((mo.operation_id)::numeric = mrd.operation_id)))
     LEFT JOIN ( SELECT mop_1.operation_id,
            mop_1.item_id,
            mop_1.item_number,
            mop_1.barcode_type,
            mop_1.barcode_indicator,
            mop_1.location,
            mop_1.length,
            mop_1.disable_date,
            mop_1.creation_date,
            mop_1.created_by,
            mop_1.last_update_date,
            mop_1.last_updated_by,
            mop_1.routing_exist,
            mop_1.unique_check,
            mop_1.traceability,
            mop_1.seperator,
            mop_1.material_name,
            mop_1.grade,
            mop_1.color,
            mop_1.rn
           FROM ( SELECT mop_2.operation_id,
                    mop_2.item_id,
                    mop_2.item_number,
                    mop_2.barcode_type,
                    mop_2.barcode_indicator,
                    mop_2.location,
                    mop_2.length,
                    mop_2.disable_date,
                    mop_2.creation_date,
                    mop_2.created_by,
                    mop_2.last_update_date,
                    mop_2.last_updated_by,
                    mop_2.routing_exist,
                    mop_2.unique_check,
                    mop_2.traceability,
                    mop_2.seperator,
                    mop_2.material_name,
                    mop_2.grade,
                    mop_2.color,
                    row_number() OVER (PARTITION BY mop_2.operation_id) AS rn
                   FROM sdmes.mtl_operation_parts mop_2) mop_1
          WHERE (mop_1.rn = 1)) mop ON (((mo.operation_id)::numeric = mop.operation_id)))
  ORDER BY mrd.operation_seq;


ALTER TABLE sdmes.mtl_routing_details_v OWNER TO mesuser;

--
-- Name: mtl_routings; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.mtl_routings (
    routing_id integer NOT NULL,
    assy_item_id numeric,
    assy_item_number character varying(50),
    creation_date timestamp without time zone,
    created_by numeric,
    last_update_date timestamp without time zone,
    last_updated_by numeric,
    routing_desc text,
    mfg_site_id numeric
);


ALTER TABLE sdmes.mtl_routings OWNER TO mesuser;

--
-- Name: mtl_routings_routing_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.mtl_routings_routing_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.mtl_routings_routing_id_seq OWNER TO mesuser;

--
-- Name: mtl_routings_routing_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.mtl_routings_routing_id_seq OWNED BY sdmes.mtl_routings.routing_id;


--
-- Name: packing; Type: TABLE; Schema: sdmes; Owner: mesuser
--

CREATE TABLE sdmes.packing (
    packing_id integer NOT NULL,
    content_number character varying(255),
    item character varying(255),
    packing_number character varying(255),
    status character varying(255),
    type character varying(255),
    message character varying(255),
    result character varying(255),
    target_count character varying(255),
    mfg_site_id character varying(255),
    scan_data character varying(255)
);


ALTER TABLE sdmes.packing OWNER TO mesuser;

--
-- Name: packing_packing_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.packing_packing_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.packing_packing_id_seq OWNER TO mesuser;

--
-- Name: packing_packing_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.packing_packing_id_seq OWNED BY sdmes.packing.packing_id;


--
-- Name: roles_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.roles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.roles_id_seq OWNER TO mesuser;

--
-- Name: roles_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.roles_id_seq OWNED BY sdmes.roles.role_id;


--
-- Name: users_user_id_seq; Type: SEQUENCE; Schema: sdmes; Owner: mesuser
--

CREATE SEQUENCE sdmes.users_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sdmes.users_user_id_seq OWNER TO mesuser;

--
-- Name: users_user_id_seq; Type: SEQUENCE OWNED BY; Schema: sdmes; Owner: mesuser
--

ALTER SEQUENCE sdmes.users_user_id_seq OWNED BY sdmes.users.user_id;


--
-- Name: job_dispatch_op_histories history_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.job_dispatch_op_histories ALTER COLUMN history_id SET DEFAULT nextval('sdmes.job_dispatch_op_histories_history_id_seq'::regclass);


--
-- Name: job_dispatch_operations dispatch_operation_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.job_dispatch_operations ALTER COLUMN dispatch_operation_id SET DEFAULT nextval('sdmes.job_dispatch_operations_dispatch_operation_id_seq'::regclass);


--
-- Name: job_inspection_results result_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.job_inspection_results ALTER COLUMN result_id SET DEFAULT nextval('sdmes.job_inspection_results_result_id_seq'::regclass);


--
-- Name: job_serial_numbers serial_number_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.job_serial_numbers ALTER COLUMN serial_number_id SET DEFAULT nextval('sdmes.job_serial_numbers_serial_number_id_seq'::regclass);


--
-- Name: mes_printing_programs id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mes_printing_programs ALTER COLUMN id SET DEFAULT nextval('sdmes.mes_printing_programs_id_seq'::regclass);


--
-- Name: mes_sites id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mes_sites ALTER COLUMN id SET DEFAULT nextval('sdmes.mes_sites_id_seq'::regclass);


--
-- Name: mes_user_profiles user_profile_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mes_user_profiles ALTER COLUMN user_profile_id SET DEFAULT nextval('sdmes.mes_user_profiles_user_profile_id_seq'::regclass);


--
-- Name: mtl_defect_codes defect_code_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_defect_codes ALTER COLUMN defect_code_id SET DEFAULT nextval('sdmes.mtl_defect_codes_defect_code_id_seq'::regclass);


--
-- Name: mtl_item_label_rules label_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_item_label_rules ALTER COLUMN label_id SET DEFAULT nextval('sdmes.mtl_item_label_rules_label_id_seq'::regclass);


--
-- Name: mtl_item_packing_rules packing_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_item_packing_rules ALTER COLUMN packing_id SET DEFAULT nextval('sdmes.mtl_item_packing_rules_packing_id_seq'::regclass);


--
-- Name: mtl_item_serial_rules serial_rule_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_item_serial_rules ALTER COLUMN serial_rule_id SET DEFAULT nextval('sdmes.mtl_item_serial_rules_serial_rule_id_seq'::regclass);


--
-- Name: mtl_operations operation_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_operations ALTER COLUMN operation_id SET DEFAULT nextval('sdmes.mtl_operations_operation_id_seq'::regclass);


--
-- Name: mtl_packing_numbers packing_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_packing_numbers ALTER COLUMN packing_id SET DEFAULT nextval('sdmes.mtl_packing_numbers_packing_id_seq'::regclass);


--
-- Name: mtl_repair_codes repair_code_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_repair_codes ALTER COLUMN repair_code_id SET DEFAULT nextval('sdmes.mtl_repair_codes_repair_code_id_seq'::regclass);


--
-- Name: mtl_routings routing_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_routings ALTER COLUMN routing_id SET DEFAULT nextval('sdmes.mtl_routings_routing_id_seq'::regclass);


--
-- Name: packing packing_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.packing ALTER COLUMN packing_id SET DEFAULT nextval('sdmes.packing_packing_id_seq'::regclass);


--
-- Name: roles role_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.roles ALTER COLUMN role_id SET DEFAULT nextval('sdmes.roles_id_seq'::regclass);


--
-- Name: users user_id; Type: DEFAULT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.users ALTER COLUMN user_id SET DEFAULT nextval('sdmes.users_user_id_seq'::regclass);


--
-- Data for Name: job_customer_serial_numbers; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: job_dispatch_op_his_details; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: job_dispatch_op_histories; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: job_dispatch_operations; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: job_dispatches; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: job_inspection_results; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: job_serial_numbers; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mes_lookup_values; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mes_printing_programs; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mes_program_errors; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--

INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 10, 'E_NOT_EXIST_PALLET_PACKING_TYPE', 'Pallet 포장 기준정보가 존재하지 않습니다.', -1, '2010-06-22 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 345, 'E_EXIST_QA_HIS', '이미 QA검사를 마친 기번입니다.', 105796, '2010-12-13 00:00:00', '2010-12-13 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 20, 'E_NOT_EXIST_SERIAL', '존재하지 않는 기번입니다.', -1, '2010-06-22 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 30, 'E_NOT_EXIST_OPERATION', '등록되지 않은 공정입니다.', -1, '2010-06-22 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 40, 'E_OVER_PACKING', '적재수량을 초과하였습니다.', -1, '2010-06-22 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 50, 'E_NOT_EXIST_PACKING', '존재하지 않는 포장 번호 입니다.', -1, '2010-06-23 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 60, 'E_NOT_EXIST_PACKING_TYPE', '포장 기준정보가 존재하지 않습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 70, 'E_NOT_ALLOWED_MIXED_PACKING', '혼적은 불가합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 80, 'E_NOT_EQUALED_PACKING_ITEM', '포장 Item이 일치하지 않습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 90, 'E_ALREADY_PACKED_SERIAL_NO', '이미 포장된 기번입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 100, 'E_EMPTY_PACKING', '적재되지 않은 포장번호입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 10, 'E_UNREGISTERED_JOB', '등록되지 않은 Job입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 20, 'E_UNREGISTERED_SERIAL_INFO', '기번 기준정보 미등록입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 30, 'E_SERIAL_ALREADY_EXISTED', '이미 기번이 발행된 Job입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 40, 'E_ALREADY_START_OP', '이미 공정이 시작되었습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 50, 'E_SERIAL_NOT_CREATED_JOB', '기번이 생성되지 않았습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 60, 'E_UNREGISTERED_LINE', '등록되지 않는 Line 입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 70, 'E_UNREGISTERED_ITEM', '등록되지 않는 Item 입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 10, 'E_NOT_EXISTED_SERIAL', '존재하지 않는 기번입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 20, 'E_NOT_EXIST_OPERATION', '등록되지 않은 공정입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 30, 'E_TRACE_BARCODE_ERROR', '추적부품 Barcode가 일치하지 않습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 40, 'E_ALREADY_EOL_COMPLETE', '이미 EOL이 완료되었습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 50, 'E_REQUIRED_OPERATION', '필수 공정이 선행되지 않았습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 60, 'E_PASSFAIL_EMPTY', 'PASS/FAIL이 입력되지 않았습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 70, 'E_PASSFAIL_INVALID', 'PASS/FAIL만 입력이 가능합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 80, 'E_SERIAL_EMPTY', '기번을 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 90, 'E_DEFECT_CODE_EMPTY', '불량코드를 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 100, 'E_REPAIR_CODE_EMPTY', '수리코드를 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 110, 'E_ITEM_BARCODE_EMPTY', '추적부품에 대해서는 수리시 부품 LOT/SERIAL을 꼭 입력해야 합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 35, 'E_ALREADY_ASSEMBLED', '이미 조립된 추적부품입니다.', -1, '2010-07-23 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 110, 'E_ALREADY_LOADED', '이미 적재된 기번입니다.', 105796, '2010-07-23 00:00:00', '2010-07-23 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_DEFECTS', 'KO', 130, 'E_INVALID_DEFECT_CODE', '불량 라벨 바코드 정보를 다시 확인하세요.', 1, '2010-07-26 00:00:00', '2010-07-26 00:00:00', 1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_DEFECTS', 'KO', 140, 'E_INVALID_REPAIR_CODE', '수리 라벨 바코드 정보를 다시 확인하세요.', 1, '2010-07-26 00:00:00', '2010-07-26 00:00:00', 1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_DEFECTS', 'KO', 150, 'E_BARCODE_EMPTY', '바코드를 읽으세요.', 1, '2010-07-26 00:00:00', '2010-07-26 00:00:00', 1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 320, 'E_INAPPROPRIATE_SERIAL', '잘못된 바코드입니다.', -1, '2010-10-14 00:00:00', '2010-10-14 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 330, 'E_FAIL_EXIST', '검사 결과가 FAIL인 것이 있습니다. 수리 후 PASS를 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 200, 'E_INAPPROPRIATE_PN', 'PART SCAN에 없는 부품일련번호입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 220, 'E_NCHECK_SMALLBOX', 'SMALL BOX 기번이 아님', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 210, 'E_NCHECK_SMALL_CONFIG', 'SMALL BOX와 CONFIGLABEL과 일치하지 않습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 201, 'E_NCHECK_2DBARCODE', '2D 바코드 라벨을 입력하세요', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 202, 'E_NCHECK_INVALID_2D', '2D 바코드 기본정보 등록이 필요합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 203, 'E_NCHECK_2D_CONFIG', 'Config card와 2D 내용이 다릅니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 204, 'E_SELECT_LINE', '라인을 선택해 주세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 205, 'E_SCAN_CONFIG', '컨피그 카드를 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 206, 'E_SCAN_BOXLABEL', '박스라벨을 입력하세요', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 207, 'E_SMALLBOX_BOXLABEL', 'SMALL BOX 기번과 BOX 기번이 같지 않음.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 208, 'E_CONFIG_BOXLABEL', '검사표기번과 BOX라벨 기번이 일치하지 않습니다', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 209, 'E_SELECT_CRITERIA', '조회조건을 입력하세요', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 211, 'E_SELECT_SMALLBOX', 'SMALLBOX라벨을 입력하세요', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 212, 'E_NOTYET_PARTSCAN', '추적부품조립이 완성되지 않았습니다', -1, '2010-11-25 00:00:00', '2010-11-25 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 213, 'E_ALREADY_DONE', '이미 같은 공정이 진행된  기번입니다.', -1, '2010-11-25 00:00:00', '2010-11-25 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 340, 'M_EOL_POSSIBLE', 'EOL이 가능합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 341, 'E_SELECT_MODELBARCODE', '모델기번 라벨을 입력하세요', -1, '2010-11-30 00:00:00', '2010-11-30 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 342, 'E_NCHECK_MODEL_CONFIG', '검사표기번과MODEL 바코드 기번이 일치하지 않습니다', -1, '2010-11-30 00:00:00', '2010-11-30 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 343, 'E_NCHECK_PPID', 'DELL PPID가 아님', 105796, '2010-12-09 00:00:00', '2010-12-09 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 344, 'E_NCHECK_NOT_PPID', 'DELL PPID가 생성되지 않았습니다.', 105796, '2010-12-09 00:00:00', '2010-12-09 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 355, 'E_NO_CONFIGURATION', 'MAMBA Configuration이 선행되지 않았습니다.', 105796, '2011-10-20 00:00:00', '2011-10-20 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('F_MES_GET_ERR_MESSAGE', 'KO', 2003, 'E_UNDEFINED_ERROR', '정의되지 않은 에러입니다.', -1, '2020-06-03 00:00:00', '2020-06-03 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 2001, 'E_NCHECK_QRCODE_SERIAL', 'QRCODE 기번이 잘못됐습니다.', 105796, '2011-05-02 00:00:00', '2011-05-02 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 2000, 'E_NCHECK_QRCODE_ITEM', 'QRCODE ITEM이 잘못됐습니다.', 105796, '2011-05-02 00:00:00', '2011-05-02 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 2002, 'E_NCHECK_NOT_OEM', 'OEM 기번이 잘못됐습니다.', -1, '2014-01-06 00:00:00', '2014-01-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 1000, 'E_NOT_EXIST_EOL', 'EOL이 되지 않았습니다.', -1, '2020-06-03 00:00:00', '2020-06-03 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 10, 'E_NOT_EXIST_PALLET_PACKING_TYPE', 'Pallet 포장 기준정보가 존재하지 않습니다.', -1, '2010-06-22 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 345, 'E_EXIST_QA_HIS', '이미 QA검사를 마친 기번입니다.', 105796, '2010-12-13 00:00:00', '2010-12-13 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 20, 'E_NOT_EXIST_SERIAL', '존재하지 않는 기번입니다.', -1, '2010-06-22 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 30, 'E_NOT_EXIST_OPERATION', '등록되지 않은 공정입니다.', -1, '2010-06-22 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 40, 'E_OVER_PACKING', '적재수량을 초과하였습니다.', -1, '2010-06-22 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 50, 'E_NOT_EXIST_PACKING', '존재하지 않는 포장 번호 입니다.', -1, '2010-06-23 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 60, 'E_NOT_EXIST_PACKING_TYPE', '포장 기준정보가 존재하지 않습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 70, 'E_NOT_ALLOWED_MIXED_PACKING', '혼적은 불가합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 80, 'E_NOT_EQUALED_PACKING_ITEM', '포장 Item이 일치하지 않습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 90, 'E_ALREADY_PACKED_SERIAL_NO', '이미 포장된 기번입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 100, 'E_EMPTY_PACKING', '적재되지 않은 포장번호입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 10, 'E_UNREGISTERED_JOB', '등록되지 않은 Job입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 20, 'E_UNREGISTERED_SERIAL_INFO', '기번 기준정보 미등록입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 30, 'E_SERIAL_ALREADY_EXISTED', '이미 기번이 발행된 Job입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 40, 'E_ALREADY_START_OP', '이미 공정이 시작되었습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 50, 'E_SERIAL_NOT_CREATED_JOB', '기번이 생성되지 않았습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 60, 'E_UNREGISTERED_LINE', '등록되지 않는 Line 입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 70, 'E_UNREGISTERED_ITEM', '등록되지 않는 Item 입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 10, 'E_NOT_EXISTED_SERIAL', '존재하지 않는 기번입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 20, 'E_NOT_EXIST_OPERATION', '등록되지 않은 공정입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 30, 'E_TRACE_BARCODE_ERROR', '추적부품 Barcode가 일치하지 않습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 40, 'E_ALREADY_EOL_COMPLETE', '이미 EOL이 완료되었습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 50, 'E_REQUIRED_OPERATION', '필수 공정이 선행되지 않았습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 60, 'E_PASSFAIL_EMPTY', 'PASS/FAIL이 입력되지 않았습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 70, 'E_PASSFAIL_INVALID', 'PASS/FAIL만 입력이 가능합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 80, 'E_SERIAL_EMPTY', '기번을 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 90, 'E_DEFECT_CODE_EMPTY', '불량코드를 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 100, 'E_REPAIR_CODE_EMPTY', '수리코드를 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 110, 'E_ITEM_BARCODE_EMPTY', '추적부품에 대해서는 수리시 부품 LOT/SERIAL을 꼭 입력해야 합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 35, 'E_ALREADY_ASSEMBLED', '이미 조립된 추적부품입니다.', -1, '2010-07-23 00:00:00', '2010-07-23 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 110, 'E_ALREADY_LOADED', '이미 적재된 기번입니다.', 105796, '2010-07-23 00:00:00', '2010-07-23 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_DEFECTS', 'EN', 130, 'E_INVALID_DEFECT_CODE', '불량 라벨 바코드 정보를 다시 확인하세요.', 1, '2010-07-26 00:00:00', '2010-07-26 00:00:00', 1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_DEFECTS', 'EN', 140, 'E_INVALID_REPAIR_CODE', '수리 라벨 바코드 정보를 다시 확인하세요.', 1, '2010-07-26 00:00:00', '2010-07-26 00:00:00', 1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_DEFECTS', 'EN', 150, 'E_BARCODE_EMPTY', '바코드를 읽으세요.', 1, '2010-07-26 00:00:00', '2010-07-26 00:00:00', 1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 320, 'E_INAPPROPRIATE_SERIAL', '잘못된 바코드입니다.', -1, '2010-10-14 00:00:00', '2010-10-14 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 330, 'E_FAIL_EXIST', '검사 결과가 FAIL인 것이 있습니다. 수리 후 PASS를 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 200, 'E_INAPPROPRIATE_PN', 'PART SCAN에 없는 부품일련번호입니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 220, 'E_NCHECK_SMALLBOX', 'SMALL BOX 기번이 아님', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 210, 'E_NCHECK_SMALL_CONFIG', 'SMALL BOX와 CONFIGLABEL과 일치하지 않습니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 201, 'E_NCHECK_2DBARCODE', '2D 바코드 라벨을 입력하세요', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 202, 'E_NCHECK_INVALID_2D', '2D 바코드 기본정보 등록이 필요합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 203, 'E_NCHECK_2D_CONFIG', 'Config card와 2D 내용이 다릅니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 204, 'E_SELECT_LINE', '라인을 선택해 주세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 205, 'E_SCAN_CONFIG', '컨피그 카드를 입력하세요.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 206, 'E_SCAN_BOXLABEL', '박스라벨을 입력하세요', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 207, 'E_SMALLBOX_BOXLABEL', 'SMALL BOX 기번과 BOX 기번이 같지 않음.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 208, 'E_CONFIG_BOXLABEL', '검사표기번과 BOX라벨 기번이 일치하지 않습니다', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 209, 'E_SELECT_CRITERIA', '조회조건을 입력하세요', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 211, 'E_SELECT_SMALLBOX', 'SMALLBOX라벨을 입력하세요', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 212, 'E_NOTYET_PARTSCAN', '추적부품조립이 완성되지 않았습니다', -1, '2010-11-25 00:00:00', '2010-11-25 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 213, 'E_ALREADY_DONE', '이미 같은 공정이 진행된  기번입니다.', -1, '2010-11-25 00:00:00', '2010-11-25 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 340, 'M_EOL_POSSIBLE', 'EOL이 가능합니다.', -1, '2010-06-28 00:00:00', '2010-06-28 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 341, 'E_SELECT_MODELBARCODE', '모델기번 라벨을 입력하세요', -1, '2010-11-30 00:00:00', '2010-11-30 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 342, 'E_NCHECK_MODEL_CONFIG', '검사표기번과MODEL 바코드 기번이 일치하지 않습니다', -1, '2010-11-30 00:00:00', '2010-11-30 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 343, 'E_NCHECK_PPID', 'DELL PPID가 아님', 105796, '2010-12-09 00:00:00', '2010-12-09 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 344, 'E_NCHECK_NOT_PPID', 'DELL PPID가 생성되지 않았습니다.', 105796, '2010-12-09 00:00:00', '2010-12-09 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 355, 'E_NO_CONFIGURATION', 'MAMBA Configuration이 선행되지 않았습니다.', 105796, '2011-10-20 00:00:00', '2011-10-20 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('F_MES_GET_ERR_MESSAGE', 'EN', 2003, 'E_UNDEFINED_ERROR', '정의되지 않은 에러입니다.', -1, '2020-06-03 00:00:00', '2020-06-03 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 2001, 'E_NCHECK_QRCODE_SERIAL', 'QRCODE 기번이 잘못됐습니다.', 105796, '2011-05-02 00:00:00', '2011-05-02 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 2000, 'E_NCHECK_QRCODE_ITEM', 'QRCODE ITEM이 잘못됐습니다.', 105796, '2011-05-02 00:00:00', '2011-05-02 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 2002, 'E_NCHECK_NOT_OEM', 'OEM 기번이 잘못됐습니다.', -1, '2014-01-06 00:00:00', '2014-01-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 1000, 'E_NOT_EXIST_EOL', 'EOL이 되지 않았습니다.', -1, '2020-06-03 00:00:00', '2020-06-03 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 1345, 'E_NCHECK_FAIL', '라벨체크에 실패했습니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 400, 'E_INSPECTION_EMPTY', 'FAIL된 검사가 없습니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 346, 'E_EXIST_SOL_ALREADY', '이미 SOL한 기번입니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 120, 'E_ALREADY_PACKED_MOVETAG', '이미 적재 완료된 포장번호입니다.', 105796, '2015-05-06 00:00:00', '2015-05-06 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 130, 'E_ALREADY_CANCELED_MOVETAG', '이미 취소된 포장번호입니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'KO', 2001, 'E_LOT_STATUS_INVALID', '샘플링검사를 할 수 있는 LOT 상태가 아닙니다. ', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_SAMPLING_INSPECTION', 'KO', 2002, 'E_EXIST_THE_SAME_RESULT', '동일한 판정결과를 중복 입력했습니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 214, 'E_NCHECK_EDP', 'EDP 번호가 일치하지 않습니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'KO', 1070, 'E_RESULT_FAIL_EXIST', '검사 결과가 FAIL인 것이 있습니다. 수리 후 PASS를 입력하세요.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'KO', 1080, 'E_NOT_ALLOWED_MIXED_LOADING', '혼적은 불가합니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 346, 'E_EXIST_SOL_ALREADY', '이미 SOL한 기번입니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 400, 'E_INSPECTION_EMPTY', 'FAIL된 검사가 없습니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 214, 'E_NCHECK_EDP', 'EDP 번호가 일치하지 않습니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 1345, 'E_NCHECK_FAIL', '라벨체크에 실패했습니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'EN', 1070, 'E_RESULT_FAIL_EXIST', '검사 결과가 FAIL인 것이 있습니다. 수리 후 PASS를 입력하세요.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'EN', 2001, 'E_LOT_STATUS_INVALID', '샘플링검사를 할 수 있는 LOT 상태가 아닙니다. ', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 130, 'E_ALREADY_CANCELED_MOVETAG', '이미 취소된 포장번호입니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 120, 'E_ALREADY_PACKED_MOVETAG', '이미 적재 완료된 포장번호입니다.', 105796, '2015-05-06 00:00:00', '2015-05-06 00:00:00', 105796);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'EN', 1080, 'E_NOT_ALLOWED_MIXED_LOADING', '혼적은 불가합니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_SAMPLING_INSPECTION', 'EN', 2002, 'E_EXIST_THE_SAME_RESULT', '동일한 판정결과를 중복 입력했습니다.', -1, '2015-05-06 00:00:00', '2015-05-06 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 10, 'E_NOT_EXIST_PALLET_PACKING_TYPE', 'Không tồn tại thông tin tiêu chuẩn đóng gói Pallet', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 10, 'E_NOT_EXISTED_SERIAL', 'Số serial này không tồn tại', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 10, 'E_UNREGISTERED_JOB', 'JOP chưa được đăng ký', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 20, 'E_NOT_EXIST_OPERATION', 'Công đoạn chưa được đăng ký', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 20, 'E_NOT_EXIST_SERIAL', 'Số serial này không tồn tại', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 20, 'E_UNREGISTERED_SERIAL_INFO', 'Chưa đăng ký thông tin tiêu chuẩn serial', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 30, 'E_NOT_EXIST_OPERATION', 'Công đoạn chưa được đăng ký', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 30, 'E_SERIAL_ALREADY_EXISTED', 'Job này đã được phát hành số serial trước rồi', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 30, 'E_TRACE_BARCODE_ERROR', 'Mã vạch vật tư đang theo dõi truy xuất nguồn gốc không giống ', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 35, 'E_ALREADY_ASSEMBLED', 'Vật tư theo dõi truy xuất nguồn gốc đã được lắp ráp trước', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 40, 'E_ALREADY_EOL_COMPLETE', 'Đã hoàn thành trước EOL', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 40, 'E_ALREADY_START_OP', 'Công đoạn trước được bắt đầu', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 40, 'E_OVER_PACKING', 'Đã vượt quá số lượng chất lên ', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 50, 'E_NOT_EXIST_PACKING', 'Số đóng gói này không tồn tại', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 50, 'E_REQUIRED_OPERATION', 'Không tiến hành trước công đoạn cần thiết', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 50, 'E_SERIAL_NOT_CREATED_JOB', 'Số serial chưa được được tạo', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 60, 'E_NOT_EXIST_PACKING_TYPE', 'Không tồn tại thông tin tiêu chuẩn đóng gói', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 60, 'E_PASSFAIL_EMPTY', 'Không nhập được PASS/FAIL ', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 60, 'E_UNREGISTERED_LINE', 'Line chưa được đăng ký', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 70, 'E_NOT_ALLOWED_MIXED_PACKING', 'Không thể lẫn lộn', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 70, 'E_PASSFAIL_INVALID', 'Chỉ có thể nhập được PASS/FAIL ', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 70, 'E_UNREGISTERED_ITEM', 'Item chưa được đăng ký', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 80, 'E_NOT_EQUALED_PACKING_ITEM', 'Item đóng gói không giống', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 80, 'E_SERIAL_EMPTY', 'Hãy nhập số serial', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 90, 'E_ALREADY_PACKED_SERIAL_NO', 'Số serial này đã đóng gói trước đó rồi', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 90, 'E_DEFECT_CODE_EMPTY', 'Hãy nhập mã vạch lỗi', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 100, 'E_EMPTY_PACKING', 'Số đóng gói này chưa được chuyển đi', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 100, 'E_REPAIR_CODE_EMPTY', 'Hãy nhập mã vạch  sửa', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 110, 'E_ALREADY_LOADED', 'Số serial này đã được chuyển đi trước đó rồi', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 110, 'E_ITEM_BARCODE_EMPTY', 'Vật tư  theo dõi truy xuất nguồn gốc khi sửa xong nhớ phải nhập số Lot/serial ', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 120, 'E_ALREADY_PACKED_MOVETAG', 'Mã đóng gói này đã được Scan trước đó rồi', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 130, 'E_ALREADY_CANCELED_MOVETAG', 'Số đóng gói này đã hủy trước đó rồi', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_DEFECTS', 'VN', 130, 'E_INVALID_DEFECT_CODE', 'Hãy xác nhận lại thông tin mã vạch label NG', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_DEFECTS', 'VN', 140, 'E_INVALID_REPAIR_CODE', 'Hãy xác nhận lại thông tin mã vạch label  sửa', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_DEFECTS', 'VN', 150, 'E_BARCODE_EMPTY', 'Hãy đọc mã vạch', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 200, 'E_INAPPROPRIATE_PN', 'Số serial vật tư không có trong PART SCAN ', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 201, 'E_NCHECK_2DBARCODE', 'Hãy nhập mã vạch Label 2D', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 202, 'E_NCHECK_INVALID_2D', 'Cần đăng ký thông tin cơ bản mã vạch 2D', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 203, 'E_NCHECK_2D_CONFIG', 'Nội dung Config card và 2D khác nhau', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 204, 'E_SELECT_LINE', 'Hãy lựa chọn Line', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 205, 'E_SCAN_CONFIG', 'Hãy nhập thẻ config', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 206, 'E_SCAN_BOXLABEL', 'Hãy nhập Label Box', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 207, 'E_SMALLBOX_BOXLABEL', 'Số serial SMALL BOX và số serial BOX không giống nhau', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 208, 'E_CONFIG_BOXLABEL', 'Số serial ở phiếu kiểm tra và số serial Label BOX không khớp nhau', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 209, 'E_SELECT_CRITERIA', 'Hãy nhập điều kiện truy vấn', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 210, 'E_NCHECK_SMALL_CONFIG', 'SMALL BOX và CONFIGLABEL không giống nhau', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 211, 'E_SELECT_SMALLBOX', 'Hãy nhập Label SMALL BOX ', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 212, 'E_NOTYET_PARTSCAN', 'Vật tư theo dõi truy xuất nguồn gốc chưa hoàn thành lắp ráp', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 213, 'E_ALREADY_DONE', 'Số serial  được tiến hành giống công đoạn trước', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 214, 'E_NCHECK_EDP', 'Số EDP  không giống nhau', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 220, 'E_NCHECK_SMALLBOX', 'Không phải số serial SMALL BOX', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 320, 'E_INAPPROPRIATE_SERIAL', 'Sai số mã vạch', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 330, 'E_FAIL_EXIST', 'Có FAIL trong kết quả kiểm tra . sau khi sửa hãy nhập PASS', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 340, 'M_EOL_POSSIBLE', 'EOL  có khả năng', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 341, 'E_SELECT_MODELBARCODE', 'Hãy nhập Label serial Model', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 342, 'E_NCHECK_MODEL_CONFIG', 'Số serial ở phiếu kiểm tra và số serial Mã vạch Model không khớp nhau', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 343, 'E_NCHECK_PPID', 'Không phải DELL PPID', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 344, 'E_NCHECK_NOT_PPID', 'DELL PPID  chưa được tạo', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 345, 'E_EXIST_QA_HIS', 'Đã kết thúc số serial trước kiểm tra QA', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 346, 'E_EXIST_SOL_ALREADY', 'Số serial đã Scan SOL trước  rồi', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 355, 'E_NO_CONFIGURATION', 'MAMBA Configuration không thực hiện được', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 400, 'E_INSPECTION_EMPTY', 'không kiểm tra được FAIL ', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 1000, 'E_NOT_EXIST_EOL', 'EOL  không được', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 1070, 'E_RESULT_FAIL_EXIST', 'Có FAIL trong kết quả kiểm tra . sau khi sửa hãy nhập PASS', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_PACKING', 'VN', 1080, 'E_NOT_ALLOWED_MIXED_LOADING', 'Không thể lẫn lộn', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 1345, 'E_NCHECK_FAIL', 'Check Label thất bại', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 2000, 'E_NCHECK_QRCODE_ITEM', 'QRCODE ITEM bị sai', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCHES', 'VN', 2001, 'E_LOT_STATUS_INVALID', 'Không phải trạng thái LOT có thể kiểm tra Sampling', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 2001, 'E_NCHECK_QRCODE_SERIAL', 'Số serial QRCODE bị sai ', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_SAMPLING_INSPECTION', 'VN', 2002, 'E_EXIST_THE_SAME_RESULT', 'Nhập trùng lặp kết quả đánh giá', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('K_JOB_DISPATCH_OP_HISTORIES', 'VN', 2002, 'E_NCHECK_NOT_OEM', 'Số OEM sai', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);
INSERT INTO sdmes.mes_program_errors VALUES ('F_MES_GET_ERR_MESSAGE', 'VN', 2003, 'E_UNDEFINED_ERROR', 'Lỗi không được xác định', -1, '2015-05-20 00:00:00', '2015-05-20 00:00:00', -1);


--
-- Data for Name: mes_sites; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--

INSERT INTO sdmes.mes_sites VALUES (1, 'Korea', 'Seoul', 'Seoul Factory');


--
-- Data for Name: mes_systems; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mes_user_profiles; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_defect_codes; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_hold_part_serials; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_inspections; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_item_label_rules; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_item_masters; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_item_packing_rules; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_item_serial_rules; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_lines; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_operation_parts; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_operations; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_packing_number_contents; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_packing_numbers; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_quality_plans; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_repair_codes; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_routing_details; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: mtl_routings; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: packing; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--



--
-- Data for Name: roles; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--

INSERT INTO sdmes.roles VALUES (1, 'ROLE_BASIC', 'Default Role');
INSERT INTO sdmes.roles VALUES (2, 'ROLE_ADMIN', 'Administrator Role');


--
-- Data for Name: user_roles; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--

INSERT INTO sdmes.user_roles VALUES (1, 2);


--
-- Data for Name: users; Type: TABLE DATA; Schema: sdmes; Owner: mesuser
--

INSERT INTO sdmes.users VALUES (1, 'administrator', '$2a$10$AtHyV2gwXzjhJH2obiqQQ.zYlyxxYBJVZgpjWQrVouajHJV4sdtxq', 'Admin', 'User', 'admin@admin.com', 'MES', 1, 'EN', '2020-08-31 16:26:35.358', '2020-08-31 16:26:35.358', '2020-08-31 16:26:35.358', NULL);


--
-- Name: hibernate_sequence; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.hibernate_sequence', 5, true);


--
-- Name: job_dispatch_op_histories_history_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.job_dispatch_op_histories_history_id_seq', 1, false);


--
-- Name: job_dispatch_operations_dispatch_operation_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.job_dispatch_operations_dispatch_operation_id_seq', 1, false);


--
-- Name: job_dispatches_s; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.job_dispatches_s', 1, false);


--
-- Name: job_inspection_results_result_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.job_inspection_results_result_id_seq', 1, false);


--
-- Name: job_no_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.job_no_seq', 1, false);


--
-- Name: job_serial_numbers_serial_number_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.job_serial_numbers_serial_number_id_seq', 1, false);


--
-- Name: mes_printing_programs_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mes_printing_programs_id_seq', 1, false);


--
-- Name: mes_sites_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mes_sites_id_seq', 1, true);


--
-- Name: mes_systems_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mes_systems_id_seq', 1, false);


--
-- Name: mes_user_profiles_user_profile_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mes_user_profiles_user_profile_id_seq', 1, false);


--
-- Name: mtl_defect_codes_defect_code_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_defect_codes_defect_code_id_seq', 1, false);


--
-- Name: mtl_item_label_rules_label_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_item_label_rules_label_id_seq', 1, false);


--
-- Name: mtl_item_packing_rules_packing_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_item_packing_rules_packing_id_seq', 1, false);


--
-- Name: mtl_item_serial_rules_serial_rule_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_item_serial_rules_serial_rule_id_seq', 1, false);


--
-- Name: mtl_operations_operation_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_operations_operation_id_seq', 1, false);


--
-- Name: mtl_packing_numbers_packing_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_packing_numbers_packing_id_seq', 1, false);


--
-- Name: mtl_packing_numbers_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_packing_numbers_seq', 20000000, false);


--
-- Name: mtl_quality_plans_s; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_quality_plans_s', 1, false);


--
-- Name: mtl_repair_codes_repair_code_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_repair_codes_repair_code_id_seq', 1, false);


--
-- Name: mtl_routings_routing_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.mtl_routings_routing_id_seq', 1, false);


--
-- Name: packing_packing_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.packing_packing_id_seq', 1, false);


--
-- Name: roles_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.roles_id_seq', 2, true);


--
-- Name: users_user_id_seq; Type: SEQUENCE SET; Schema: sdmes; Owner: mesuser
--

SELECT pg_catalog.setval('sdmes.users_user_id_seq', 1, true);


--
-- Name: job_dispatch_op_histories job_dispatch_op_histories_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.job_dispatch_op_histories
    ADD CONSTRAINT job_dispatch_op_histories_pkey PRIMARY KEY (history_id);


--
-- Name: job_dispatch_operations job_dispatch_operations_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.job_dispatch_operations
    ADD CONSTRAINT job_dispatch_operations_pkey PRIMARY KEY (dispatch_operation_id);


--
-- Name: job_inspection_results job_inspection_results_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.job_inspection_results
    ADD CONSTRAINT job_inspection_results_pkey PRIMARY KEY (result_id);


--
-- Name: job_serial_numbers job_serial_numbers_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.job_serial_numbers
    ADD CONSTRAINT job_serial_numbers_pkey PRIMARY KEY (serial_number_id);


--
-- Name: mes_printing_programs mes_printing_programs_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mes_printing_programs
    ADD CONSTRAINT mes_printing_programs_pkey PRIMARY KEY (id);


--
-- Name: mes_sites mes_sites_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mes_sites
    ADD CONSTRAINT mes_sites_pkey PRIMARY KEY (id);


--
-- Name: mes_user_profiles mes_user_profiles_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mes_user_profiles
    ADD CONSTRAINT mes_user_profiles_pkey PRIMARY KEY (user_profile_id);


--
-- Name: mtl_defect_codes mtl_defect_codes_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_defect_codes
    ADD CONSTRAINT mtl_defect_codes_pkey PRIMARY KEY (defect_code_id);


--
-- Name: mtl_defect_codes mtl_defect_codes_un; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_defect_codes
    ADD CONSTRAINT mtl_defect_codes_un UNIQUE (defect_code);


--
-- Name: mtl_item_label_rules mtl_item_label_rules_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_item_label_rules
    ADD CONSTRAINT mtl_item_label_rules_pkey PRIMARY KEY (label_id);


--
-- Name: mtl_item_packing_rules mtl_item_packing_rules_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_item_packing_rules
    ADD CONSTRAINT mtl_item_packing_rules_pkey PRIMARY KEY (packing_id);


--
-- Name: mtl_item_serial_rules mtl_item_serial_rules_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_item_serial_rules
    ADD CONSTRAINT mtl_item_serial_rules_pkey PRIMARY KEY (serial_rule_id);


--
-- Name: mtl_operations mtl_operations_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_operations
    ADD CONSTRAINT mtl_operations_pkey PRIMARY KEY (operation_id);


--
-- Name: mtl_packing_numbers mtl_packing_numbers_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_packing_numbers
    ADD CONSTRAINT mtl_packing_numbers_pkey PRIMARY KEY (packing_id);


--
-- Name: mtl_repair_codes mtl_repair_codes_pk; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_repair_codes
    ADD CONSTRAINT mtl_repair_codes_pk PRIMARY KEY (repair_code_id);


--
-- Name: mtl_repair_codes mtl_repair_codes_un; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_repair_codes
    ADD CONSTRAINT mtl_repair_codes_un UNIQUE (repair_code);


--
-- Name: mtl_routings mtl_routings_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.mtl_routings
    ADD CONSTRAINT mtl_routings_pkey PRIMARY KEY (routing_id);


--
-- Name: packing packing_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.packing
    ADD CONSTRAINT packing_pkey PRIMARY KEY (packing_id);


--
-- Name: roles roles_pk; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.roles
    ADD CONSTRAINT roles_pk PRIMARY KEY (role_id);


--
-- Name: user_roles user_roles_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.user_roles
    ADD CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (user_id);


--
-- Name: job_dispatches_n1; Type: INDEX; Schema: sdmes; Owner: mesuser
--

CREATE INDEX job_dispatches_n1 ON sdmes.job_dispatches USING btree (start_date);


--
-- Name: job_dispatches_n2; Type: INDEX; Schema: sdmes; Owner: mesuser
--

CREATE INDEX job_dispatches_n2 ON sdmes.job_dispatches USING btree (part_lot_number);


--
-- Name: job_dispatches_n3; Type: INDEX; Schema: sdmes; Owner: mesuser
--

CREATE INDEX job_dispatches_n3 ON sdmes.job_dispatches USING btree (line_id);


--
-- Name: job_dispatches_u1; Type: INDEX; Schema: sdmes; Owner: mesuser
--

CREATE INDEX job_dispatches_u1 ON sdmes.job_dispatches USING btree (dispatch_id);


--
-- Name: mtl_item_masters_u1; Type: INDEX; Schema: sdmes; Owner: mesuser
--

CREATE UNIQUE INDEX mtl_item_masters_u1 ON sdmes.mtl_item_masters USING btree (mfg_site_id, item_id);


--
-- Name: mtl_item_masters_u2; Type: INDEX; Schema: sdmes; Owner: mesuser
--

CREATE UNIQUE INDEX mtl_item_masters_u2 ON sdmes.mtl_item_masters USING btree (item_number);


--
-- Name: user_roles fkh8ciramu9cc9q3qcqiv4ue8a6; Type: FK CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.user_roles
    ADD CONSTRAINT fkh8ciramu9cc9q3qcqiv4ue8a6 FOREIGN KEY (role_id) REFERENCES sdmes.roles(role_id);


--
-- Name: user_roles fkhfh9dx7w3ubf1co1vdev94g3f; Type: FK CONSTRAINT; Schema: sdmes; Owner: mesuser
--

ALTER TABLE ONLY sdmes.user_roles
    ADD CONSTRAINT fkhfh9dx7w3ubf1co1vdev94g3f FOREIGN KEY (user_id) REFERENCES sdmes.users(user_id);


--
-- PostgreSQL database dump complete
--

